<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unit-testing on mnavarro.dev</title><link>https://mnavarro.dev/tags/unit-testing/</link><description>Recent content in unit-testing on mnavarro.dev</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Mon, 16 Dec 2019 11:18:48 -0300</lastBuildDate><atom:link href="https://mnavarro.dev/tags/unit-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit-testing the filesystem in PHP</title><link>https://mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description></item></channel></rss>