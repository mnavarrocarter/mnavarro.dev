<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on The Chilean Nerd</title><link>https://mnavarro.dev/tags/oop/</link><description>Recent content in OOP on The Chilean Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><copyright>Â©2019 Matias Navarro Carter. CC-BY-SA.</copyright><lastBuildDate>Sun, 26 Sep 2021 20:00:00 +0100</lastBuildDate><atom:link href="https://mnavarro.dev/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>The Golden Rule for Writing Code</title><link>https://mnavarro.dev/posts/golden-rule-code/</link><pubDate>Sun, 26 Sep 2021 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/golden-rule-code/</guid><description>Every now and then I read a piece about DRY vs WET, explaining their benefits over its counterpart. Most of the time, these pieces are quite unhelpful, as they are way too vague and general. They lack a crucial thing, and that is context.
I believe this is the most common aspect on disagreements about any topic in software development. Someone writes a piece about X or Y topic arguing a point, but then another piece comes up arguing a different case (or sometimes totally the opposite one).</description><content>&lt;p>Every now and then I read a piece about &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY&lt;/a> vs &lt;a href="https://dev.to/nettab/we-should-all-be-writing-wet-code-3d95">WET&lt;/a>, explaining their benefits
over its counterpart. Most of the time, these pieces are quite unhelpful, as
they are way too vague and general. They lack a crucial thing, and that
is &lt;strong>context&lt;/strong>.&lt;/p>
&lt;p>I believe this is the most common aspect on disagreements about any topic in
software development. Someone writes a piece about X or Y topic arguing a point,
but then another piece comes up arguing a different case (or sometimes totally
the opposite one). Almost always both authors are presenting valuable and correct
ideas, but their conclusions are different. Why?&lt;/p>
&lt;p>I believe this is due to a lack of context, and this happens a lot in the DRY and WET
discussions.&lt;/p>
&lt;p>For instance, I read &lt;a href="https://kentcdodds.com/blog/aha-programming?s=09">this article&lt;/a> that poses yet-another paradigm for dealing
with the problem of when to abstract.&lt;/p>
&lt;p>You should absolutely read it. Basically, the author summarized DRY, it&amp;rsquo;s benefits
and problems. Then it summarizes WET&amp;rsquo;s benefits and problems. And then goes on
to present it&amp;rsquo;s own acronymic alternative: AHA.&lt;/p>
&lt;p>So, this is the state of the art now in the debate (I&amp;rsquo;m intentionally reducing the
author&amp;rsquo;s ideas to a few words here):&lt;/p>
&lt;ol>
&lt;li>Someone proposed DRY: We should avoid repeated or duplicated code by abstracting it out.&lt;/li>
&lt;li>Someone proposed WET in reaction: We should wait until the duplication is real. People abstract too early.&lt;/li>
&lt;li>Someone proposed AHA in response: Even when there is real duplication, you don&amp;rsquo;t know the future. We should wait for the right abstraction.&lt;/li>
&lt;/ol>
&lt;p>That&amp;rsquo;s it, in a nutshell. But all this is not helpful at all. There are a lot of
questions left unanswered. Does DRY means I can have no duplicated code at all?
Is all duplication bad? When is it too early to abstract? How can I know when is
the right time to abstract something away?&lt;/p>
&lt;p>Articles don&amp;rsquo;t answer that question, because they can&amp;rsquo;t. And they can&amp;rsquo;t because
the answer is &amp;ldquo;it depends&amp;rdquo;. Depends of your own particular codebase and problem,
and the context surrounding it. Your problem cannot be reduced to an easy-to-remember
acronym created by a guy who is not dealing with your particular issue.&lt;/p>
&lt;p>Proof of this is this wild declaration made by the author of the AHA article. It says
this when it summarizes his approach:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>I think the big takeaway&lt;/strong> about &amp;ldquo;AHA Programming&amp;rdquo; is that you shouldn&amp;rsquo;t be dogmatic
about when you start writing abstractions but instead write the abstraction when
it &lt;em>feels&lt;/em> right and don&amp;rsquo;t be afraid to duplicate code until you get there.&lt;/p>
&lt;/blockquote>
&lt;p>That is some terrible advice. The points he raised in his article were all valid,
but the conclusion is just plain terrible. In an attempt to escape from dogmatism
(which is always good), the solution to the problem ends up being reduced to a
mere feeling.&lt;/p>
&lt;p>When does it &lt;em>feel&lt;/em> right to code an abstraction? I don&amp;rsquo;t know, even though in
some of my projects I could have an idea. But most certainly, someone will feel
different.&lt;/p>
&lt;p>I think we need a bit more objective advice on how to do this.&lt;/p>
&lt;h1 id="going-back-to-the-roots">Going Back to the Roots&lt;/h1>
&lt;p>DRY as an acronym was coined with a purpose. A purpose most people seem to ignore.
Why DRY is good? Because if you have to correct or fix duplicated code in the future,
it will be harder to do, because you will have to change it in the multiple places it was copied.
Why is WET or AHA good? Because if you choose the wrong abstraction and then need to change it, it will be harder
to do so in the future.&lt;/p>
&lt;p>For me, there is just only one rule to follow when writing code. Is not an easy one:
most of the time you&amp;rsquo;ll have to figure out the answer and some times you&amp;rsquo;ll get
it wrong. The application of this rule can take many forms and faces, and so it
will require you to be wise. Here it is:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Should requirements change in way X, could this code Y be easily changed?&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s it. There you have it. That is all you need to know for starters. From
that rule, every software principle, every design pattern, every acronym flows.&lt;/p>
&lt;p>Of course, like every summarized thing, this rule needs explaining. Let me
break it down in pieces.&lt;/p>
&lt;h2 id="should-requirements-change">&amp;ldquo;Should requirements change&amp;rdquo;&lt;/h2>
&lt;p>This is kinda obvious. Code changes all the time because of requirements.
Code is never finished because of requirements. If you have ever done client work
you should know this very well.&lt;/p>
&lt;p>In every software project where changes happen, you must be prepared for them. This
requires you to anticipate. Anticipation is one of the most important qualities
of a seasoned developer.&lt;/p>
&lt;p>I&amp;rsquo;m currently learning how to drive and my instructor keeps telling me I&amp;rsquo;m missing
a very important skill: anticipation. I need to look ahead and be prepared for
possible things that may occur. I need to look at the signs that could cause me
to stop or do another manuever, all the time. He keeps telling me what he has
come to call the golden rule of driving: &lt;strong>we drive not for what is happening, but
for what &lt;em>could&lt;/em> happen.&lt;/strong> I&amp;rsquo;m just borrowing his wisdom here.&lt;/p>
&lt;p>Coding is not much different in that aspect. When coding, &lt;strong>we are not coding just for what we
are asked, but what we &lt;em>could&lt;/em> be asked.&lt;/strong> We need to be aware and read the signs,
and that just takes experience.&lt;/p>
&lt;p>If you are in a project in which requirements don&amp;rsquo;t change much or where you are
in full control of them, then none of this applies to you.&lt;/p>
&lt;h2 id="in-ways-x">&amp;ldquo;in ways X&amp;rdquo;&lt;/h2>
&lt;p>If you read the rule well, you&amp;rsquo;ll notice there are two variables: X and Y. This
is the first one of them.&lt;/p>
&lt;p>I represented the change using a variable because we do not know in which ways
the requirements will change. This seems to contradict my previous point, but it
does not. Let me explain.&lt;/p>
&lt;p>One thing is to try to anticipate, another very different one is to know in
advance. Some people confuse the two of them and they say: &amp;ldquo;Since I cannot know
in advance, it is pointless to anticipate&amp;rdquo;. They couldn&amp;rsquo;t be more wrong.&lt;/p>
&lt;p>Only God knows in advance, we agree on that. The purpose of anticipation is not
knowing, is preparing. We read signs of things that might happen so we can be
prepared if they happen. We don&amp;rsquo;t know if they will, but the key verb here is to be
prepared.&lt;/p>
&lt;p>You don&amp;rsquo;t know if you are going to lose your job, but nonetheless you try to be
prepared for that by saving up every month. Not knowing in advance does not rule
out being prepared for something unexpected.&lt;/p>
&lt;p>Now, here is when you are pretty much on your own, and when context is key. Only
you know in which ways requirements may change. It could be that they ask you
to use another database engine, or support multiple methods of authentication,
or be able to configure certain parts on the system on demand. It could be anything,
but you must always be looking out for the signs.&lt;/p>
&lt;p>Usually, when requirements are confusing since the beginning of a project, that&amp;rsquo;s
a very good indication for me when things might change.&lt;/p>
&lt;h2 id="could-this-code-y">&amp;ldquo;could this code Y&amp;rdquo;&lt;/h2>
&lt;p>So, the second variable subject here is not only the changing requirements, but
the code you are working on that could possibly be impacted by that change of
requirements.&lt;/p>
&lt;p>For instance, if a requirement is to convert files to PDF, that is a very good
indication that whatever code you are using to do that, should be properly isolated
so it is easy to change. PDF conversion tools abound out there, and it might happen
that you&amp;rsquo;ll need to change one for another.&lt;/p>
&lt;p>For most if these kinds of problems you can get away by coding to an interface.
Define an interface in your application and implement it. The interface should
be small and generic: pass just the enough arguments required to do the conversion.&lt;/p>
&lt;p>Then, have your code use the interface. You can be sure it will be easy to change
in the future.&lt;/p>
&lt;p>Again, this is a very particular example, but it has a very wide application. Interfaces
are the best way to protect your code from changes. If you design them well,
you will have an easy time swapping the implementation for something else.&lt;/p>
&lt;p>Bottom line, you and you only know your code. Be wise.&lt;/p>
&lt;h2 id="be-easily-changed">&amp;ldquo;be easily changed&amp;rdquo;&lt;/h2>
&lt;p>Now, if the rule were only &amp;ldquo;Should requirements change in way X, could this code
Y be changed&amp;rdquo; that would be a terrible rule. The word &lt;strong>easily&lt;/strong> is key.&lt;/p>
&lt;p>Maybe you come to the conclusion that a potential requirement X could make your
code Y change, so you want to refactor. But the impact is not that big so
leaving it unchanged would still make it easy to refactor should that requirement
X become a reality in the future. In that case, don&amp;rsquo;t change it.&lt;/p>
&lt;p>You should only refactor code when the potential of a requirement change will make
it hard to change. Sometimes, changes are not that hard. If a piece of code is
duplicated in two places, that is not that hard to change.&lt;/p>
&lt;p>Remember, the goal is that we want code that is not hard to change.&lt;/p>
&lt;h1 id="on-picking-the-wrong-abstraction">On Picking the Wrong Abstraction&lt;/h1>
&lt;p>Sometimes, people talk about picking the wrong abstraction early as the worst mistake
you can possibly do.&lt;/p>
&lt;p>I&amp;rsquo;ve done this so many times, and it is not that terrible at all and quite
simple to correct. I have many stories about this.&lt;/p>
&lt;p>I once coded an interface for money conversion in a project I was doing.
It was very simple. It was called &lt;code>MoneyConverter&lt;/code> and has one method
&lt;code>Convert&lt;/code>. It took a &lt;code>Money&lt;/code> instance and a currency as arguments and returned a
new &lt;code>Money&lt;/code> instance with the converted amount.&lt;/p>
&lt;p>I implemented that using an external api, but that does not matter. This is how
the interface looked:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MoneyConverter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">convert&lt;/span>(&lt;span style="color:#a6e22e">Money&lt;/span> $money, &lt;span style="color:#a6e22e">Currency&lt;/span> $currency)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>My client code just used that. Never knew anything about an api or any other implementation
detail.&lt;/p>
&lt;p>It was a good idea until someone said &amp;ldquo;We need to display to the user the conversion
rate in which the conversion was made.&amp;rdquo; Too bad for me, my interface did not
returned that information: it just returned the converted amount. So, I modified
the interface&amp;rsquo;s return argument to be another object called &lt;code>Conversion&lt;/code> that was
holding two things inside: the &lt;code>Money&lt;/code> class and the &lt;code>rate&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MoneyConverter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">convert&lt;/span>(&lt;span style="color:#a6e22e">Money&lt;/span> $money, &lt;span style="color:#a6e22e">Currency&lt;/span> $currency)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Conversion&lt;/span>;
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Conversion&lt;/span>
{
&lt;span style="color:#75715e">// Original properties were not public. This is just to save space.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span> $money;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">float&lt;/span> $rate;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, I had to update every part of the code where the &lt;code>MoneyConverter&lt;/code> interface
was used (around two or three places) so they were handling correctly the
returned value and then I had to correct the implementation.&lt;/p>
&lt;p>Now, two questions.&lt;/p>
&lt;p>First one is, could I have anticipated to the requirement? Absolutely! It seemed
something very reasonable to ask and expect. If I ever write a conversion service
again it will always expose this information by default.&lt;/p>
&lt;p>Second is, was it a hard change? For me in this project, it wasn&amp;rsquo;t. And I think
here it is where all the fears of coming up with the wrong abstraction come from. It
was very easy for me to spot all the places where I had to change this because
I had all the code using the interface covered with tests, as well as the
implementation using the Api. As soon as I changed the interface and the
implementation, my tests exploded, showing me exactly where and why were failing.
Either myself or any other developer could have made the change, because of the
robust test suite.&lt;/p>
&lt;p>The reason why maybe coming up with the wrong abstraction is such a fear, is because
people don&amp;rsquo;t write tests. And tests are essential into making a piece of software
easy to change. Tests are not so much for ensuring correctness of a program: they
exist to help you confidently change your code.&lt;/p>
&lt;p>You &lt;strong>will&lt;/strong> make wrong decisions when writing code, and sometimes that &lt;strong>will&lt;/strong>
lead to disruptive changes. Be prepared for that with a good test suite. Again,
it&amp;rsquo;s all about being prepared.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Much of the coding best practices and design patterns out there have the sole goal
to make your code easy to maintain by ensuring it is easy to change when it needs
changing. This is the most important aspect you must keep in mind when writing code,
more than how many times you copy code or if you &lt;em>feel&lt;/em> it is right to abstract something
or not.&lt;/p>
&lt;p>Will this be easy to change is the most important question you can ask yourself
about your code, and only wisdom, experience and good judgement can help you
answer it. Making sure it is easy to change by coding well (DRY, WET, AHA, Design Patterns)
and writing tests is crucial.&lt;/p></content></item><item><title>When to use Interfaces</title><link>https://mnavarro.dev/posts/when-to-use-interfaces/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/when-to-use-interfaces/</guid><description>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the 1.1.1 version of psr/container, had removed extends Throwable from the Psr/Container/ContainerExceptionInterface. Here is the related issue.
Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue.</description><content>&lt;p>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the &lt;code>1.1.1&lt;/code> version of &lt;code>psr/container&lt;/code>, had removed &lt;code>extends Throwable&lt;/code> from the &lt;code>Psr/Container/ContainerExceptionInterface&lt;/code>. &lt;a href="https://github.com/php-fig/container/issues/33">Here is the related issue&lt;/a>.&lt;/p>
&lt;p>Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue. This would have never happened if the PSR had been designed well from the ground up. For me, part of that bad designed involves the famous and wide-spread use of the so called &lt;strong>error marker interfaces&lt;/strong>.&lt;/p>
&lt;p>I&amp;rsquo;m writing this piece not because I want &lt;code>psr/container&lt;/code> to change, but because I want to raise awareness of this bad practice and eventually convince people writing new library code or refactoring existing library code to dump this approach.&lt;/p>
&lt;h2 id="the-value-of-interfaces">The Value of Interfaces&lt;/h2>
&lt;p>Interfaces are probably the building blocks that make object oriented programming one of the best programming paradigms out there. Interfaces are there to &lt;strong>abstract routines&lt;/strong> and allowing us to swap different implementations of those routines without even touching client code. That&amp;rsquo;s the power that makes modularity work in object oriented programming. You can replace entire subsystems hidden behind an interface without affecting anything.&lt;/p>
&lt;p>The PHP FIG has done tremendous effort on taking some of the most common routines or use cases in PHP and abstract them into interfaces that can be adopted by third party libraries. The purpose of this is to maximize interoperability: if two or more libraries share the same contract or interface, then it is trivial to swap one for another, or even better, building entire subsystems or libraries typing to the interface instead of an implementation means a higher adoption rate.&lt;/p>
&lt;h2 id="the-misuse-of-interfaces">The Misuse of Interfaces&lt;/h2>
&lt;p>Of course, interfaces can be used poorly. If an interface requires us to change client code upon switching implementation, then it becomes what is known as a &lt;em>leaky abstraction&lt;/em>. If you have to change client code when swapping implementations, then it means the interface leaks implementation details that client code should not be aware of. This is one of the most common issues interfaces have.&lt;/p>
&lt;p>Another problem, not so much considered, is making &lt;strong>everything&lt;/strong> an interface thinking that by doing so we are providing interoperability. Good object oriented practices dictate that interfaces &lt;strong>should&lt;/strong> only be used when (1) we are dealing with service classes and/or (2) we will have two or more possible implementations. By services classes I mean classes that &lt;strong>do&lt;/strong> something instead of &lt;strong>representing&lt;/strong> something (like value objects or models).&lt;/p>
&lt;p>For example, there is little to no value in using interfaces for a value object, unless there are two possible implementations of it. This is the case with the &lt;code>DateTimeInterface&lt;/code> in PHP. It has an interface because PHP has both a mutable and an immutable implementation. &lt;code>brick/date-time&lt;/code> is only immutable, so no interface is required.&lt;/p>
&lt;p>But other libraries don&amp;rsquo;t get this right. PSR-7 should have been a concrete implementation. This is because literally there is only one possible implementation of it due to the spec being so rigid and opinionated. This would have made adoption much more easier and widespread, eliminate the need for factories and bring so much more benefits to the table.&lt;/p>
&lt;p>FIG members usually answer to this by saying that &lt;a href="https://github.com/php-fig/container/issues/33#issuecomment-849548872">&amp;ldquo;FIG creates interfaces and recommendations&amp;rdquo;&lt;/a>, which is a terrible answer. The the mission of FIG is not making interfaces: the mission is to drive interoperability forward in the PHP ecosystem. They do that by means of interfaces and recommendations, but it is not and should not be the only way. &lt;a href="https://groups.google.com/g/php-fig/c/u2Nmovw_Rlc/m/l8Y_MhIEMgAJ">Some members understand this very well&lt;/a>, and others don&amp;rsquo;t.&lt;/p>
&lt;p>The &lt;em>interface only&lt;/em> approach leads to confusion and using interfaces wrongly. One of these uses is using them as error markers, because the assumption is that extending means implementing.And this leads us to the final issue.&lt;/p>
&lt;h2 id="the-fear-of-inheritance">The Fear of Inheritance&lt;/h2>
&lt;p>&lt;strong>Inheritance is evil&lt;/strong> is a common aphorism in Object Oriented world. And with right reason: inheritance couples things, makes changing code harder and could lead to an increase of unexpected breaking changes, because the &lt;em>not-so-private&lt;/em> api can still be used by other client code.&lt;/p>
&lt;p>We all know that the alternative is use of composition. And there is abundant literature, talks and courses that taught it well. No need to repeat common knowledge here.&lt;/p>
&lt;p>What I currently see now in the professional PHP ecosystem is not so much now an abuse of inheritance, but a fear of it. We have gone to the other end of the spectrum.&lt;/p>
&lt;p>Part of being a good software engineer is to be able to determine when to use some tool or pattern and when not, based on an informed decision and consideration of the possible future implications.&lt;/p>
&lt;p>Using concrete classes for errors in libraries that only contain interfaces is a perfectly reasonable approach. It must be taken with a grain of salt though: implementing custom logic in the exception class is discouraged, because is then when inheritance starts to become a potential issue. On the other side, using interfaces solves no problem at all. What it does is that it creates more work and/or potential confusion for implementors.&lt;/p>
&lt;p>So here it is, my rant. Oh, and one more thing. For the love of Pete, stop suffixing your interface names with the word &lt;code>Interface&lt;/code>. It is useless and repetitive. You don&amp;rsquo;t name your classes &lt;code>QueueClass&lt;/code>. Why do it with interfaces?&lt;/p></content></item><item><title>Preventing tenant pollution in multitenant applications</title><link>https://mnavarro.dev/posts/tenant-pollution/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/tenant-pollution/</guid><description>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.
One of those mistakes is what I&amp;rsquo;ve come to call tenant pollution. This means that many services or routines need the tenant as an argument in order to do something.</description><content>&lt;p>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.&lt;/p>
&lt;p>One of those mistakes is what I&amp;rsquo;ve come to call &lt;strong>tenant pollution&lt;/strong>. This means that many services or routines need the tenant as an argument in order to do something. This causes the tenant or the tenant unique identifier to be passed around many layers of the codebase. Basically, the tenant was &lt;strong>everywhere&lt;/strong> in the code.&lt;/p>
&lt;p>For example, this is a small part of our filesystem interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Filesystem&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path, &lt;span style="color:#a6e22e">StreamInterface&lt;/span> $contents)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">StreamInterface&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation contains a &lt;code>TenantProvider&lt;/code> that can use the tenant id to retrieve information about the tenant and use that information to determine the folder name where all the tenant files should be stored.&lt;/p>
&lt;p>All of our services are pretty much similar. Here is another example of the &lt;code>EmailFactory&lt;/code>, that creates email messages.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">EmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The approach is pretty much similar to the filesystem one. We pass the tenant so we can fetch their settings. With the settings, we will created custom branded emails for our tenant with their corporate logos and images.&lt;/p>
&lt;p>I have to say that when I was implementing all these services I sort of smelled this. Didn&amp;rsquo;t liked it, but I preferred to the alternative of shared internal service state. And there is nothing I am more against than that. It is terrible OOP.&lt;/p>
&lt;p>Many developers would do this. They will remove the tenant and pass it to a setter in the service.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setTenant&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, once you set the tenant state you could run into all sorts of undesired side effects. PHP does not make this very obvious, due to the fact that when executed in CGI mode all the state is regenerated across requests. But when you are using React PHP or spinning workers in Road Runner, that&amp;rsquo;s when it bites you. If you move to other languages you cannot and must not do this. PHP should not be the exception.&lt;/p>
&lt;p>But I sort of had a realization when working in the frontend with React and other frameworks. You see, state in frontend is everywhere. Everything is side-effecty and built around state. Frontend developers live with this reality all the time. It teaches them not to &lt;em>fear&lt;/em> state, but to tame it and manage it properly. This is the reason why React&amp;rsquo;s &lt;code>useEffect&lt;/code> hook exists.&lt;/p>
&lt;p>I asked myself. Okay, shared state stored in a service is bad but, is there a way in which I could control it, or tame it?&lt;/p>
&lt;p>I said, first, let&amp;rsquo;s acknowledge it&amp;rsquo;s existence in an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, how can unset that initialized state so I avoid side effects? Like &lt;code>useState&lt;/code> in React works: I will return a &lt;code>callable&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is how it would look in the email factory:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
};
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret is this: when executed, the callable will leave the class in it&amp;rsquo;s original state. Now, you can group a bunch of these services into a composite initializer and have a single place in your code where you will initialize all the tenant state, group the callables to unset the state, and then return them.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CompositeTenantState&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#e6db74">/** @param TenantState[] $states **/&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span> $states;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">TenantState&lt;/span> &lt;span style="color:#f92672">...&lt;/span>$states)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $states;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$unsets &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $state) {
$unsets[] &lt;span style="color:#f92672">=&lt;/span> $state&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">initialize&lt;/span>($tenant);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () &lt;span style="color:#66d9ef">use&lt;/span> ($unsets) {
&lt;span style="color:#66d9ef">foreach&lt;/span> ($unsets &lt;span style="color:#66d9ef">as&lt;/span> $unset) {
$unset();
}
};
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You implement &lt;code>TenantState&lt;/code> in every service that needs the tenant, and you pass it to this composite implementation.&lt;/p>
&lt;p>This approach is great. If you are using middleware, you can initialize all the tenant state early in the pipeline, and then, when the request has finished, you unset all the state you have set. It is useful also for centralizing initialization of many services at once, so if you need to run the same logic in a console command, you can set up all the services for a tenant and use them freely.&lt;/p>
&lt;p>I wish I could have done this since the beginning. Object graphs would be simpler and methods shorter. Well, I guess you never cease to learn.&lt;/p></content></item><item><title>Namespaced Taxonomy Syndrome</title><link>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</link><pubDate>Mon, 20 Jul 2020 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</guid><description>The Discovery of a Syndrome The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).
I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;.</description><content>&lt;h2 id="the-discovery-of-a-syndrome">The Discovery of a Syndrome&lt;/h2>
&lt;p>The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).&lt;/p>
&lt;p>I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;. I thought I was setting up myself for another OOP basher and functional lover, but then it realized it was 2012: functional was not trendy yet. So I was interested in what he had to say.&lt;/p>
&lt;p>It was a brilliant talk. I didn&amp;rsquo;t really agree much with his &amp;ldquo;less lines of code is better&amp;rdquo; philosophy. But he had some excellent points about the misuse (overuse) of some OOP features, specifically about namespaces and classes. But the part that struck me was &lt;a href="https://youtu.be/o9pEzgHorH0?t=567">something he quoted about nine minutes into the talk&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Namespaces are for preventing name collisions, not for creating taxonomies.&lt;/p>
&lt;p>~ Jack Diederich&lt;/p>
&lt;/blockquote>
&lt;p>That really blew my mind. I felt guilty. I have absolutely misused namespaces basically since I started in OOP. I&amp;rsquo;ve done the &lt;code>use MuffinMail\MuffinHash\MuffinHash&lt;/code> thing. What he is describing is what I&amp;rsquo;ve decided to call &lt;strong>Namespaced Taxonomy Syndrome&lt;/strong>. Every single PHP project does this thing. It&amp;rsquo;s everywhere.&lt;/p>
&lt;p>Take this almost randomly picked example from the &lt;code>Illuminate&lt;/code> namespace in Laravel:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">use Illuminate\Broadcasting\Broadcasters\Broadcaster;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When did we learn to do this? When did we all implicitly agree that doing namespaces this way is somehow the state of the art? Why not go with &lt;code>Illuminate\Broadcaster&lt;/code>? Is there any other &lt;code>Broadcaster&lt;/code> inside the &lt;code>Illuminate&lt;/code> namespace that we can collide with? I think I have some possible explanations.&lt;/p>
&lt;p>Taxonomies are useful for organizing. That is the reason we put classes in different folders: to keep them organized. It is the reason why Laravel (and everyone else!) does this. There is a folder called &lt;code>Broadcasting&lt;/code>, that contains a folder called &lt;code>Broadcasters&lt;/code> that contains a PHP file that defines the interface &lt;code>Broadcaster&lt;/code>. Laravel developers need that structure so that code stays separate from other unrelated code. We need the &lt;code>Broadcasters&lt;/code> folder to know where to find them.&lt;/p>
&lt;p>But, by using taxonomies (folders) to organize our code, we silently fell into a trap and we embraced a very wrong assumption: &lt;strong>the assumption that our folder structure must mirror our namespace structure&lt;/strong>. This is probably due to the way the &lt;a href="https://www.php-fig.org/psr/psr-4/">PSR-4 Autoloading Standard&lt;/a> baked into Composer is commonly used, usually pointing to a single directory and working from there.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, when we use composer psr-4 autoload like this we will inevitably use namespaces as taxonomies since we need to keep our code organized. So, how can we solve this? How can we keep things separated still and yet simplify our namespace use?&lt;/p>
&lt;h2 id="a-better-approach">A Better Approach&lt;/h2>
&lt;p>Let&amp;rsquo;s take the &lt;code>Illuminate&lt;/code> example again. Imagine they have the following directory structure now:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">âââ src
Â Â  âââ broadcasters
Â Â  âÂ Â  âââ Broadcaster.php Illuminate\Broadcaster
Â Â âÂ Â  âââ OtherBroadcaster.php Illuminate\OtherBroadcaster
Â Â  âÂ Â  âââ LogBroadcaster.php Illuminate\LogBroadcaster
Â Â  âââ other-thing
Â Â Â  Â  âââ SomeInterface.php Illuminate\SomeInterface
Â Â  Â Â  âââ ImplementationOne.php Illuminate\ImplementationOne
Â Â  Â Â  âââ ImplementationTwo.php Illuminate\ImplementationTwo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, we still have all related code in separate folders to keep things organized. This is the taxonomy part. But notice that the Fully Qualified Class Names of every of these files are all of them direct children of the &lt;code>Illuminate&lt;/code> namespace. Basically, they are all in the same namespace and that&amp;rsquo;s okay, because the aim of namespaces is to prevent name collisions. There will be no other &lt;code>Illuminate\Broadcaster&lt;/code> and if there is one, you either taxonomize it in the name itself, or then you can create another namespace to contain it. But not before that.&lt;/p>
&lt;p>So, how do we make this file structure work with composer? There are mainly two ways:&lt;/p>
&lt;p>The first way is to pass an array of paths to the PSR-4 autoloaded namespace, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;Illuminate\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/broadcasters&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What you are saying here to composer is that all of these folders are inside the same namespace. Cool, isn&amp;rsquo;t?
This way, you get the double benefit. First, your code is still organized in different folders to help you reason about it and keep things organized for development. Second, our namespaces fulfil the purpose of avoiding collisions, and for that reason they are easier to use and simpler to reason about.&lt;/p>
&lt;p>The second way of doing it is simpler. It does not require to specify every folder. Instead you can just tell composer to build you a &lt;em>classmap&lt;/em> scanning every single one of your source files.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;classmap&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can create as many folders as you want in src and organize them and moving them at will. The only thing that matters is that all of them have the same namespace declaration.&lt;/p>
&lt;p>If you are a maintainer of a set of packages that share a common namespace, putting all of them in the same namespace reduces the number of imports you need to write. After all, is your namespace. It does make sense that your code lives under the same one. It is also easier for library users to use your code and write the proper inputs.&lt;/p>
&lt;p>I&amp;rsquo;m currently refactoring all my packages to do this. It is a huge breaking change, and maybe popular libraries will most definitely not do this (a very wise choice). But since none of my libraries is extremely popular, I can probably introduce major BC breaks on any of my libraries next major version.&lt;/p>
&lt;p>For instance, I&amp;rsquo;m developing a new Http Framework for PHP powered by a set of components. I&amp;rsquo;m putting everything http related under &lt;code>FrameworkName\Http&lt;/code> and everything else under &lt;code>FrameworkName\Support&lt;/code>. (And even that is using taxonomies a lot!).&lt;/p>
&lt;h2 id="a-note-on-the-test-namespace">A Note on the Test Namespace&lt;/h2>
&lt;p>This works really well for testing too. You can put your tests into the same namespace than your source code, but under the &lt;code>autoload-dev&lt;/code> key in composer. Why is there another namespace for testing? There is no reason to do so. Don&amp;rsquo;t be afraid of:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/some-other-thing&amp;#34;&lt;/span>, ]
}
},
&lt;span style="color:#f92672">&amp;#34;autoload-dev&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;tests/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tests/some-other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-note-on-reorganizing-and-refactoring">A Note on Reorganizing and Refactoring&lt;/h2>
&lt;p>Projects grow, and usually the initial folder structure becomes messy, and sometimes we need to move stuff around or rename it to make better sense of it. We all have gone trough that. By putting everything under the same namespace, reorganizing code becomes a matter of creating folders and moving files. Namespaces and references need not to be touched, which gives you a lot of freedom to choose the directory structure that suits you the better.&lt;/p>
&lt;h2 id="a-note-on-taxonomies-in-ddd-with-hexagonal-architecture">A Note on Taxonomies in DDD with Hexagonal Architecture&lt;/h2>
&lt;p>DDD projects with Hexagonal Architecture are well known for their deeply nested namespace structure. I have one that has a class called &lt;code>Project\Domain\Model\Account\Account&lt;/code>, and also one called &lt;code>Project\Infrastructure\Persistence\Account\DoctrineAccount&lt;/code>. That is simply just full-blown taxonomy.&lt;/p>
&lt;p>I just need &lt;code>Project\Account&lt;/code> and &lt;code>Project\DoctrineAccount&lt;/code>. Nothing else. They could live in totally different folders, but they need not to be in different namespaces. All the things in the middle is just taxonomies to keep things organized.&lt;/p>
&lt;p>You could allow &lt;code>Project\BoundedContext&lt;/code> just because you could have two account objects in different bounded contexts and they are definitely not the same account. So namespaces fulfil their role here by separating meanings between bounded contexts. But more than that is taxonomy syndrome.&lt;/p>
&lt;p>With this method, I can still keep the folders organized in and Hexagonal Architecture way, but keeping the namespace use consistent (and short!) This even helps to fulfil the use of the Domain Language in code.Domain Events and Errors can be in the same namespace too, but in totally different folders, that way we can easily find them.&lt;/p>
&lt;p>If you want to separate into packages the different layers, then the package name is your taxonomy: &lt;code>project/persistence&lt;/code>. When your package is autoloaded, it will bring the persistent implementation of the classes you already have into the same common namespace. It&amp;rsquo;s a win in every side you look at it.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This is a really good approach to try in your next project. You&amp;rsquo;ll be amazed of the simplicity, the clarity and the freedom that an approach like this will give you. It will make your code simpler, easier to reason about and very flexible to restructuring.&lt;/p></content></item><item><title>The case for Object Mapping</title><link>https://mnavarro.dev/posts/the-case-for-object-mapping/</link><pubDate>Tue, 28 Apr 2020 20:00:00 +0000</pubDate><guid>https://mnavarro.dev/posts/the-case-for-object-mapping/</guid><description>Introduction: A Tale of Simplicity VS Complexity NOTE: Every time the word array is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of stdClass or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.</description><content>&lt;h2 id="introduction-a-tale-of-simplicity-vs-complexity">Introduction: A Tale of Simplicity VS Complexity&lt;/h2>
&lt;blockquote>
&lt;p>NOTE: Every time the word &lt;strong>array&lt;/strong> is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of &lt;code>stdClass&lt;/code> or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.&lt;/p>
&lt;/blockquote>
&lt;p>The selling point for PHP in its early days was simplicity. It promised an escape from the complex ways of Java, .NET and others, that felt too cumbersome for people that wanted to do simple tiny scripts. The promise was that you didn&amp;rsquo;t need to think about data structures, memory allocation, objects, inheritance, third party libraries and so on and so forth if all you wanted was to dynamically render a bit of content on a page.&lt;/p>
&lt;p>The problem is that PHP grew in popularity. People started to ask more and more functionality to be able to do more advanced things, and somehow the language grew in a very un-organic way; but that&amp;rsquo;s another story. The point I&amp;rsquo;m trying to make is that PHP ceased to be used for simple scripts. Complex enterprise-scale applications are being built in PHP nowadays. And suddenly, we realized that this language that was so friendly for small and simple stuff, is not that friendly for big and &lt;em>enterprisy&lt;/em> things: at least not used in the traditional ways.&lt;/p>
&lt;p>This is the reason why the PHP Internals team has been investing a lot of development time in features that would make the language more reliable, like runtime type checking and improved object oriented support. The fact that the language was being heavily used for large-scale applications led to the realization that we needed more appropriate features to support that use.&lt;/p>
&lt;p>This is not a PHP-only realization. The story of Javascript is quite similar. Javascript, as a language, was conceived to make your mouse drop color sparks on movement, or your home banner to drop snow in december. But since its port to the backend by the Node JS runtime, Javascript developers used it to build complex stuff. They realized too that the language was also very unreliable for large-scale business-process-style projects; hence Typescript.&lt;/p>
&lt;p>This new push for types and oop features in languages whose initial premise of existence was to get rid of all that &lt;strong>unnecessary complexity&lt;/strong> should not be left unnoticed. We have valuable lessons to learn here.&lt;/p>
&lt;p>Maybe the lesson is that choosing the simpler solution to a problem only gets you that far. When the problem grows in complexity, the simple approach cannot really cope and, in a glorious paradox, mutates into a complexity monster itself. And maybe the other lesson that we can learn is that costs more time and effort to move to a complex approach from a simpler one, than the other way around.&lt;/p>
&lt;p>But you are right. This, at the end of the day, is mere narrative. So I want to tackle this issue with a practical, very common case. The case of object mapping.&lt;/p>
&lt;h2 id="arrays-vs-objects">Arrays VS Objects&lt;/h2>
&lt;p>There are mainly two approaches when working with databases in PHP nowadays. You can either design DAO classes that will contain queries that will fetch you the data that you need in arrays; or you can build your persistence layer on top of an ORM and map those database queries results into well defined classes/objects.&lt;/p>
&lt;p>The simpler, faster, more straightforward route is the first one, by far. Here is a comparison in implementation with code. Let&amp;rsquo;s go with the DAO/array approach:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span> $pdo;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">PDO&lt;/span> $pdo)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $pdo;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span>
{
$stmt &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">prepare&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SELECT * FROM users WHERE id = :id&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> ($stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">execute&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $id]) &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">QueryError&lt;/span>();
}
&lt;span style="color:#66d9ef">return&lt;/span> $stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">FETCH_ASSOC&lt;/span>);
}
}
$pdo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span>(&lt;span style="color:#e6db74">/** Connection details here **/&lt;/span>);
$dao &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>($pdo);
$user &lt;span style="color:#f92672">=&lt;/span> $dao&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the object mapping approach (Using Doctrine ORM):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#75715e">// First, you need to create your entity class with annotations
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Entity
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Id
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;integer&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> * @GeneratedValue
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> $id;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $username;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $password;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $email;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;datetime&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $registeredAt;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(
&lt;span style="color:#a6e22e">string&lt;/span> $username,
&lt;span style="color:#a6e22e">string&lt;/span> $password,
&lt;span style="color:#a6e22e">string&lt;/span> $email
) {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $username;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $password;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $email;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>);
}
&lt;span style="color:#75715e">// All the getters here, which use more space
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#75715e">// Then you need to bootstrap your entity manager
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$paths &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/path/to/entity-files&amp;#34;&lt;/span>];
$isDevMode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
$dbParams &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;uri&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mysql://user:pass@host:port/database&amp;#39;&lt;/span>];
$config &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Setup&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">createAnnotationMetadataConfiguration&lt;/span>($paths, $isDevMode);
$entityManager &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">EntityManager&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>($dbParams, $config);
&lt;span style="color:#75715e">// We can then query our objects
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$user &lt;span style="color:#f92672">=&lt;/span> $entityManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the ORM example is not significantly longer in lines, it is more complex for all the jargon and the tooling it introduces. There is a cost to learn how to use an ORM versus how to make SQL queries (supposing the developer already knows how to do the latter).&lt;/p>
&lt;p>Now, considering that an ORM &lt;strong>does not have&lt;/strong> a significant cost in implementation lines but &lt;strong>it does have&lt;/strong> one in learning/training for its use, and &lt;strong>supposing&lt;/strong> that that usage brings benefits in the long run, then the million dollar question is: &lt;strong>is that cost worth those benefits?&lt;/strong> That&amp;rsquo;s all, really.&lt;/p>
&lt;p>In order to answer that question we need to come to see those supposed benefits. The only way to do that is comparing it to the other approach in the context of the daily practice of working in a codebase. I like to draw this comparison by pointing to the deficiencies of the array + DAO approach in short statements, and how the object-mapping approach is different, and better.&lt;/p>
&lt;h2 id="arrays-are-not-reliable-structures-objects-derived-from-classes-are">Arrays are not reliable structures, objects derived from classes are&lt;/h2>
&lt;p>This is THE problem with arrays in PHP: they are very unreliable data structures by design. In the DAO approach, for example, that array returned from the user data can contain anything (who knows what), can be read by anyone with access to the reference, and modified too, without any kind of constraints.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">
$user[&amp;#39;id&amp;#39;] = 1;
$user[&amp;#39;username&amp;#39;] = &amp;#39;Tom&amp;#39;;
$user[&amp;#39;password&amp;#39;] = &amp;#39;my-hashed-password&amp;#39;;
// You get the idea...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This create a host of problems. There are simply so many things can go wrong using them:&lt;/p>
&lt;ol>
&lt;li>What if the hashed password of a user gets dumped in a report by accident?&lt;/li>
&lt;li>What if suddenly &lt;code>username&lt;/code> is no longer a string but null? How do I know that?&lt;/li>
&lt;li>What if someone deleted a key that other code depends on because he/she was trying to do something else, like hiding the password, for example?&lt;/li>
&lt;li>What if I misspelled a key name in a critical production operation?&lt;/li>
&lt;li>What if I leave the array in a inconsistent state that could affect future computations, like &lt;code>['isAccountActive' =&amp;gt; true, 'deactivationDate' =&amp;gt; '05/24/1988']&lt;/code>?&lt;/li>
&lt;/ol>
&lt;p>I could go on forever&amp;hellip;&lt;/p>
&lt;h2 id="arrays-lead-to-over-tested-code-objects-derived-from-classes-require-less-testing">Arrays lead to over-tested code, objects derived from classes require less testing&lt;/h2>
&lt;p>You could argue that these problems should be solved by testing the system and its routines, and you are absolutely right. This, however, assumes that the developer does test the codebase, which is not always true in my own observations of reality. Nonetheless, being generous, I can concede that.&lt;/p>
&lt;p>The main problem here is over-testing. Since your language has features to automatically prevent all the kind of undesirable state mutations that I pointed out, but you are not using them, you end up writing more tests than you should, because now you have to check for invalid state mutations in every routine. This leads, instead of unit testing or spec testing, to case-per-case testing, which is a very expensive way to test. It is expensive because it is really hard to set up, and also because it is very easy to break those tests.&lt;/p>
&lt;p>&lt;strong>If you don&amp;rsquo;t want to have problems working with arrays, you have to test your system extensively, adding big costs to the development effort.&lt;/strong>&lt;/p>
&lt;p>Or, you could use defined classes with protected state, and allow to read only what is necessary, specifying return types and only allowing valid state mutations by providing a good api to client classes. Did I mention you can write comments in its methods too, as means of documentation?&lt;/p>
&lt;h2 id="arrays-are-not-new-developers-friendly-objects-derived-from-classes-are">Arrays are not new-developers friendly, objects derived from classes are&lt;/h2>
&lt;p>Even when you can get away with testing your codebase extensively to use arrays (which I highly doubt), another problem is that, if I&amp;rsquo;m not the main developer of the application or I am not familiar with the system in any way, I&amp;rsquo;m going to have a really hard time working with those arrays if I ever need to fix something. I&amp;rsquo;ll spend hours dumping and debugging what an array exactly contains at any given point in the code, instead of actually solving a problem. I might even try to do that again and again with different inputs. All that is time consuming, and the hourly rate of a developer is not quite cheap to be honest.&lt;/p>
&lt;p>How much easier would be for me to jump in to the development effort aided by a good designed class and my favorite IDE&amp;rsquo;s autocomplete and go-to features? Oh, I see that the method &lt;code>getDeactivationDate&lt;/code> can return an instance of DateTime or null. I can work with that!&lt;/p>
&lt;p>&lt;strong>In the long run, using objects reduces development costs by allowing other developers reasoning about the codebase faster.&lt;/strong>&lt;/p>
&lt;p>You could make the point, however, that this is easily solvable by documenting the structure of arrays in some form of specification. Again, that does not make them not changeable and suddenly trustworthy, but at least is a start. But, can you see the irony? You &lt;strong>need&lt;/strong> a spec, and that is exactly what a class is: is an specification, a structure, a contract, a blueprint. The only difference is that is not optional, it is enforced by the language. And better yet, does not live in an obscure word document stored somewhere else, but in your codebase. I don&amp;rsquo;t know about you, but that makes a pretty good spec for me.&lt;/p>
&lt;p>I guarantee you: the time that could be spent writing that documentation specification is more than writing the class itself. Why don&amp;rsquo;t make the class the spec then?&lt;/p>
&lt;h2 id="arrays-are-anemic-objects-derived-from-classes-are-rich">Arrays are anemic, objects derived from classes are rich&lt;/h2>
&lt;p>Arrays are bags of data with no more meaning that the one you remember from when you were working on the code for the last time. But the things we are doing with our software are full of meaning: we are storing users, login them in, adding or removing permissions. We are managing reservations, scheduling meetings, sending emails, transferring cargo, selling goods, you name it! Surely we are missing something when we try to do that moving around bags of uncertain data.&lt;/p>
&lt;p>Having a &lt;code>User&lt;/code> class with a &lt;code>login&lt;/code> method sounds pretty straightforward to me. So it does a &lt;code>Cargo&lt;/code> class with a &lt;code>transfer&lt;/code> method, or a &lt;code>Order&lt;/code> class with a &lt;code>pay&lt;/code> one. I can easily figure out what is going on there. This is what is so cool about objects: state and behavior live together in one place, because in our stateful world, they should!&lt;/p>
&lt;p>However, arrays cannot contain any behavior associated with them. So if you want to repeat a routine over a similar structure of data, you have to rewrite that routine somewhere else, which in turn leads to bloated client code. This is the difference between an anemic data model (one that contains just plain data) and a rich one (one that has the data, but also is full of behavior). The latter serves client code better by means of &lt;a href="https://martinfowler.com/bliki/TellDontAsk.html">Telling-Not-Asking&lt;/a>.&lt;/p>
&lt;p>To be fair, you can always create a function to perform a common task over an array. But again, that function needs to operate over an array with a very special structure, not any array. And we have seen how easy is to break them. Why separate then that apparent natural association between the data and the actions that can occur over that data?&lt;/p>
&lt;p>&lt;strong>But, in summary, using objects helps to encapsulate logic that otherwise would be repetitive, and would lead to bloated client code.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-cannot-benefit-of-ide-tooling-objects-can">Arrays cannot benefit of IDE tooling, objects can&lt;/h2>
&lt;p>Arrays don&amp;rsquo;t offer autocompletion when working with them, likes objects do. I&amp;rsquo;ve sort of mentioned this in the past, but not as explicitly. Autocompletion is a powerful IDE feature that aids the developer and saves him/her from wasting time in silly mistakes.&lt;/p>
&lt;p>Also, arrays are hard to refactor. If you rename a key, you have to track all the uses of that key in your code and change it to the new one. Working with objects and with an appropriate IDE you can refactor a method name in an instant.&lt;/p>
&lt;p>&lt;strong>So again, using objects aids development by means of saving time and improving naming conventions when necessary.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-and-daos-do-not-scale-as-well-as-objects-and-repositories-do">Arrays and DAOs do not scale as well as Objects and Repositories do&lt;/h2>
&lt;p>Queries in DAOS can really grow wild and complex. It&amp;rsquo;s impossible not to have a combinatorial explosion of method names without using some sort of query builder. Also, is even hard to switch between different SQL implementations, like Sqlite, MySQL, Postgres or even Oracle. This increases maintenance time when dealing with changes of schema or implementing new methods.&lt;/p>
&lt;p>ORMs abstract away all these details and create some sort of a protection layer between vendors by choosing a subset of their functionality. This is how, at the end of the day, abstraction works: it has the benefits of being consistent, but with a limited subset of functionality. They have excellent query building capabilities already backed into their engines, so we don&amp;rsquo;t have to reinvent the wheel.&lt;/p>
&lt;p>This makes ORM scale better in terms of maintainability. Abstracting away all those details helps us focus on writing code rather than worrying about queries. Here the maxim applies more than in any other place: the simpler solution grows complex when the problem grows too. The complex solution costs more up front, but scales better when the problem gets complicated.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>These are probably the main reasons why I think working with objects derived of well designed classes is always going to be better than working with other unreliable data structures. Again, costs more up front (and not so much if you have appropriate tooling like PHP Storm), but the benefits on the long run are huge.&lt;/p>
&lt;p>And if these reasons don&amp;rsquo;t convince you, maybe just like a look at the recent trend. Languages historically known to be simpler and flexible adopting more complex and stricter features. That&amp;rsquo;s got to say something, isn&amp;rsquo;t it?&lt;/p></content></item><item><title>Going back to the Monolith well</title><link>https://mnavarro.dev/posts/back-to-the-monolith/</link><pubDate>Thu, 20 Feb 2020 23:30:00 -0300</pubDate><guid>https://mnavarro.dev/posts/back-to-the-monolith/</guid><description>We were extremely warned about the dangers of microservices, but we implement them anyway. Now, we are slowly realizing that we should have never, ever, abandoned the monolith. Our multiple failures at microservices probably speak of two things, (1) we probably lack the workforce and proper Ops team to carry this effort onward and (2) we probably could have solved our problem without them anyway. Note that I&amp;rsquo;m saying that microservices are fine.</description><content>&lt;p>We were extremely warned about the dangers of microservices, but we implement them anyway. Now, we are slowly realizing that we should have never, ever, abandoned the monolith. Our multiple failures at microservices probably speak of two things, (1) we probably lack the workforce and proper Ops team to carry this effort onward and (2) we probably could have solved our problem without them anyway. Note that I&amp;rsquo;m saying that microservices are fine. I&amp;rsquo;m also saying that they might have not been for us.&lt;/p>
&lt;p>We should not feel sorry though. We are craftsmen, professionals, people that must be on top of every new trend or tech. It&amp;rsquo;s normal we feel the drive to try every shiny new thing under the sun. I do that myself. But is a good thing when learn from our mistakes and correct them as soon as possible. And this is what this post is about.&lt;/p>
&lt;p>I&amp;rsquo;m grateful to microservices in the sense that they helped us see more clearly the boundaries and different responsibilities in our business, and to separate individuals to work in in those and own them. What I&amp;rsquo;m not grateful of is the fact of defining those boundaries behind a TCP connection and poorly typed content-types, and all the implications that come with it. We should have kept our boundaries, for sure, but in the reliable and fast realm of random access memory.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Single page applications and micro-services: the current go-to solution to introduce an unavoidable type-unsafe non-deterministic layer between two codebases to produce more work.&lt;br>&lt;br>Great for any period of work shortage.&lt;/p>&amp;mdash; Shitpostulator (@Ocramius) &lt;a href="https://twitter.com/Ocramius/status/1154067788828434433?ref_src=twsrc%5Etfw">July 24, 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Let&amp;rsquo;s think for a second. We really needed to make different applications to communicate over TCP to realize that team autonomy and separation of concerns was a good thing? If breaking down problems into smaller units and give certain individuals ownership of the implemented solution is &lt;em>the&lt;/em> requirement of microservices, then we should have been doing them since the 70&amp;rsquo;s.&lt;/p>
&lt;p>Truth is, OOP already solved these problems. I think we just forgot how to use it to our benefit. What is better? A RPC HTTP over TCP endpoint that takes a json payload and process it with some notorious latency and possibility of network error, or an interface (with the corresponding implementation) that names the action in a meaningful way, documents it and takes a well defined data class as the argument so you can have a deterministic in-memory result?&lt;/p>
&lt;p>I know, at some point we got scared of having many of those in a single place. We got scared that could be overwhelming for new developers to familiarize with all the services in a huge codebase. But truth is that, as in microservices, you don&amp;rsquo;t need to know all the details. Remember? This is what abstraction in OOP means. Implementation details can be hidden from us as long as we expose an interface that explains itself well and does the job it says it does. In microservices, does the booking app team knows or has to know every detail of the billing app? Of course not! They just know they have a &lt;code>pay&lt;/code> endpoint that takes some money and a booking id. Why not implementing both &amp;ldquo;apps&amp;rdquo; in different folders of the same codebase, throw away the network issues and enjoy calling routines in memory? Isn&amp;rsquo;t that much simpler? Worried about boundaries may not be respected? Nothing that a good CI config with a &lt;code>CODEOWNERS&lt;/code> file feature cannot solve.&lt;/p>
&lt;p>Just a quick side note here. I think we abused so much of frameworks that we took architecture for granted, and that made us fail at monoliths. With frameworks, we didn&amp;rsquo;t need to learn how to bootstrap and wire up and app by ourselves, by pulling the required pieces. We didn&amp;rsquo;t have to learn how to integrate different modules and make them work together, which is a crucial skill for a developer. I think that&amp;rsquo;s the fundamental piece that is missing when a developer is faced with the task of developing in a modular way: they know how to create a new class and put some code there. What they don&amp;rsquo;t know, is how to wire them up together to make them work in harmony with others.&lt;/p>
&lt;p>I truly think there is a case for microservices, and that&amp;rsquo;s when you need to get the most of a certain stack. Netflix might need to switch their video encoders from Go to Rust to avoid the overhead of GC spikes and save millions in processing costs because, well, they are Netflix. But for most of us, mere mortals followers of the trends that knock our doors, microservices are not needed. The complexity they introduce is far more than the problems they solve for our small use case.&lt;/p>
&lt;p>We need to go back to OOP and its best practices. To create modular systems, not for the sake of reusability (as it was heavily sold in the years gone by), but for the sake of maintainability. Each module should be autonomous, and communication between them should not be coupled. This is achieved with known techniques, like a solid translation/anticorruption layer. You say &amp;ldquo;Oh what a burden to write all that translation logic!&amp;rdquo; Bro, you were doing it with microservices already, parsing your json payloads to meaningful objects. Maybe you were luckier and used &lt;em>protobufs&lt;/em> instead, but the mapping/translation was still there, just made a bit easier by an automated tool.&lt;/p>
&lt;p>So, here&amp;rsquo;s my advice to succeed at monoliths this time:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Decouple everything:&lt;/strong> HTTP, Persistence, Service and Domain layers should not know anything about each other. Use translation techniques like DTOs to go from one layer to the other.&lt;/li>
&lt;li>&lt;strong>Think of microservices as modules in your codebase:&lt;/strong> apply the same principles of separation of concerns that you used in microservices but now to the same codebase. Define high level interfaces that others can use to access what you implemented in a simple way.&lt;/li>
&lt;li>&lt;strong>Define boundaries and make people own them:&lt;/strong> assign a team for the billing module and other for the invoice module. Make them put their code in different folders and forbid them to touch each other&amp;rsquo;s code. Enforce the boundaries with a CODEOWNERS file and a good CI config.&lt;/li>
&lt;li>&lt;strong>Enforce good coding practices and patterns:&lt;/strong> prevent the codebase from rooting at all costs. Always push for better code and don&amp;rsquo;t let technical debt sink in. Monoliths rot faster than microservices, so they require special care.&lt;/li>
&lt;/ol>
&lt;p>I hope this new &amp;ldquo;coming back to the monolith&amp;rdquo; trend gives us the chance to learn from our mistakes and perform well the art of building a monolith this time.&lt;/p></content></item><item><title>Repository Pattern Done Right</title><link>https://mnavarro.dev/posts/repository-pattern-done-right/</link><pubDate>Mon, 17 Feb 2020 20:00:00 -0300</pubDate><guid>https://mnavarro.dev/posts/repository-pattern-done-right/</guid><description>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.
Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool.</description><content>&lt;p>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.&lt;/p>
&lt;p>Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool. Refining your use of tools and patterns this way is, with almost all certainty, the only way to grow as a developer. Years of experience don&amp;rsquo;t count much if you have been doing the same thing, the same way, over and over again.&lt;/p>
&lt;p>This is why I implement and use repositories very differently now than the first time I started. This is probably because of the experience (both good and bad) that I&amp;rsquo;ve accumulated over the years. I&amp;rsquo;ve also read quite a lot on the topic, and certainly I&amp;rsquo;m not the only one that has experienced issues implementing repositories in my applications.&lt;/p>
&lt;p>So, with the years, I&amp;rsquo;ve come to a definition of repositories, and is this one:&lt;/p>
&lt;blockquote>
&lt;p>Repositories are an specific and immutable abstraction over a collection of domain objects.&lt;/p>
&lt;p>~ MatÃ­as Navarro Carter&lt;/p>
&lt;/blockquote>
&lt;p>Let me tell you what I mean by that.&lt;/p>
&lt;h2 id="warning-active-record-users">Warning: Active Record Users&lt;/h2>
&lt;p>Repositories tend to work with ORMs &amp;ndash; even though is not a requirement, it&amp;rsquo;s very common practice. However, not any kind of ORM can be used for working with repositories. I think a word of warning is necessary for users of Active Record ORMs (I&amp;rsquo;m talking about you, Yii and Laravel users). I&amp;rsquo;ve read several blog posts (like &lt;a href="https://dev.to/asperbrothers/laravel-repository-pattern-how-to-use-why-it-matters-1g9d">this one&lt;/a>, or &lt;a href="https://itnext.io/repository-design-pattern-done-right-in-laravel-d177b5fa75d4">this other one&lt;/a>) that promise an implementation of repositories the Laravel Wayâ¢, which is really not the repository pattern, but a poorly abstracted interface over Eloquent. Don&amp;rsquo;t get me wrong: Active Record ORMs are good on what they do, they just don&amp;rsquo;t fit the requirements for the repository pattern. Don&amp;rsquo;t try to use Active Record ORMs for repositories: they just don&amp;rsquo;t fit the use case. Embrace Active Record: you already made the choice of coupling your data model to your persistence layer. If you won&amp;rsquo;t take my word for it, &lt;a href="https://laravelpodcast.com/episodes/9dafa72e?t=34m3s">take Jeffrey Way&amp;rsquo;s&lt;/a>.&lt;/p>
&lt;h2 id="repositories-are-abstractions">Repositories are Abstractions&lt;/h2>
&lt;p>Just to continue with the thread, the main reason why Active Record ORMs don&amp;rsquo;t fit the repository pattern is because &lt;strong>repositories are abstractions&lt;/strong>, and Active Record Data Models are not. When you create a data model in Laravel, for example, you are not fetching a &lt;em>pure&lt;/em> data class, but a whole lot of other stuff related to persistence, like your database connections, mutators and all sorts of stuff. All that lives in your data model, and that renders it unusable for the level of abstraction required for the repository pattern.&lt;/p>
&lt;p>To be fair with the Eloquent guys, this is true of Doctrine repositories also. If you are using doctrine repositories &lt;em>as they are&lt;/em>, you are not abstracting anything away. You are coupled to Doctrine, which is in turn coupled to a relational database engine. That leaves you in the same place as using Eloquent (a bit better though, because your data model is a &lt;em>pure&lt;/em> data class).&lt;/p>
&lt;p>In the Symfony world, it&amp;rsquo;s common to see something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeController&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>(&lt;span style="color:#a6e22e">Request&lt;/span> $request)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span>
{
&lt;span style="color:#75715e">// This repository is the doctrine&amp;#39;s library one
&lt;/span>&lt;span style="color:#75715e">&lt;/span> $repo &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getRepository&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$users &lt;span style="color:#f92672">=&lt;/span> $repo&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">json&lt;/span>($users);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you do this, stop. You are not using a &lt;strong>proper&lt;/strong> abstraction here. It&amp;rsquo;s true: the Doctrine repository is an abstraction over the &lt;code>EntityManager&lt;/code>, &lt;code>QueryBuilder&lt;/code>, &lt;code>Connection&lt;/code> and a bunch of other stuff: but is a doctrine-specific abstraction. You need a &lt;strong>Domain-specific abstraction&lt;/strong>. One abstraction that is only yours, your own contract.&lt;/p>
&lt;p>So what we should do then? We just define an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#75715e">// This is your data class
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|User[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a proper abstraction. Your &lt;code>User&lt;/code> class is a class that just contains data. Your &lt;code>UserRepository&lt;/code> interface is your contract. You can use the Doctrine repository behind it, but it won&amp;rsquo;t matter this time, because you will type hint the interface to all other classes using it. This way you effectively decouple yourself of any persistence library/engine and get an abstraction you can use all around your codebase.&lt;/p>
&lt;h2 id="repositories-are-specific">Repositories are Specific&lt;/h2>
&lt;p>Note how the &lt;code>UserRepository&lt;/code> we defined is &lt;strong>model specific&lt;/strong>. A lot of people like to save work by creating a generic repository, that becomes no more than a query abstraction over the persistence library used. Just don&amp;rsquo;t do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|object[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $repositoryClass)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember one of the principles of DDD: clear language intent. One repository interface for each model conveys more meaning to that specific repository/model than a generic one. For example: only users can be filtered by email, not buildings.&lt;/p>
&lt;p>Besides with one generic repository for everything, you won&amp;rsquo;t be able to type your concrete model classes to the return or argument types. It&amp;rsquo;s the longer route, but is definitely the most convenient and flexible.&lt;/p>
&lt;h2 id="repositories-are-collections">Repositories are Collections&lt;/h2>
&lt;p>I would say that the &amp;ldquo;Aha!&amp;rdquo; moment in repositories for me is when I realized that they are just an abstraction over a collection of objects. This blew my mind and gave me a new challenge; the challenge of implement repositories as if they were an in-memory collection.&lt;/p>
&lt;p>For starters, I dumped all methods like &lt;code>all()&lt;/code>, &lt;code>allActiveUsers()&lt;/code> or &lt;code>allActiveUsersOfThisMonth()&lt;/code>. If you have read the two famous posts about taming repositories, first the one of &lt;a href="http://drafts.easybib.com/post/44139111915/taiming-repository-classes-in-doctrine-with-the">Anne at Easybib&lt;/a> and then the one of &lt;a href="https://beberlei.de/2013/03/04/doctrine_repositories.html">Benjamin Eberlei in response&lt;/a>, you should know that methods like that in a repository can really grow wild. Also, you don&amp;rsquo;t need all the complexity of the specification pattern: we can do better and simpler than that.&lt;/p>
&lt;p>Collections apis have many distinctive features: the possibility of slice them, filter them, and add or remove new items to them as well as getting individual items. But we don&amp;rsquo;t want a general collection api, remember? We want to implement a specific api for every model, so it conveys meaning.&lt;/p>
&lt;p>So, our &lt;code>UserRepository&lt;/code> interface could look this way:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Countable&lt;/span>, &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pay special attention to the last three methods. These are the only methods that could potentially be in a &lt;code>Repository&lt;/code> base interface, because all of them will be sliceable, countable and iterable.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>, &lt;span style="color:#a6e22e">Countable&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So by doing this, all of your repositories will be sliceable (think pagination there), iterable and countable. The idea is that you apply the filtering methods (all the methods that return &lt;code>self&lt;/code>) and then iterate to execute the internal query Â¡just like an in-memory collection! In fact, you wouldn&amp;rsquo;t note the difference at all if an implementation is switched to another one.&lt;/p>
&lt;p>This is good OOP. All the persistence details are completely hidden from us, the api is composable and fits our needs for a repository. It looks neat and using it is really simple and easy to understand:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeService&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">UserRepository&lt;/span> $users)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $users;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>()
{
$users &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>))
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;-30days&amp;#39;&lt;/span>));
$count &lt;span style="color:#f92672">=&lt;/span> $users&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $users;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But here&amp;rsquo;s the question: how do we go about implementing an api like this? If you are a good observer, you might have realized that the filters return an instance of themselves, modifying the internal state of the repository. So in a next query, we will have the filters of the previous query applied, right?&lt;/p>
&lt;h2 id="repositories-are-immutable">Repositories are Immutable&lt;/h2>
&lt;p>Well, that could be right, if we really are modifying the internal state. But in reality, we are cloning the reference of the repository, so we never touch the original one. This is an implementation detail, but a very important one. If we change, let&amp;rsquo;s say, the state of the repository reference that lives inside our DI Container, then we are done: we cannot use that reference again. So the idea is to make it &lt;strong>immutable&lt;/strong>.&lt;/p>
&lt;p>Let me show you the final api, implemented in Doctrine ORM. I&amp;rsquo;m going to write some comments and docblocks in the code explaining some things.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\Tools\Pagination\Paginator&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMRepository
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * This is a custom abstract Doctrine ORM repository. It is meant to be extended by
&lt;/span>&lt;span style="color:#e6db74"> * every Doctrine ORM repository existing in your project.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * The main features and differences with the EntityRepository provided by Doctrine is
&lt;/span>&lt;span style="color:#e6db74"> * that this one implements our repository contract in an immutable way.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * This is Doctrine&amp;#39;s Entity Manager. It&amp;#39;s fine to expose it to the child class.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var EntityManagerInterface
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> $manager;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We don&amp;#39;t want to expose the query builder to child classes.
&lt;/span>&lt;span style="color:#e6db74"> * This is so we are sure the original reference is not modified.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * We control the query builder state by providing clones with the `query`
&lt;/span>&lt;span style="color:#e6db74"> * method and by cloning it with the `filter` method.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> $queryBuilder;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> * @param string $entityClass
&lt;/span>&lt;span style="color:#e6db74"> * @param string $alias
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager, &lt;span style="color:#a6e22e">string&lt;/span> $entityClass, &lt;span style="color:#a6e22e">string&lt;/span> $alias)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $manager;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createQueryBuilder&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">select&lt;/span>($alias)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">from&lt;/span>($entityClass, $alias);
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($start, $size) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setFirstResult&lt;/span>($start)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setMaxResults&lt;/span>($size);
});
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>
{
$paginator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
&lt;span style="color:#66d9ef">return&lt;/span> $paginator&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Filters the repository using the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * It clones it and returns a new instance with the modified
&lt;/span>&lt;span style="color:#e6db74"> * query builder, so the original reference is preserved.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @param callable $filter
&lt;/span>&lt;span style="color:#e6db74"> * @return $this
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">callable&lt;/span> $filter)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>
{
$cloned &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this;
$filter($cloned&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> $cloned;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Returns a cloned instance of the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * Use this to perform single result queries.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @return QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">QueryBuilder&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We allow cloning only from this scope.
&lt;/span>&lt;span style="color:#e6db74"> * Also, we clone the query builder always.
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __clone()
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was the abstract repository. Note how we don&amp;rsquo;t expose the &lt;code>QueryBuilder&lt;/code>. This is because it&amp;rsquo;s dangerous: an inexperienced developer could apply filters to it and mutate the original reference, causing a massive bug. Instad, we provide two convenience methods for child classes, &lt;code>filter&lt;/code> and &lt;code>query&lt;/code>. The first one takes a callable which in turn takes a cloned instance of the &lt;code>QueryBuilder&lt;/code> as an argument. The second one just returns a cloned &lt;code>QueryBuilder&lt;/code> so the child class can query anything.&lt;/p>
&lt;p>Then, we use that api in our &lt;code>UserRepository&lt;/code> and implement the remaining methods.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\User&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\DBAL\Types\Types&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NonUniqueResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NoResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common\DoctrineORMRepository&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMUserRepository
&lt;/span>&lt;span style="color:#e6db74"> * @package RepositoryExample\User
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMUserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ENTITY_CLASS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ALIAS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMUserRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager)
{
&lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__construct&lt;/span>($manager, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ALIAS&lt;/span>);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">persist&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, $id);
&lt;span style="color:#66d9ef">if&lt;/span> ($object &lt;span style="color:#a6e22e">instanceof&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @param string $email
&lt;/span>&lt;span style="color:#e6db74"> * @return User|null
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#66d9ef">try&lt;/span> {
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.email = :email&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>, $email)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getSingleResult&lt;/span>();
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NoResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NonUniqueResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;More than one result found&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.active = true&amp;#39;&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;lt; :before&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:before&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;gt; :after&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:after&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is really nice to work with. I&amp;rsquo;ve taken this approach is several projects so far and it feels great. The method names convey meaning and work well. Creating different implementations like a Doctrine Mongo ODM, Filesystem or In-Memory it&amp;rsquo;s trivial. Implementors just need to take into account the immutability aspect of it, but that&amp;rsquo;s all really.&lt;/p>
&lt;p>I really hope you like this approach as much as I do and start using it in your projects.&lt;/p></content></item></channel></rss>