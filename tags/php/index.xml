<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on</title><link>https://mnavarro.dev/tags/php/</link><description>Recent content in php on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Fri, 02 Jul 2021 20:00:00 +0100</lastBuildDate><atom:link href="https://mnavarro.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Environment Variables Done Right</title><link>https://mnavarro.dev/posts/environment-variables-done-right/</link><pubDate>Fri, 02 Jul 2021 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/environment-variables-done-right/</guid><description>One of the things that I don&amp;rsquo;t like about Laravel is their abusive use of environment variables. I think it sets a bad precedent for when developers need to come up with their own environment variables in their applications.
I have seen environment variables in an application that should have never been environment variables. And other things that should have been but have not made it to the list.
So, I thought I&amp;rsquo;ll write this piece to rant a bit about this.</description></item><item><title>When to use Interfaces</title><link>https://mnavarro.dev/posts/when-to-use-interfaces/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/when-to-use-interfaces/</guid><description>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the 1.1.1 version of psr/container, had removed extends Throwable from the Psr/Container/ContainerExceptionInterface. Here is the related issue.
Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue.</description></item><item><title>Preventing tenant pollution in multitenant applications</title><link>https://mnavarro.dev/posts/tenant-pollution/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/tenant-pollution/</guid><description>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.
One of those mistakes is what I&amp;rsquo;ve come to call tenant pollution. This means that many services or routines need the tenant as an argument in order to do something.</description></item><item><title>Namespaced Taxonomy Syndrome</title><link>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</link><pubDate>Mon, 20 Jul 2020 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</guid><description>The Discovery of a Syndrome The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).
I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;.</description></item><item><title>The case for Object Mapping</title><link>https://mnavarro.dev/posts/the-case-for-object-mapping/</link><pubDate>Tue, 28 Apr 2020 20:00:00 +0000</pubDate><guid>https://mnavarro.dev/posts/the-case-for-object-mapping/</guid><description>Introduction: A Tale of Simplicity VS Complexity NOTE: Every time the word array is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of stdClass or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.</description></item><item><title>Repository Pattern Done Right</title><link>https://mnavarro.dev/posts/repository-pattern-done-right/</link><pubDate>Mon, 17 Feb 2020 20:00:00 -0300</pubDate><guid>https://mnavarro.dev/posts/repository-pattern-done-right/</guid><description>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.
Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool.</description></item><item><title>Unit-testing the filesystem in PHP</title><link>https://mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description></item><item><title>Efficient Reports in PHP</title><link>https://mnavarro.dev/posts/php-efficient-reporting/</link><pubDate>Tue, 10 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-efficient-reporting/</guid><description>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p></description></item></channel></rss>