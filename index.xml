<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Chilean Nerd</title><link>https://blog.mnavarro.dev/</link><description>Recent content on The Chilean Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><copyright>Â©2019 Matias Navarro Carter. CC-BY-SA.</copyright><lastBuildDate>Fri, 10 Jan 2020 16:50:09 -0300</lastBuildDate><atom:link href="https://blog.mnavarro.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Focusing on the Goal</title><link>https://blog.mnavarro.dev/posts/fousing-on-the-goal/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/fousing-on-the-goal/</guid><description>When I was in school I struggled a lot with math (I still do to be honest!). My results at school were so worrying that my parents hired a private tutor to teach me math. He had a awesome talent to explain complex things in a very clear way, and also taught me different methods to solve equations or other mathematical problems. I was able to see the effect of his teaching pretty quickly, as I improved a lot in the weekly take home exercises.</description><content>&lt;p>When I was in school I struggled a lot with math (I still do to be honest!). My results at school were so worrying that my parents hired a private tutor to teach me math. He had a awesome talent to explain complex things in a very clear way, and also taught me different methods to solve equations or other mathematical problems. I was able to see the effect of his teaching pretty quickly, as I improved a lot in the weekly take home exercises. But when the day of the test came, all my hard work seemed to suddenly be meaningless. The professor had told the class that we needed to use the methods he taught us to solve the problems in the final exam. Otherwise, we would be discounted a lot of points even if we reached the correct result. I thought that was so not right.&lt;/p>
&lt;p>Probably you had the same experience at school or uni. Or maybe you were blessed and had a teacher who focused more on the outcome rather than in the method. Maybe you were privileged to have a teacher that would show you many different ways of doing things, their pros and cons, and would empower you to choose what would fit better for you.&lt;/p>
&lt;p>You would be surprised to know (or maybe not so much) that stories like this repeat a lot in the workplace today, specially in tech companies. Maybe you have seen it for yourself. Maybe the task is to build a REST api, but you need to use this particular database engine, or this particular framework or library. Or maybe you nee to build a payment microservice, but you must not use any form of async communication. Or you should only use docker for development. Or you need to test your code, but using this tool that the company built specifically for that purpose.&lt;/p>
&lt;h2 id="method-fixation">Method Fixation&lt;/h2>
&lt;p>Why this fixation of with the method? Isn&amp;rsquo;t that as unjust that this math teacher that forced you to use his particular approach? Why do we constrain people that have one of the highest capacity to learn stuff (Software Developer) to a repeated formula or method? Why not, instead, focus on the desired outcome that we want, instead of telling people how to do stuff?&lt;/p>
&lt;p>Some people say that it is for the sake of maintainability. By having &amp;ldquo;One Right Way of Doing Something&amp;rdquo; we ensure that we can move people around and replace them if we need to. But I would say that is an illusion. Sounds plausible on paper, but it does not work in real life. There is always a cost of moving one people from one project to another, even when those projects use the exact same stack or underlying framework. They need to learn the ropes anyway, and they might find it hard to become productive quickly.&lt;/p>
&lt;p>When I talk about this with some of my colleagues, they freak out. They think I&amp;rsquo;m advocating for some sort of wild-west IT company where everyone does whatever they want. That could not be more wrong, let me explain.&lt;/p>
&lt;p>I&amp;rsquo;m advocating for a place where people do what are they told to do, but have freedom to choose how they want to get there. Of course, that freedom is limited by some general constraints. For instance, I won&amp;rsquo;t have a guy writing an api on Scala, because we have literally no one at our company that knows it. But, we use PHP, Go and Node quite a lot. I would let her choose and have her explain to me why she would choose that language over the other, just to see how she reasons. Framework? You pick!&lt;/p>
&lt;p>Instead of putting the focus on the process, I desire focus on the outcome. I won&amp;rsquo;t tell her how to do it, but what I expect the end result to be. So, if I ask a developer to write me a REST api, this is my personal desired outcome:&lt;/p>
&lt;ol>
&lt;li>Test suite with over 90% coverage&lt;/li>
&lt;li>Stubbed or mocked unmanaged dependencies directly in code&lt;/li>
&lt;li>Proper CI Pipeline, testing with even future versions of the language runtime&lt;/li>
&lt;li>A readme that explains what the api does and how&lt;/li>
&lt;li>Consistent error handling&lt;/li>
&lt;li>Excellent Developer Experience (preferably, I should be able to clone the project, run one command and be ready to work and run the test suite)&lt;/li>
&lt;li>Open Api specification that is reliable&lt;/li>
&lt;/ol>
&lt;p>Note how these things don&amp;rsquo;t say &lt;strong>how&lt;/strong> you have to build the REST api, but what it should have. The schema is my favorite example. So, should you start with the schema and generate the code? Great, do it that way. Should you write the code and then generate the schema out of it? Works too! As long as the schema accurately represents how the endpoints work, you have my full support!&lt;/p>
&lt;p>We can bring this to testing too. Would you write unit tests or full E2E tests? Again, whatever you like, as long as you know the tradeoffs. You can achieve high coverage quickly with E2E tests, specially in large codebases, but tests tend to be more brittle. Unit tests are slower to write but more resistant to change.&lt;/p>
&lt;p>Again, the most important thing is that the Engineer chooses her own path to a solution. Of course, inexperienced Engineers would need an overview of the possible paths, but even there I would encourage to explore extra solutions.&lt;/p>
&lt;h2 id="the-technification-of-tech">The &lt;em>Technification&lt;/em> of Tech&lt;/h2>
&lt;p>This topic is super important to me and a subject I can get very passionate about. And the reason why is that I love Software Development so much, that I refuse to make it a factory profession. I refuse to ask engineers to copy and paste a solution or a template, fill in the blanks and move on to the next thing. How am I doing them a favor? How am I helping them to grow, develop, try new things, be challenged? How am I fostering innovation, thinking outside the box? Did we really put candidates through an interview process focused on evaluating their problem solving skills to have them only repeat a method? How am I empowering them to make their own mistakes and gain experience from them?&lt;/p>
&lt;p>Imagine chefs cooking the different dishes using the same recipe, or artists painting with the same technique, or musicians using the same chords and instruments. Restricting any activity that requires creativity is almost a crime. It asphyxiates development in whatever area or field we are working on.&lt;/p>
&lt;p>The problem is that in today&amp;rsquo;s highly producer-consumer based society there is no time to be creative. There is no time for the appreciation of a work well done in engineering. Templated, quick solutions are the norm. We are battling the &lt;em>technification&lt;/em> of technology itself. The latest developments and pushes for low-code, no-code platforms speak of such reality.&lt;/p>
&lt;p>It is true. These tools provide massive gains in productivity (if they are flexible enough to support your use case). The problem is that we are raising a generation of Engineers that have just the required high-level notions to use some tool. In such a world, the best Engineers are the ones who go deeper in understanding the low-level notions that power the tools they use. And I want to both further the development of that kind of Engineer and work alongside them.&lt;/p>
&lt;h2 id="empowering-people">Empowering People&lt;/h2>
&lt;p>When people, specially creative people, are coerced into an automatic way of doing their job, we are doing them a massive damage. We are effectively lowering their value. We are telling them that we believe them incapable of come up with something better and more efficient. Highly creative people will soon leave roles like that. You will be stuck with people that value comfort more than the creative development of their trade.&lt;/p>
&lt;p>But then we treat our companies as mere assembly lines of a factory, and equate our workers to machine controllers. It is no secret that factories play a massive role in the alienating the value of individual work. Everyone can move a handle with some degree of coordination. Not everyone can make a machine that does amazing things just by moving a handle with some degree of coordination.&lt;/p>
&lt;p>Engineers are not resources. They are people in a highly creative trade. They are not easily replaceable nor interchangeable. They will stay in a place that fosters their creativity and leaves them room to do so. This goes farther than just getting them mere access to a learning platform. They need an outlet for their creativity, they need a blank canvas in which they can try new things and approaches. They need autonomy, and that people in higher places trust them to do a good job. They need to know the whys, not the hows.&lt;/p>
&lt;p>This freedom comes with a great responsibility of course. Now, all of a sudden, an Engineer&amp;rsquo;s decision can have a bigger impact in a project or company. And depending of the quality of that decision, the impact can be good or bad. There are two answers to this. (1) If you empower your engineers, they will feel the higher burden of the responsibility they have, and therefore look to do a batter job researching well and providing the best implementation they can. (2) They will make mistakes of course, and bad decisions. We all do, so a good review process whose focus is on guidance is also a good alternative.&lt;/p>
&lt;p>If after those two things, still some bad outcomes slip through, a call to remember reality is necessary. We work with people, not gods. We will make mistakes. Make sure to keep empowering the people that, after they do, review their mistakes and are determining to not making them again.&lt;/p></content></item><item><title>The Golden Rule for Writing Code</title><link>https://blog.mnavarro.dev/posts/golden-rule-code/</link><pubDate>Sun, 26 Sep 2021 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/golden-rule-code/</guid><description>Every now and then I read a piece about DRY vs WET, explaining their benefits over its counterpart. Most of the time, these pieces are quite unhelpful, as they are way too vague and general. They lack a crucial thing, and that is context.
I believe this is the most common aspect on disagreements about any topic in software development. Someone writes a piece about X or Y topic arguing a point, but then another piece comes up arguing a different case (or sometimes totally the opposite one).</description><content>&lt;p>Every now and then I read a piece about &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY&lt;/a> vs &lt;a href="https://dev.to/nettab/we-should-all-be-writing-wet-code-3d95">WET&lt;/a>, explaining their benefits
over its counterpart. Most of the time, these pieces are quite unhelpful, as
they are way too vague and general. They lack a crucial thing, and that
is &lt;strong>context&lt;/strong>.&lt;/p>
&lt;p>I believe this is the most common aspect on disagreements about any topic in
software development. Someone writes a piece about X or Y topic arguing a point,
but then another piece comes up arguing a different case (or sometimes totally
the opposite one). Almost always both authors are presenting valuable and correct
ideas, but their conclusions are different. Why?&lt;/p>
&lt;p>I believe this is due to a lack of context, and this happens a lot in the DRY and WET
discussions.&lt;/p>
&lt;p>For instance, I read &lt;a href="https://kentcdodds.com/blog/aha-programming?s=09">this article&lt;/a> that poses yet-another paradigm for dealing
with the problem of when to abstract.&lt;/p>
&lt;p>You should absolutely read it. Basically, the author summarized DRY, it&amp;rsquo;s benefits
and problems. Then it summarizes WET&amp;rsquo;s benefits and problems. And then goes on
to present it&amp;rsquo;s own acronymic alternative: AHA.&lt;/p>
&lt;p>So, this is the state of the art now in the debate (I&amp;rsquo;m intentionally reducing the
author&amp;rsquo;s ideas to a few words here):&lt;/p>
&lt;ol>
&lt;li>Someone proposed DRY: We should avoid repeated or duplicated code by abstracting it out.&lt;/li>
&lt;li>Someone proposed WET in reaction: We should wait until the duplication is real. People abstract too early.&lt;/li>
&lt;li>Someone proposed AHA in response: Even when there is real duplication, you don&amp;rsquo;t know the future. We should wait for the right abstraction.&lt;/li>
&lt;/ol>
&lt;p>That&amp;rsquo;s it, in a nutshell. But all this is not helpful at all. There are a lot of
questions left unanswered. Does DRY means I can have no duplicated code at all?
Is all duplication bad? When is it too early to abstract? How can I know when is
the right time to abstract something away?&lt;/p>
&lt;p>Articles don&amp;rsquo;t answer that question, because they can&amp;rsquo;t. And they can&amp;rsquo;t because
the answer is &amp;ldquo;it depends&amp;rdquo;. Depends of your own particular codebase and problem,
and the context surrounding it. Your problem cannot be reduced to an easy-to-remember
acronym created by a guy who is not dealing with your particular issue.&lt;/p>
&lt;p>Proof of this is this wild declaration made by the author of the AHA article. It says
this when it summarizes his approach:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>I think the big takeaway&lt;/strong> about &amp;ldquo;AHA Programming&amp;rdquo; is that you shouldn&amp;rsquo;t be dogmatic
about when you start writing abstractions but instead write the abstraction when
it &lt;em>feels&lt;/em> right and don&amp;rsquo;t be afraid to duplicate code until you get there.&lt;/p>
&lt;/blockquote>
&lt;p>That is some terrible advice. The points he raised in his article were all valid,
but the conclusion is just plain terrible. In an attempt to escape from dogmatism
(which is always good), the solution to the problem ends up being reduced to a
mere feeling.&lt;/p>
&lt;p>When does it &lt;em>feel&lt;/em> right to code an abstraction? I don&amp;rsquo;t know, even though in
some of my projects I could have an idea. But most certainly, someone will feel
different.&lt;/p>
&lt;p>I think we need a bit more objective advice on how to do this.&lt;/p>
&lt;h1 id="going-back-to-the-roots">Going Back to the Roots&lt;/h1>
&lt;p>DRY as an acronym was coined with a purpose. A purpose most people seem to ignore.
Why DRY is good? Because if you have to correct or fix duplicated code in the future,
it will be harder to do, because you will have to change it in the multiple places it was copied.
Why is WET or AHA good? Because if you choose the wrong abstraction and then need to change it, it will be harder
to do so in the future.&lt;/p>
&lt;p>For me, there is just only one rule to follow when writing code. Is not an easy one:
most of the time you&amp;rsquo;ll have to figure out the answer and some times you&amp;rsquo;ll get
it wrong. The application of this rule can take many forms and faces, and so it
will require you to be wise. Here it is:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Should requirements change in way X, could this code Y be easily changed?&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s it. There you have it. That is all you need to know for starters. From
that rule, every software principle, every design pattern, every acronym flows.&lt;/p>
&lt;p>Of course, like every summarized thing, this rule needs explaining. Let me
break it down in pieces.&lt;/p>
&lt;h2 id="should-requirements-change">&amp;ldquo;Should requirements change&amp;rdquo;&lt;/h2>
&lt;p>This is kinda obvious. Code changes all the time because of requirements.
Code is never finished because of requirements. If you have ever done client work
you should know this very well.&lt;/p>
&lt;p>In every software project where changes happen, you must be prepared for them. This
requires you to anticipate. Anticipation is one of the most important qualities
of a seasoned developer.&lt;/p>
&lt;p>I&amp;rsquo;m currently learning how to drive and my instructor keeps telling me I&amp;rsquo;m missing
a very important skill: anticipation. I need to look ahead and be prepared for
possible things that may occur. I need to look at the signs that could cause me
to stop or do another manuever, all the time. He keeps telling me what he has
come to call the golden rule of driving: &lt;strong>we drive not for what is happening, but
for what &lt;em>could&lt;/em> happen.&lt;/strong> I&amp;rsquo;m just borrowing his wisdom here.&lt;/p>
&lt;p>Coding is not much different in that aspect. When coding, &lt;strong>we are not coding just for what we
are asked, but what we &lt;em>could&lt;/em> be asked.&lt;/strong> We need to be aware and read the signs,
and that just takes experience.&lt;/p>
&lt;p>If you are in a project in which requirements don&amp;rsquo;t change much or where you are
in full control of them, then none of this applies to you.&lt;/p>
&lt;h2 id="in-ways-x">&amp;ldquo;in ways X&amp;rdquo;&lt;/h2>
&lt;p>If you read the rule well, you&amp;rsquo;ll notice there are two variables: X and Y. This
is the first one of them.&lt;/p>
&lt;p>I represented the change using a variable because we do not know in which ways
the requirements will change. This seems to contradict my previous point, but it
does not. Let me explain.&lt;/p>
&lt;p>One thing is to try to anticipate, another very different one is to know in
advance. Some people confuse the two of them and they say: &amp;ldquo;Since I cannot know
in advance, it is pointless to anticipate&amp;rdquo;. They couldn&amp;rsquo;t be more wrong.&lt;/p>
&lt;p>Only God knows in advance, we agree on that. The purpose of anticipation is not
knowing, is preparing. We read signs of things that might happen so we can be
prepared if they happen. We don&amp;rsquo;t know if they will, but the key verb here is to be
prepared.&lt;/p>
&lt;p>You don&amp;rsquo;t know if you are going to lose your job, but nonetheless you try to be
prepared for that by saving up every month. Not knowing in advance does not rule
out being prepared for something unexpected.&lt;/p>
&lt;p>Now, here is when you are pretty much on your own, and when context is key. Only
you know in which ways requirements may change. It could be that they ask you
to use another database engine, or support multiple methods of authentication,
or be able to configure certain parts on the system on demand. It could be anything,
but you must always be looking out for the signs.&lt;/p>
&lt;p>Usually, when requirements are confusing since the beginning of a project, that&amp;rsquo;s
a very good indication for me when things might change.&lt;/p>
&lt;h2 id="could-this-code-y">&amp;ldquo;could this code Y&amp;rdquo;&lt;/h2>
&lt;p>So, the second variable subject here is not only the changing requirements, but
the code you are working on that could possibly be impacted by that change of
requirements.&lt;/p>
&lt;p>For instance, if a requirement is to convert files to PDF, that is a very good
indication that whatever code you are using to do that, should be properly isolated
so it is easy to change. PDF conversion tools abound out there, and it might happen
that you&amp;rsquo;ll need to change one for another.&lt;/p>
&lt;p>For most if these kinds of problems you can get away by coding to an interface.
Define an interface in your application and implement it. The interface should
be small and generic: pass just the enough arguments required to do the conversion.&lt;/p>
&lt;p>Then, have your code use the interface. You can be sure it will be easy to change
in the future.&lt;/p>
&lt;p>Again, this is a very particular example, but it has a very wide application. Interfaces
are the best way to protect your code from changes. If you design them well,
you will have an easy time swapping the implementation for something else.&lt;/p>
&lt;p>Bottom line, you and you only know your code. Be wise.&lt;/p>
&lt;h2 id="be-easily-changed">&amp;ldquo;be easily changed&amp;rdquo;&lt;/h2>
&lt;p>Now, if the rule were only &amp;ldquo;Should requirements change in way X, could this code
Y be changed&amp;rdquo; that would be a terrible rule. The word &lt;strong>easily&lt;/strong> is key.&lt;/p>
&lt;p>Maybe you come to the conclusion that a potential requirement X could make your
code Y change, so you want to refactor. But the impact is not that big so
leaving it unchanged would still make it easy to refactor should that requirement
X become a reality in the future. In that case, don&amp;rsquo;t change it.&lt;/p>
&lt;p>You should only refactor code when the potential of a requirement change will make
it hard to change. Sometimes, changes are not that hard. If a piece of code is
duplicated in two places, that is not that hard to change.&lt;/p>
&lt;p>Remember, the goal is that we want code that is not hard to change.&lt;/p>
&lt;h1 id="on-picking-the-wrong-abstraction">On Picking the Wrong Abstraction&lt;/h1>
&lt;p>Sometimes, people talk about picking the wrong abstraction early as the worst mistake
you can possibly do.&lt;/p>
&lt;p>I&amp;rsquo;ve done this so many times, and it is not that terrible at all and quite
simple to correct. I have many stories about this.&lt;/p>
&lt;p>I once coded an interface for money conversion in a project I was doing.
It was very simple. It was called &lt;code>MoneyConverter&lt;/code> and has one method
&lt;code>Convert&lt;/code>. It took a &lt;code>Money&lt;/code> instance and a currency as arguments and returned a
new &lt;code>Money&lt;/code> instance with the converted amount.&lt;/p>
&lt;p>I implemented that using an external api, but that does not matter. This is how
the interface looked:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MoneyConverter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">convert&lt;/span>(&lt;span style="color:#a6e22e">Money&lt;/span> $money, &lt;span style="color:#a6e22e">Currency&lt;/span> $currency)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>My client code just used that. Never knew anything about an api or any other implementation
detail.&lt;/p>
&lt;p>It was a good idea until someone said &amp;ldquo;We need to display to the user the conversion
rate in which the conversion was made.&amp;rdquo; Too bad for me, my interface did not
returned that information: it just returned the converted amount. So, I modified
the interface&amp;rsquo;s return argument to be another object called &lt;code>Conversion&lt;/code> that was
holding two things inside: the &lt;code>Money&lt;/code> class and the &lt;code>rate&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MoneyConverter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">convert&lt;/span>(&lt;span style="color:#a6e22e">Money&lt;/span> $money, &lt;span style="color:#a6e22e">Currency&lt;/span> $currency)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Conversion&lt;/span>;
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Conversion&lt;/span>
{
&lt;span style="color:#75715e">// Original properties were not public. This is just to save space.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span> $money;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">float&lt;/span> $rate;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, I had to update every part of the code where the &lt;code>MoneyConverter&lt;/code> interface
was used (around two or three places) so they were handling correctly the
returned value and then I had to correct the implementation.&lt;/p>
&lt;p>Now, two questions.&lt;/p>
&lt;p>First one is, could I have anticipated to the requirement? Absolutely! It seemed
something very reasonable to ask and expect. If I ever write a conversion service
again it will always expose this information by default.&lt;/p>
&lt;p>Second is, was it a hard change? For me in this project, it wasn&amp;rsquo;t. And I think
here it is where all the fears of coming up with the wrong abstraction come from. It
was very easy for me to spot all the places where I had to change this because
I had all the code using the interface covered with tests, as well as the
implementation using the Api. As soon as I changed the interface and the
implementation, my tests exploded, showing me exactly where and why were failing.
Either myself or any other developer could have made the change, because of the
robust test suite.&lt;/p>
&lt;p>The reason why maybe coming up with the wrong abstraction is such a fear, is because
people don&amp;rsquo;t write tests. And tests are essential into making a piece of software
easy to change. Tests are not so much for ensuring correctness of a program: they
exist to help you confidently change your code.&lt;/p>
&lt;p>You &lt;strong>will&lt;/strong> make wrong decisions when writing code, and sometimes that &lt;strong>will&lt;/strong>
lead to disruptive changes. Be prepared for that with a good test suite. Again,
it&amp;rsquo;s all about being prepared.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Much of the coding best practices and design patterns out there have the sole goal
to make your code easy to maintain by ensuring it is easy to change when it needs
changing. This is the most important aspect you must keep in mind when writing code,
more than how many times you copy code or if you &lt;em>feel&lt;/em> it is right to abstract something
or not.&lt;/p>
&lt;p>Will this be easy to change is the most important question you can ask yourself
about your code, and only wisdom, experience and good judgement can help you
answer it. Making sure it is easy to change by coding well (DRY, WET, AHA, Design Patterns)
and writing tests is crucial.&lt;/p></content></item><item><title>Testing HTTP SDKs in Golang</title><link>https://blog.mnavarro.dev/posts/http-sdk-testing-in-go/</link><pubDate>Wed, 08 Sep 2021 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/http-sdk-testing-in-go/</guid><description>How do you test code that integrates with a third party HTTP service?
The Philosophical Answer If you think about it, it is not an easy question to answer. Maybe you have already some strong opinions formed about it. But, in my experience, answers to this question differ greatly among developers, even between seasoned ones.
I believe those differences are due to some preconceived ideas or different definitions about what testing is.</description><content>&lt;p>How do you test code that integrates with a third party HTTP service?&lt;/p>
&lt;h1 id="the-philosophical-answer">The Philosophical Answer&lt;/h1>
&lt;p>If you think about it, it is not an easy question to answer. Maybe you have already some strong opinions formed about it. But, in my experience, answers to this question differ greatly among developers, even between seasoned ones.&lt;/p>
&lt;p>I believe those differences are due to some preconceived ideas or different definitions about what testing is. For example, some people believe that testing is making sure your code works. The problem with that definition is that it is too vague; &amp;ldquo;it works&amp;rdquo; can mean anything.&lt;/p>
&lt;figure class="left" >
&lt;img src="https://blog.sergeyev.info/images/works-on-my-machine/the-line.jpg" />
&lt;/figure>
&lt;p>Take, for instance, the following (too familiar) situation: you are told to code a service (or SDK) that integrates with a third party api or http service. As is usual with integrations, confusing or incomplete specs are passed around. Nonetheless, that is sufficient to do your job. You decide to test creating a mock server based on the spec and build your suite to a very good coverage. So far so good.&lt;/p>
&lt;p>But, when the day comes to do some acceptance testing against the QA environment of the service you are integrating to, you realized nothing worked. Turns out services needed an extra header that was not included in any spec. No problem though; you add it to the code, update your tests and move forward.&lt;/p>
&lt;p>I&amp;rsquo;ll come back to this story to explore other relevant topics later. For now, I want to use it to ask you a question. Would you say that the initial version released to test against QA &amp;ldquo;worked&amp;rdquo;? Well, it&amp;rsquo;s a tricky one, isn&amp;rsquo;t it? It did not worked in the sense that it did not integrate correctly because of the missing header. It worked in the sense that the program did what it was coded to do with the available knowledge at the time.&lt;/p>
&lt;p>Based on this, I would like to make the main point of this article, from which every other point flows. &lt;strong>Testing is not making sure your program does something correctly; testing is making sure your program does what the code says it does.&lt;/strong> In our previously mentioned story, we cannot ensure a correct integration until we have hit a real service (and not a mock), but we can have good tests that ensure the program is doing what we have coded it to do.&lt;/p>
&lt;p>I think the distinction of these two is greatly accentuated in integrations with third party http services. Unless you have an spec that is automatically generated from the service code, until you start hitting endpoints, you can never know for sure if you have integrated correctly or not.&lt;/p>
&lt;p>In my opinion, the sooner we embrace this reality, the better. Once we do, we will be able to go and ask ourselves the next question.&lt;/p>
&lt;h2 id="what-then-do-we-test">What then do we test?&lt;/h2>
&lt;p>So, if we cannot test that our SDK integrates correctly with the service. What do we test then? The answer is: &lt;strong>we test that our code follows what we understand of the specification we were given.&lt;/strong>&lt;/p>
&lt;p>For instance, if the specification says that we should send an &lt;code>Authorization&lt;/code> header with some sort of token, we test that (1) A request is created containing the &lt;code>Authorization&lt;/code> header and (2) that the passed token value is indeed the same that is injected in the header. Similar principles follow for URL, method and body.&lt;/p>
&lt;p>The following of a specification does not have only to do with the expectations about a request, but also with the correct handling of a response. This means we should also test that our code follows the specification when handling responses.&lt;/p>
&lt;p>We should map status codes to certain errors, or react to different content types, or deserialize certain payloads to some types without data loss, etc. We should test that our code does this based on the spec.&lt;/p>
&lt;p>Okay, I&amp;rsquo;m sure you are getting very impatient and want to get to the &amp;ldquo;how&amp;rdquo; of testing a third party http integration. Just allow me to say one more thing.&lt;/p>
&lt;h2 id="what-are-we-not-testing">What are we not testing?&lt;/h2>
&lt;p>Many developers understand all that I&amp;rsquo;ve written. So, they take their keyboards and decide that the best way to test the aforementioned things is just by spinning up a temporary web server process, listening in a random port, that is pre-configured to respond to requests mapping certain methods and urls to certain responses. Most people call this a &lt;em>mock server&lt;/em>.&lt;/p>
&lt;p>No blame on them! I&amp;rsquo;ve seen this approach being endorsed by &lt;a href="https://youtu.be/rWBSMsLG8po?t=2413">really prominent Go developers&lt;/a>. And I think it is specially prominent in Go due to the fact that it is indeed very easy to spin up a server in a separate Goroutine.&lt;/p>
&lt;p>However, this approach is often unnecessary and overly complex. Let me explain why.&lt;/p>
&lt;h3 id="we-are-not-testing-tcptlshttp">We are not testing TCP/TLS/HTTP!&lt;/h3>
&lt;p>First, there is no need to send our &lt;code>*http.Request&lt;/code> over a TCP socket to a server, have the server parse the request and end up with a &lt;code>*http.Request&lt;/code> again in a completely different process, that then will be passed to a handler that will match our request and return a response.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">http.Request --&amp;gt; Http Client --&amp;gt; TCP Socket --&amp;gt; Server --&amp;gt; Http Parser --&amp;gt; http.Request --&amp;gt; handler -&amp;gt; http.Response
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can simplify this massively, bypassing all the TCP, server stuff and just doing things in memory, for instance, in a function.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">http.Request -&amp;gt; function -&amp;gt; http.Response
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And this is fine, because we are not testing TCP, nor TLS, nor the HTTP protocol. The Go standard library already has tests for all those packages and functions. We want to test &lt;em>our&lt;/em> code.&lt;/p>
&lt;p>In order for us to test that our code complies to a spec, there is no need then to spin up a web server.&lt;/p>
&lt;p>Plus, if something happens with that server, it will be really hard to debug.&lt;/p>
&lt;h3 id="we-are-not-testing-routing">We are not testing routing!&lt;/h3>
&lt;p>Even when not using server-over-TCP mocking techniques, but in-memory ones, some people still go with building some kind of in-memory testing &amp;ldquo;server&amp;rdquo; that returns responses based on some matching logic. Usually this takes the form of matching the method and the url.&lt;/p>
&lt;p>Again, this is completely unnecessary, and it could lead to undesirable side-effects in testing, plus a couple of more issues.&lt;/p>
&lt;p>It is unnecessary because, remember, we are testing that our code conforms to a spec. In other words, we are testing that we send a request with the correct contents and that we are capable to handle certain responses. We are not testing routing (that a request with a certain method and URL with gives us a certain response).&lt;/p>
&lt;p>This approach usually leads to side effects. Since this massive, respond-to-everything, in-memory mock of a server needs to be configured somewhere, it usually is outside the tested code. If someone changes an id, or accidentally creates another request with the same url there is potential breakage.&lt;/p>
&lt;p>Also, there is no clear contract regarding to what should be the response when a request of this mock cannot be matched. This usually weakens error handling code.&lt;/p>
&lt;p>Finally, a mock like this ignores the fact that some HTTP operations are not idempotent: the same method and url combination can and will give different answers based on the internal state of the server at the time of the call. It is really hard to mock that using this approach.&lt;/p>
&lt;p>It&amp;rsquo;s better not to try to play any matching games and do something deterministic and straightforward.&lt;/p>
&lt;h1 id="the-practical-answer">The Practical Answer&lt;/h1>
&lt;p>Now that I have ranted enough about these things, is time I explain my proposed approach.&lt;/p>
&lt;p>Let&amp;rsquo;s suppose that we have an third party service with an endpoint &lt;code>POST /input&lt;/code>. This endpoint takes a &lt;code>application/json&lt;/code> payload that only contains
one key &lt;code>message&lt;/code>, and can be an string of any length.&lt;/p>
&lt;p>The service returns an &lt;code>application/json&lt;/code> payload with the same structure: again, the object with a &lt;code>message&lt;/code> key.&lt;/p>
&lt;p>This is how I would implement it in Go. Read the comments so you get a better understanding.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">fakesdk&lt;/span>
&lt;span style="color:#75715e">// A main client struct to hold everything together
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FakeApiClient&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#a6e22e">HTTPClient&lt;/span>
&lt;span style="color:#a6e22e">baseUrl&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#75715e">// A constructor to make that client with good defaults
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewFakeApiClient&lt;/span>(&lt;span style="color:#a6e22e">baseUrl&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeApiClient&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">FakeApiClient&lt;/span>{
&lt;span style="color:#a6e22e">client&lt;/span>: &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">DefaultClient&lt;/span>,
&lt;span style="color:#a6e22e">baseUrl&lt;/span>: &lt;span style="color:#a6e22e">baseUrl&lt;/span>
}
}
&lt;span style="color:#75715e">// Some people like to make an interface with the same signature
&lt;/span>&lt;span style="color:#75715e">// as http.Client.Do function so they can swap implementations for
&lt;/span>&lt;span style="color:#75715e">// testing. http.RoundTripper can do this already, but well,
&lt;/span>&lt;span style="color:#75715e">// everyone has their own preference.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HTTPClient&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;span style="color:#75715e">// This creates the request. Pretty standard stuff here.
&lt;/span>&lt;span style="color:#75715e">// The only detail is that we need to serialize from json and make
&lt;/span>&lt;span style="color:#75715e">// sure we put the right content type.
&lt;/span>&lt;span style="color:#75715e">// Oh, and that we pass the context to the request!
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeApiClient&lt;/span>) &lt;span style="color:#a6e22e">mustMakeRequest&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">method&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
panic(&lt;span style="color:#a6e22e">err&lt;/span>) &lt;span style="color:#75715e">// Developer error
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewBuffer&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
}
&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cl&lt;/span>.&lt;span style="color:#a6e22e">baseUrl&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>
&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#a6e22e">method&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
panic(&lt;span style="color:#a6e22e">err&lt;/span>) &lt;span style="color:#75715e">// Developer error
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">WithContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
}
&lt;span style="color:#75715e">// The fake input struct
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FakeInput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;message&amp;#34;`&lt;/span>
}
&lt;span style="color:#75715e">// The fake output struct
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FakeOutput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;message&amp;#34;`&lt;/span>
}
&lt;span style="color:#75715e">// This is the actual method that will be used in client code.
&lt;/span>&lt;span style="color:#75715e">// Pretty standard stuff too. Sends the request and handles any error.
&lt;/span>&lt;span style="color:#75715e">// Also decodes the payload.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeApiClient&lt;/span>) &lt;span style="color:#a6e22e">PostInput&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeInput&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeOutput&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cl&lt;/span>.&lt;span style="color:#a6e22e">mustMakeRequest&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/input&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span>)
&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cl&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">400&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;server responded with code %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>)
}
&lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">FakeOutput&lt;/span>{}
&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">out&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the only thing I need to test is that I send the correct request and I&amp;rsquo;m capable to handle all possible responses or eventual socket errors. That&amp;rsquo;s it. Nothing else.&lt;/p>
&lt;p>Sending the the correct request in this case means that the method is correct, the url too, that the body gets serialized to json correctly and that the compulsory headers are present and with the correct values.&lt;/p>
&lt;p>Being capable to handle all possible responses means that I should code expectations for when my code fails. For instance, if I get a response with a status code 400, then my code should return an error saying &amp;ldquo;server responded with code 400&amp;rdquo;.&lt;/p>
&lt;p>Now, doing all these checks on the request and building all the responses for every test case would be very verbose. Luckily, I&amp;rsquo;ve created a package just for that. It is called &lt;code>httpclientmock&lt;/code>. It is extremely simple and straight forward, and you are meant to use it in your test suites like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">fakesdk_test&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">postInputTests&lt;/span> = []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeInput&lt;/span>
&lt;span style="color:#a6e22e">mock&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">httpclientmock&lt;/span>.&lt;span style="color:#a6e22e">Mock&lt;/span>
&lt;span style="color:#a6e22e">assertions&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeOutput&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
}{
{
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test one&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">input&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">FakeInput&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;This is a message sent&amp;#34;&lt;/span>},
&lt;span style="color:#a6e22e">mock&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">httpclientmock&lt;/span>.&lt;span style="color:#a6e22e">Mock&lt;/span>{
&lt;span style="color:#a6e22e">Expect&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">httpclientmock&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>{
&lt;span style="color:#a6e22e">Method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Url&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://some.fake.service/input&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Headers&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Body&lt;/span>: []byte(&lt;span style="color:#e6db74">`{&amp;#34;message&amp;#34;:&amp;#34;This is a message sent&amp;#34;}`&lt;/span>),
},
&lt;span style="color:#a6e22e">Return&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">httpclientmock&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>{
&lt;span style="color:#a6e22e">StatusCode&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>,
&lt;span style="color:#a6e22e">Headers&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Body&lt;/span>: []byte(&lt;span style="color:#e6db74">`{&amp;#34;message&amp;#34;:&amp;#34;This is a message received&amp;#34;}`&lt;/span>),
},
},
&lt;span style="color:#a6e22e">assertions&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FakeOutput&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no output&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;an error has happened&amp;#34;&lt;/span>)
}
},
},
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestPostInput&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">FakeApiClient&lt;/span>{&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">DefaultClient&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;https://some.fake.service&amp;#34;&lt;/span>}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">postInputTests&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// Inject in client mutates http.DefaultClient transport.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The restore function restores the previous transport.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">restore&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">mock&lt;/span>.&lt;span style="color:#a6e22e">InjectInClient&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#75715e">// We defer the restoring of the previous transport when the test finishes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">restore&lt;/span>()
&lt;span style="color:#75715e">// Pass the input
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">out&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">PostInput&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>)
&lt;span style="color:#75715e">// Assert about the output
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">assertions&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
})
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The benefits of using this library are huge. First, its ability to modify &lt;code>http.DefaultClient&lt;/code> responsibly means you don&amp;rsquo;t need to worry about dependency injection too much when setting up tests that send requests very deep in the call stack. So, you could use it for E2E tests without a problem.&lt;/p>
&lt;p>If you wish to use better practices like dependency injection, no problem, we got you covered. &lt;code>httptestmock.Mock&lt;/code> has a method called &lt;code>BuildNewClient&lt;/code> that will give you a &lt;code>*http.Client&lt;/code>. You can also call &lt;code>GetTestFunc&lt;/code> and this
will give you a &lt;code>TestHttpFunc&lt;/code>, which is a type that implements &lt;code>http.RoundTripper&lt;/code> and another function that has the same signature than &lt;code>Do&lt;/code> in &lt;code>http.Client&lt;/code>. You can integrate this library into your code in all these ways.&lt;/p>
&lt;p>You are probably thinking &amp;ldquo;Oh this thing modifies the global &lt;code>http.DefaultClient&lt;/code>. That could cause massive side effects&amp;rdquo; And yes, you are correct. This is why &lt;code>InjectInClient&lt;/code> returns a function. Calling it will restore the state of the client to what it was before the test. And you must make sure to defer that, so no other tests can potentially be affected by the mutation.&lt;/p>
&lt;p>You can keep on adding more tests in the block, with different payloads and different responses, writing expectations for every case. All the information of the test is in the test itself. No need to chase other files or look in logs from another process.&lt;/p>
&lt;p>Also, no side effects. All the state of the world lives there in your test run. Your response will be what the &lt;code>Return&lt;/code> property indicates will be. No surprises. That&amp;rsquo;s how a test should be.&lt;/p>
&lt;h2 id="learn-by-looking">Learn By Looking&lt;/h2>
&lt;p>If you need a more comprehensive example. You can take a look at &lt;a href="https://github.com/mnavarrocarter/transbank">this library I&amp;rsquo;m building&lt;/a>. It&amp;rsquo;s an SDK for a third party http service from Chile called Transbank. One of its services, Webpay, allows you to integrate with their payment gateway. &lt;a href="https://github.com/mnavarrocarter/transbank/blob/main/webpay/create_test.go">I&amp;rsquo;m using &lt;code>httpclientmock&lt;/code> to test the integration&lt;/a>.&lt;/p>
&lt;h2 id="going-solo">Going Solo&lt;/h2>
&lt;p>Of course, you don&amp;rsquo;t need to use a custom library for testing. As long as you can create your own &lt;code>http.RoundTripper&lt;/code> (with some assertions about a request and the building of a response) and pass that to the &lt;code>http.Client&lt;/code> you are using, you&amp;rsquo;ll be fine.&lt;/p>
&lt;h1 id="the-business-answer">The Business Answer&lt;/h1>
&lt;p>Now, all good so far? Well, not so fast! As you know, we are in the real world trying to bring value to our business partners. And they don&amp;rsquo;t care as much about in-memory deterministic testing or testing theory or stuff like that. They want to know the answer to one single and simple question: &lt;strong>will this integration work for the end user&lt;/strong>.&lt;/p>
&lt;p>User Acceptance Testing (or UAT) tries to answer that question, and it is a freaking art. This is one of the most difficult tests to automate. We cannot use the tests suites we wrote because we are testing conformity to a spec, remember? Those tests cannot tell us if the integration will work, which is the purpose of UAT.&lt;/p>
&lt;p>UAT tests deserve a test suite of their own, usually excluded from running in the normal CI process. They should be run prior to a deployment (usually against a release candidate version) against a real testing/staging environment. Is in this test scenario when it makes sense to hit a real server.&lt;/p>
&lt;p>Now, it is not as simple as write some logic and hit the server. It is more complex than that.&lt;/p>
&lt;p>You see, now we are dealing with all kind of side effects and statefulness. If we want to test an endpoint called &lt;code>GET /accounts/123&lt;/code> we need to make sure that the account with id &lt;code>123&lt;/code> exists in the system before doing that, so we probably need to call &lt;code>POST /accounts&lt;/code> first with some payload. In almost every UAT test there are some calls that depend on state obtained by other calls. For this reason, UAT test suites usually involve a &lt;em>journey&lt;/em>. They test a complete flow, from start to finish. They are not isolated tests like your normal Unit Tests. You&amp;rsquo;ll find yourself doing calls, retrieving state and then using that state to do some more calls that will continue to change the state of a server.&lt;/p>
&lt;p>Of course, I don&amp;rsquo;t have to mention that this could fail at any point of the journey for some weird reason.&lt;/p>
&lt;p>Another thing I&amp;rsquo;ve found to be really complex is that environment statefulness makes it really hard to reuse any kind of identifier, because you want to make sure that the test starts with a clean slate every time and you don&amp;rsquo;t know if the third party service testing environment you are using cleans up every day.&lt;/p>
&lt;p>Due to their messiness and complexity of implementing them automatically, UAT testing is usually done manually, but this is very prone to errors. At the end of the day, all depends on how complex is the integration you are building. You are in a lucky position if most of the calls of your third party service are idempotent, for example.&lt;/p>
&lt;hr>
&lt;p>These are just some of my ideas, beliefs and past experiences with testing. I hope they can make some sense for you and that will guide you to take the best approach you can to test your integrations in Golang.&lt;/p></content></item><item><title>Environment Variables Done Right</title><link>https://blog.mnavarro.dev/posts/environment-variables-done-right/</link><pubDate>Fri, 02 Jul 2021 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/environment-variables-done-right/</guid><description>One of the things that I don&amp;rsquo;t like about Laravel is their abusive use of environment variables. I think it sets a bad precedent for when developers need to come up with their own environment variables in their applications.
I have seen environment variables in an application that should have never been environment variables. And other things that should have been but have not made it to the list.
So, I thought I&amp;rsquo;ll write this piece to rant a bit about this.</description><content>&lt;p>One of the things that I don&amp;rsquo;t like about Laravel is their abusive use of environment variables. I think it sets a bad precedent for when developers need to come up with their own environment variables in their applications.&lt;/p>
&lt;p>I have seen environment variables in an application that should have never been environment variables. And other things that should have been but have not made it to the list.&lt;/p>
&lt;p>So, I thought I&amp;rsquo;ll write this piece to rant a bit about this.&lt;/p>
&lt;h2 id="know-what-should-be-an-environment-variable">Know what should be an environment variable&lt;/h2>
&lt;p>Environment variables should only be configuration values that change between deployments. Nothing else. For instance, Laravel has it&amp;rsquo;s famous &lt;code>APP_NAME&lt;/code> environment variable that is completely useless. If your app name is &lt;code>MonkeyMarket&lt;/code> is probably going to be the same in production and staging deploys. No need to make this an environment variable at all. It is not a value related to the environment, but to the application. This is best handled in code.&lt;/p>
&lt;p>&lt;code>APP_URL&lt;/code> is probably another environment variable that should not exist, since the app url should be derived from the &lt;code>Host&lt;/code> http header or any of the &lt;code>X-Forwarded&lt;/code> or &lt;code>Forwarded&lt;/code> headers (if you are behind a proxy). If you don&amp;rsquo;t do that, then you risk to inconsistencies between the actual app url and the value of the &lt;code>APP_URL&lt;/code> variable. Having said that, there are probably some scenarios in which it might make sense, specially if you want to avoid proxy forgery attacks.&lt;/p>
&lt;h2 id="use-uris-to-specify-connection-parameters">Use URIs to specify connection parameters&lt;/h2>
&lt;p>Another thing that Laravel does with their environment variables is to multiply their number without need. For example, in order to specify a database connection, you must set a total of 6 environment variables: &lt;code>DB_CONNECTION&lt;/code>, &lt;code>DB_HOST&lt;/code>, &lt;code>DB_PORT&lt;/code>, &lt;code>DB_DATABASE&lt;/code>, &lt;code>DB_USERNAME&lt;/code> and &lt;code>DB_PASSWORD&lt;/code>. It&amp;rsquo;s a similar thing if you want to configure mailing or storage.&lt;/p>
&lt;p>In order to simplify all these possible options you can make use of URIS. As defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc3986">RFC 3986&lt;/a> they provide a simple and extensible way of defining a resource. In our case, this resource would be a connection to a third party service.&lt;/p>
&lt;p>For instance, instead of all those variables that Laravel defines for a database connection, we could use a single uri string. This even allows us to pass extra configuration in the form of query parameters.&lt;/p>
&lt;pre>&lt;code class="language-env" data-lang="env">mysql://user:pass@host:345/db_name?collation=utf8&amp;amp;ssl=true
&lt;/code>&lt;/pre>&lt;p>What if it gets tricky, like a database connection behind ssh? You still can use a single string and keep complexity of environment variables to a minimum.&lt;/p>
&lt;pre>&lt;code class="language-env" data-lang="env">mysql+ssh://user:pass@host:345/db_name?collation=utf8&amp;amp;sshHost=192.168.1.123&amp;amp;sshUser=root#/path/to/ssh/key
&lt;/code>&lt;/pre>&lt;p>This can work for virtually anything, like mailing, caching, storage, and sessions.&lt;/p>
&lt;pre>&lt;code>DATABASE_URI=mysql://user:pass@host:345/db_name
MAILING_URI=smtp://user:pass@host:port?from=app@example.com&amp;amp;ssl=true
CACHING_URI=local:///tmp/cache
STORAGE_URI=s3://accesskey:secret@s3.amazonaws.com/publican?region=us-east-1
SESSION_URI=redis://user:pass@host:port/path/of/keys
&lt;/code>&lt;/pre>&lt;p>You can easily parse all these values using PHP&amp;rsquo;s &lt;code>parse_url&lt;/code> built-in function and get some defaults out of them.&lt;/p>
&lt;h2 id="everything-should-have-a-default">Everything should have a default&lt;/h2>
&lt;p>Is my personal belief that a good application should work out of the box with really dummy defaults. For instance, if your application needs a SQL database, maybe it should work with &lt;code>sqlite&lt;/code> by default, either in the filesystem or in memory. If it needs to store session data, it should probably default to the filesystem instead of &lt;code>redis&lt;/code>. If it needs to send emails, it should do it in memory or write them in the filesystem unless a real driver is provided.&lt;/p>
&lt;p>No environment variable should be strictly required to run the application, and the defaults should probably be development ones, so every developer in the project can jump quickly boot the environment.&lt;/p>
&lt;h2 id="derive-as-much-non-secret-values-as-you-can">Derive as much non-secret values as you can&lt;/h2>
&lt;p>Something I&amp;rsquo;ve seen a lot in many projects is environment variables with URLS to third party services that the app depends on.&lt;/p>
&lt;p>You might be inclined to store this in an environment variable of the type &lt;code>SERVICE_X_URL&lt;/code> too, since the values can change according to the environment. But another lesson to learn here is that in most cases you can derive these values from another environment variable. You could have an &lt;code>APP_ENV&lt;/code> variable with some predefined possible values (prod, stage, local, test) and use that to derive other values.&lt;/p>
&lt;p>The better approach in this case is that the urls should be stored in code (constants are useful here) and you should derive the right url according to the current environment stored in the &lt;code>APP_ENV&lt;/code> variable.&lt;/p>
&lt;p>So, if &lt;code>APP_ENV&lt;/code> equals to the string &lt;code>prod&lt;/code>, then you know you should use the production url for that service. In all other cases, you use the staging url. This is very convenient since you don&amp;rsquo;t have to maintain a &lt;code>SERVICE_X_URL&lt;/code> environment variable. You could even create mocks of the service and run those when the environment is &lt;code>local&lt;/code> or &lt;code>test&lt;/code>.&lt;/p>
&lt;p>If the service needs authentication, like a Bearer Token, you should create an environment variable for that, as the token can be different for every deployment, but unlike the url, it is not a secret value, so hardcoding it would be a terrible security best practice violation.&lt;/p>
&lt;p>Also, I should not say that as a good integration practice all that information
should be stored in an class implementation of that service.&lt;/p>
&lt;blockquote>
&lt;p>NOTE: You should not do this if these are services that could be deployed to different urls (like a pdf converter microservice or some other tool) and therefore could change often. This approach is only useful for services that have a staging url and a production url that usually does not change.&lt;/p>
&lt;/blockquote>
&lt;h2 id="use-other-alternatives">Use other alternatives&lt;/h2>
&lt;p>Some people like to use an &lt;code>APP_DEBUG&lt;/code> environment variable to determine if the application should be in debug mode or not. I personally don&amp;rsquo;t like this. Debugging is something you need to turn on and off on demand. Having it in an environment variable means an application restart is required to pick up the changes (in a containerized environment), which could affect your debugging.&lt;/p>
&lt;p>Here the use of feature flags shines. If you use a service discovery tool like Consul, you could store these in their key value store and retrieve them at booting time and use them to configure your services. Redis is another option here.&lt;/p>
&lt;p>So, when you need to debug an issue you could enable that feature and then turn it off when you don&amp;rsquo;t need it anymore.&lt;/p>
&lt;hr>
&lt;p>Hope these tips help you reason about what environment variables you define in your application and to keep them under control.&lt;/p></content></item><item><title>Job Hunting Realizations</title><link>https://blog.mnavarro.dev/posts/job-hunting-realizations/</link><pubDate>Thu, 10 Jun 2021 01:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/job-hunting-realizations/</guid><description>Recently I put myself back into the market: I went job hunting. I did this after a year and three months at Spatialest, in which I had the privilege of meeting kind and hardworking people that welcomed this very weird and unknown Chilean person into their lives and into their company. It was also a time of growth: I could develop some mentoring skills; I was able to become pretty good at React, and I was able to learn a bit more about multi-tenant solutions and implement my first multi-tenant platform.</description><content>&lt;p>Recently I put myself back into the market: I went job hunting. I did this after a year and three months at &lt;a href="https://www.spatialest.com/">Spatialest&lt;/a>, in which I had the privilege of meeting kind and hardworking people that welcomed this very weird and unknown Chilean person into their lives and into their company. It was also a time of growth: I could develop some mentoring skills; I was able to become pretty good at React, and I was able to learn a bit more about multi-tenant solutions and implement my first multi-tenant platform.&lt;/p>
&lt;h3 id="on-what-keeps-me-going">On What Keeps Me Going&lt;/h3>
&lt;p>But I&amp;rsquo;m always aiming higher. I want to develop myself in new areas, learn new languages and use new technology. Over the years, I have discovered that I&amp;rsquo;m the kind of personality that gets bored very easily if I don&amp;rsquo;t do something new. I need that intellectual dopamine that comes from satisfying my curiosity by tinkering with things and trying new approaches. It is a doubled edged sword: it keeps me going and makes me wake up every morning passionate about all the challenges I could face today, but it can also deviate my attention to other things I consider more interesting that do not necessarily bring value to what I&amp;rsquo;m currently doing.&lt;/p>
&lt;p>I think this is true of every developer in some degree. Is what makes us start a side project and never finish it. We all know that meme very well. By the time we are halfway through the project, we find something more interesting and start tinkering with that. It&amp;rsquo;s a vicious circle. Or maybe a virtuous one.&lt;/p>
&lt;p>This self knowledge actually comes from a very recent realization. From some time now I&amp;rsquo;ve been thinking what is the part that I love the most about my job, and I&amp;rsquo;ve concluded is this drive to learn, to master something and to apply it successfully what excites me the most. I think it is that &amp;ndash; and my awesome wife, who always understands when I want to spend my whole Saturday in front of a computer &amp;ndash; what has helped me to learn and achieve so much in so little time. Sometimes I forget that I been doing this just for a little more than five years.&lt;/p>
&lt;p>It is important that my future employer knows and understands this part of my personality, to ensure that they will provide me with work that is challenging, interesting, varied and intellectually rewarding; and that I provide them them in return with all my energy, time and resources to make that work bring value to the company.&lt;/p>
&lt;h3 id="on-the-power-of-money">On The Power of Money&lt;/h3>
&lt;p>Another of the things I&amp;rsquo;ve discovered is the tremendous amount of power a big sum of money can exert into coercing a career decision. It does not matter how many times I try to convince myself I don&amp;rsquo;t need more, and that money is not the most important thing; the reality is that it is pretty hard to reject a bigger sum for any reason. I always seem to want more and more.&lt;/p>
&lt;p>Being mostly lacking of money for the majority of my life, I can see how much I&amp;rsquo;ve got used to it. I remember my days of being a seminary student in Texas, where I would consider myself fortunate and grateful to have a place where to sleep and food to eat every day: nothing more. In my many visits to the north of Mexico, be for awesome and long youth camps or for building houses with &lt;em>Casas por Cristo&lt;/em>, I could see the most extreme poverty and need. I recall at some point I used to imagine my life living there forever, among those people in need, and be happy with the sole thought of being of some use for them. All that seems so far away now.&lt;/p>
&lt;p>No wonder why Christ said that the root of all evil is the love of money. The question is: Do I love money or I see it as a tool to some other ends? How do I know for sure? Some people say: &amp;ldquo;Give some to charity&amp;rdquo; as if you could somehow buy your peace of mind with was is really and effortless action.&lt;/p>
&lt;p>The problem I think is that with other sins is so easy to make the distinction: you can tell when you lie or when you steal. But, how can you tell when you love money? How does that look? How can you be sure that what you are deciding is totally free from the influence of material gain and accumulation? When do you have enough? These are things that have troubled my soul this week.&lt;/p>
&lt;p>One thing I for sure don&amp;rsquo;t want to do: I don&amp;rsquo;t want to sell my talent to the highest bidder. That&amp;rsquo;s what mercenaries do, and I&amp;rsquo;m not a mercenary. I&amp;rsquo;d like to believe I&amp;rsquo;m more of a soldier: I need to give myself for something I believe will make a difference in my life and in other people&amp;rsquo;s lives.&lt;/p>
&lt;h3 id="on-making-a-decision">On Making a Decision&lt;/h3>
&lt;p>I&amp;rsquo;ve been fortunate and humbled by the fact that out of this job hunting season pretty much every single process I started ended up in an offer or me pulling out because I did not believed I would fit in the company.&lt;/p>
&lt;p>Some of these companies are truly amazing and a dream come true in terms of the kind of place I would love to work at. It is a good situation to be in, but also a terrible one. When you have soo many good options, you can have a really hard time deciding. You can end up being completely paralyzed due to indecision.&lt;/p>
&lt;p>Some years ago I read a magnificent book by Kevin DeYoung called &lt;em>Just do Something&lt;/em>. The main thesis of the book is that rather than figure out what is &lt;em>the&lt;/em> right thing to do, we should pick &lt;em>a&lt;/em> thing to do, trust God will be with us, and persevere in it. The book is pretty much a challenge of the virus of indecision that our consumerism-based society has planted in our lives. We have so many options nowadays for everything (for the love of Pete, we have like 5 different streaming services!), and all of them are really good ones. But we seem incapable to choose anything: maybe due to fear, maybe due to some buyers regret or even due to second thoughts of the kind of &amp;ldquo;What if I would have pick this or that&amp;hellip;&amp;quot;.&lt;/p>
&lt;p>This issue hits harder when we finally decide something that does not conform to the unrealistic expectations we tried to second guess. We are easily displeased with our choice as soon as we find the first flaw in it. And this is because we spent so much time making a decision we thought was going to be the perfect one, that when the veil of idealism is torn apart and the flaws are exposed, is the hardest blow you can take. From there flows insecurity, doubts and all sorts of second thoughts.&lt;/p>
&lt;p>The reality is much harsher, though simpler: nothing is perfect. Your partner is not perfect, your job is not perfect, your team mates, your house, your church, your family, etc. Embrace imperfection, and persevere in it. I think this is the true path to a more resilient and realistic way of living.&lt;/p>
&lt;p>The lesson for me? There is no perfect job, and I can just go so far into forming and adequate picture of a company in a few calls and some technical tests. I&amp;rsquo;d rather pick something that is good enough and be prepared to be disappointed, resiliently rather than naively.&lt;/p>
&lt;h3 id="on-my-calling-in-this-world">On My Calling in This World&lt;/h3>
&lt;p>Lastly, I&amp;rsquo;ve been thinking about my calling in this world. Some of the companies I&amp;rsquo;m considering are doing really cool innovative techy stuff. Some of them are helping people get a mortgage for their dream home. Some of them are providing people tools to improve their quality of life. Some of them are helping kids with learning disabilities to actually learn.&lt;/p>
&lt;p>Even though a big factor in my decision is personal development, there is also the factor of feeling I&amp;rsquo;m making a difference in this world. Is of no use to develop myself personally if I do not do anything meaningful with all the thing&amp;rsquo;s I&amp;rsquo;ve learned.&lt;/p>
&lt;p>When God exiled Israel into Babylon, there was a tremendous mission he gave his defeated people:&lt;/p>
&lt;blockquote>
&lt;p>Seek the welfare of the city where I have sent you into exile, and pray to the Lord on its behalf, for in its welfare you will find your welfare.&lt;/p>
&lt;p>~ Jeremiah 29:7&lt;/p>
&lt;/blockquote>
&lt;p>The people of Israel were supposed to pray and work for the welfare of the nation that destroyed their homes, separated their families and killed their children. Just let that sink in for a minute&amp;hellip;&lt;/p>
&lt;p>The world sometimes is a bit hostile to christians, and we are not the most liked of the people in this time of history. Maybe with due reason, because we have been far from being what we are supposed to be. Nonetheless, it would be so easy for us to entrench into our own communities and fend for ourselves with no interest of what happens in the outside world. It is a very comfortable way to live.&lt;/p>
&lt;p>But like the Israel of those times, we have a mission. We ought to seek the welfare of this world and the people that live in it. We ought to work for it. We got to make a difference. And work is the means that God provided to serve other people, better their lives and make that difference. That&amp;rsquo;s why is no light decision.&lt;/p></content></item><item><title>When to use Interfaces</title><link>https://blog.mnavarro.dev/posts/when-to-use-interfaces/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/when-to-use-interfaces/</guid><description>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the 1.1.1 version of psr/container, had removed extends Throwable from the Psr/Container/ContainerExceptionInterface. Here is the related issue.
Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue.</description><content>&lt;p>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the &lt;code>1.1.1&lt;/code> version of &lt;code>psr/container&lt;/code>, had removed &lt;code>extends Throwable&lt;/code> from the &lt;code>Psr/Container/ContainerExceptionInterface&lt;/code>. &lt;a href="https://github.com/php-fig/container/issues/33">Here is the related issue&lt;/a>.&lt;/p>
&lt;p>Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue. This would have never happened if the PSR had been designed well from the ground up. For me, part of that bad designed involves the famous and wide-spread use of the so called &lt;strong>error marker interfaces&lt;/strong>.&lt;/p>
&lt;p>I&amp;rsquo;m writing this piece not because I want &lt;code>psr/container&lt;/code> to change, but because I want to raise awareness of this bad practice and eventually convince people writing new library code or refactoring existing library code to dump this approach.&lt;/p>
&lt;h2 id="the-value-of-interfaces">The Value of Interfaces&lt;/h2>
&lt;p>Interfaces are probably the building blocks that make object oriented programming one of the best programming paradigms out there. Interfaces are there to &lt;strong>abstract routines&lt;/strong> and allowing us to swap different implementations of those routines without even touching client code. That&amp;rsquo;s the power that makes modularity work in object oriented programming. You can replace entire subsystems hidden behind an interface without affecting anything.&lt;/p>
&lt;p>The PHP FIG has done tremendous effort on taking some of the most common routines or use cases in PHP and abstract them into interfaces that can be adopted by third party libraries. The purpose of this is to maximize interoperability: if two or more libraries share the same contract or interface, then it is trivial to swap one for another, or even better, building entire subsystems or libraries typing to the interface instead of an implementation means a higher adoption rate.&lt;/p>
&lt;h2 id="the-misuse-of-interfaces">The Misuse of Interfaces&lt;/h2>
&lt;p>Of course, interfaces can be used poorly. If an interface requires us to change client code upon switching implementation, then it becomes what is known as a &lt;em>leaky abstraction&lt;/em>. If you have to change client code when swapping implementations, then it means the interface leaks implementation details that client code should not be aware of. This is one of the most common issues interfaces have.&lt;/p>
&lt;p>Another problem, not so much considered, is making &lt;strong>everything&lt;/strong> an interface thinking that by doing so we are providing interoperability. Good object oriented practices dictate that interfaces &lt;strong>should&lt;/strong> only be used when (1) we are dealing with service classes and/or (2) we will have two or more possible implementations. By services classes I mean classes that &lt;strong>do&lt;/strong> something instead of &lt;strong>representing&lt;/strong> something (like value objects or models).&lt;/p>
&lt;p>For example, there is little to no value in using interfaces for a value object, unless there are two possible implementations of it. This is the case with the &lt;code>DateTimeInterface&lt;/code> in PHP. It has an interface because PHP has both a mutable and an immutable implementation. &lt;code>brick/date-time&lt;/code> is only immutable, so no interface is required.&lt;/p>
&lt;p>But other libraries don&amp;rsquo;t get this right. PSR-7 should have been a concrete implementation. This is because literally there is only one possible implementation of it due to the spec being so rigid and opinionated. This would have made adoption much more easier and widespread, eliminate the need for factories and bring so much more benefits to the table.&lt;/p>
&lt;p>FIG members usually answer to this by saying that &lt;a href="https://github.com/php-fig/container/issues/33#issuecomment-849548872">&amp;ldquo;FIG creates interfaces and recommendations&amp;rdquo;&lt;/a>, which is a terrible answer. The the mission of FIG is not making interfaces: the mission is to drive interoperability forward in the PHP ecosystem. They do that by means of interfaces and recommendations, but it is not and should not be the only way. &lt;a href="https://groups.google.com/g/php-fig/c/u2Nmovw_Rlc/m/l8Y_MhIEMgAJ">Some members understand this very well&lt;/a>, and others don&amp;rsquo;t.&lt;/p>
&lt;p>The &lt;em>interface only&lt;/em> approach leads to confusion and using interfaces wrongly. One of these uses is using them as error markers, because the assumption is that extending means implementing.And this leads us to the final issue.&lt;/p>
&lt;h2 id="the-fear-of-inheritance">The Fear of Inheritance&lt;/h2>
&lt;p>&lt;strong>Inheritance is evil&lt;/strong> is a common aphorism in Object Oriented world. And with right reason: inheritance couples things, makes changing code harder and could lead to an increase of unexpected breaking changes, because the &lt;em>not-so-private&lt;/em> api can still be used by other client code.&lt;/p>
&lt;p>We all know that the alternative is use of composition. And there is abundant literature, talks and courses that taught it well. No need to repeat common knowledge here.&lt;/p>
&lt;p>What I currently see now in the professional PHP ecosystem is not so much now an abuse of inheritance, but a fear of it. We have gone to the other end of the spectrum.&lt;/p>
&lt;p>Part of being a good software engineer is to be able to determine when to use some tool or pattern and when not, based on an informed decision and consideration of the possible future implications.&lt;/p>
&lt;p>Using concrete classes for errors in libraries that only contain interfaces is a perfectly reasonable approach. It must be taken with a grain of salt though: implementing custom logic in the exception class is discouraged, because is then when inheritance starts to become a potential issue. On the other side, using interfaces solves no problem at all. What it does is that it creates more work and/or potential confusion for implementors.&lt;/p>
&lt;p>So here it is, my rant. Oh, and one more thing. For the love of Pete, stop suffixing your interface names with the word &lt;code>Interface&lt;/code>. It is useless and repetitive. You don&amp;rsquo;t name your classes &lt;code>QueueClass&lt;/code>. Why do it with interfaces?&lt;/p></content></item><item><title>Why Go Interfaces Are Awesome</title><link>https://blog.mnavarro.dev/posts/why-go-interfaces-are-awesome/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/why-go-interfaces-are-awesome/</guid><description>After a couple of months of using Go commercially (I&amp;rsquo;ve been learning it from about a year now) I can finally have an understanding of the language and the reasoning behind some of the decisions the language authors made when drafting and designing the language.
One of these is interfaces.
Interfaces in Go are quite special, and they are by far my most loved feature of the language. It is not that I don&amp;rsquo;t know that other languages have interfaces, but they way Go implements them is truly unique and honestly really awesome.</description><content>&lt;p>After a couple of months of using Go commercially (I&amp;rsquo;ve been learning it from about a year now) I can finally have an understanding of the language and the reasoning behind some of the decisions the language authors made when drafting and designing the language.&lt;/p>
&lt;p>One of these is interfaces.&lt;/p>
&lt;p>Interfaces in Go are quite special, and they are by far my most loved feature of the language. It is not that I don&amp;rsquo;t know that other languages have interfaces, but they way Go implements them is truly unique and honestly really awesome.&lt;/p>
&lt;p>Here is why.&lt;/p>
&lt;h2 id="go-interfaces-are-behavioral-only">Go interfaces are behavioral-only&lt;/h2>
&lt;p>This is something some languages get right too, like PHP. But others like Java or Typescript allow you to define state (properties) in your interfaces too.&lt;/p>
&lt;p>Interfaces should always deal with behavior. Any state, property or any other thing there is really about an implementation detail and should not belong in the interface at all.&lt;/p>
&lt;p>This is how you define an interface in Go:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">money&lt;/span>
&lt;span style="color:#75715e">// A Converter takes a pointer to Money and returns another pointer to a
&lt;/span>&lt;span style="color:#75715e">// converted Money, or an error.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Converter&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Convert&lt;/span>(&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Money&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Money&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is nothing here about state nor any implementation detail. An interface is just a set of methods with a predefined signature.&lt;/p>
&lt;h2 id="go-interfaces-are-implicit">Go interfaces are implicit&lt;/h2>
&lt;p>Now, how do I make a type in Go implement the interface declared above? Simply, by providing that the type in question has the methods defined by the interface with the exact same signature.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">converter&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FixedConverter&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">rate&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>
}
&lt;span style="color:#75715e">// This FixedConverter implements the Converter interface.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FixedConverter&lt;/span>) &lt;span style="color:#a6e22e">Convert&lt;/span>(&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Money&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Money&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">amount&lt;/span>.&lt;span style="color:#a6e22e">Times&lt;/span>(&lt;span style="color:#a6e22e">rate&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that, a difference with other languages is that we never wrote any &lt;code>implements&lt;/code> nor we referenced he interface type &lt;code>Converter&lt;/code> inside our &lt;code>converter&lt;/code> package. Implementation in Go is &lt;strong>implicit&lt;/strong>. You don&amp;rsquo;t explicitly implement an interface: any type that has the method(s) of the interface implements that interface and becomes a Liskov-Substitutable value.&lt;/p>
&lt;h2 id="go-interfaces-are-zero-coupled">Go interfaces are zero-coupled&lt;/h2>
&lt;p>Now, due to this particular property of Go interfaces, we don&amp;rsquo;t need to have a reference to the package where the interface type is defined. Which means that we achieve a zero coupling between the package that uses the interface and the package that implements the interface. Not low coupling: zero.&lt;/p>
&lt;p>It&amp;rsquo;s common in other languages like Java or PHP, to have packages containing mostly if not exclusively interfaces. Think about JPA in Java or all the PSRs in PHP. The idea behind this practice is that you only have to couple to the contracts, but not to the implementations, which is a massive gain in decoupling. But in Go interfaces, you don&amp;rsquo;t even have to include the interface package. You can just create another interface in your own package with the same signature and
have your code use that.&lt;/p>
&lt;p>This means that libraries now are free to define their own apis and there is not much need for defining a common contract. The code that defines the contract is the code you write, and not some third party.&lt;/p>
&lt;p>This is very powerful.&lt;/p></content></item><item><title>Preventing tenant pollution in multitenant applications</title><link>https://blog.mnavarro.dev/posts/tenant-pollution/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/tenant-pollution/</guid><description>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.
One of those mistakes is what I&amp;rsquo;ve come to call tenant pollution. This means that many services or routines need the tenant as an argument in order to do something.</description><content>&lt;p>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.&lt;/p>
&lt;p>One of those mistakes is what I&amp;rsquo;ve come to call &lt;strong>tenant pollution&lt;/strong>. This means that many services or routines need the tenant as an argument in order to do something. This causes the tenant or the tenant unique identifier to be passed around many layers of the codebase. Basically, the tenant was &lt;strong>everywhere&lt;/strong> in the code.&lt;/p>
&lt;p>For example, this is a small part of our filesystem interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Filesystem&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path, &lt;span style="color:#a6e22e">StreamInterface&lt;/span> $contents)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">StreamInterface&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation contains a &lt;code>TenantProvider&lt;/code> that can use the tenant id to retrieve information about the tenant and use that information to determine the folder name where all the tenant files should be stored.&lt;/p>
&lt;p>All of our services are pretty much similar. Here is another example of the &lt;code>EmailFactory&lt;/code>, that creates email messages.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">EmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The approach is pretty much similar to the filesystem one. We pass the tenant so we can fetch their settings. With the settings, we will created custom branded emails for our tenant with their corporate logos and images.&lt;/p>
&lt;p>I have to say that when I was implementing all these services I sort of smelled this. Didn&amp;rsquo;t liked it, but I preferred to the alternative of shared internal service state. And there is nothing I am more against than that. It is terrible OOP.&lt;/p>
&lt;p>Many developers would do this. They will remove the tenant and pass it to a setter in the service.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setTenant&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, once you set the tenant state you could run into all sorts of undesired side effects. PHP does not make this very obvious, due to the fact that when executed in CGI mode all the state is regenerated across requests. But when you are using React PHP or spinning workers in Road Runner, that&amp;rsquo;s when it bites you. If you move to other languages you cannot and must not do this. PHP should not be the exception.&lt;/p>
&lt;p>But I sort of had a realization when working in the frontend with React and other frameworks. You see, state in frontend is everywhere. Everything is side-effecty and built around state. Frontend developers live with this reality all the time. It teaches them not to &lt;em>fear&lt;/em> state, but to tame it and manage it properly. This is the reason why React&amp;rsquo;s &lt;code>useEffect&lt;/code> hook exists.&lt;/p>
&lt;p>I asked myself. Okay, shared state stored in a service is bad but, is there a way in which I could control it, or tame it?&lt;/p>
&lt;p>I said, first, let&amp;rsquo;s acknowledge it&amp;rsquo;s existence in an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, how can unset that initialized state so I avoid side effects? Like &lt;code>useState&lt;/code> in React works: I will return a &lt;code>callable&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is how it would look in the email factory:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
};
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret is this: when executed, the callable will leave the class in it&amp;rsquo;s original state. Now, you can group a bunch of these services into a composite initializer and have a single place in your code where you will initialize all the tenant state, group the callables to unset the state, and then return them.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CompositeTenantState&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#e6db74">/** @param TenantState[] $states **/&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span> $states;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">TenantState&lt;/span> &lt;span style="color:#f92672">...&lt;/span>$states)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $states;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$unsets &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $state) {
$unsets[] &lt;span style="color:#f92672">=&lt;/span> $state&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">initialize&lt;/span>($tenant);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () &lt;span style="color:#66d9ef">use&lt;/span> ($unsets) {
&lt;span style="color:#66d9ef">foreach&lt;/span> ($unsets &lt;span style="color:#66d9ef">as&lt;/span> $unset) {
$unset();
}
};
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You implement &lt;code>TenantState&lt;/code> in every service that needs the tenant, and you pass it to this composite implementation.&lt;/p>
&lt;p>This approach is great. If you are using middleware, you can initialize all the tenant state early in the pipeline, and then, when the request has finished, you unset all the state you have set. It is useful also for centralizing initialization of many services at once, so if you need to run the same logic in a console command, you can set up all the services for a tenant and use them freely.&lt;/p>
&lt;p>I wish I could have done this since the beginning. Object graphs would be simpler and methods shorter. Well, I guess you never cease to learn.&lt;/p></content></item><item><title>Advice for junior project saboteurs</title><link>https://blog.mnavarro.dev/posts/advice-junior-project-saboteurs/</link><pubDate>Sun, 16 May 2021 18:08:00 +0000</pubDate><guid>https://blog.mnavarro.dev/posts/advice-junior-project-saboteurs/</guid><description>Over the years I have developed a passion for seeing software projects fail. I love the feeling of breakdown and despair they cause to everyone involved in them. Failed projects break teams, make companies loose money, disappoint clients and burn out the people engaged in them. They have a beautiful destructive potential.
If you love to to sabotage projects but don&amp;rsquo;t know how, don&amp;rsquo;t worry, I&amp;rsquo;m here to help. I&amp;rsquo;m going to walk you trough some of the techniques and methods I&amp;rsquo;ve developed over the years to sabotage my own projects.</description><content>&lt;p>Over the years I have developed a passion for seeing software projects fail. I love the feeling of breakdown and despair they cause to everyone involved in them. Failed projects break teams, make companies loose money, disappoint clients and burn out the people engaged in them. They have a beautiful destructive potential.&lt;/p>
&lt;p>If you love to to sabotage projects but don&amp;rsquo;t know how, don&amp;rsquo;t worry, I&amp;rsquo;m here to help. I&amp;rsquo;m going to walk you trough some of the techniques and methods I&amp;rsquo;ve developed over the years to sabotage my own projects. Think about this a a guide, crafted specially for you who are pursuing the joy of failure in your software project.&lt;/p>
&lt;p>There is really beautiful stuff in here. I&amp;rsquo;ve actually given cool names to every technique.&lt;/p>
&lt;p>Without further ado, here we go!&lt;/p>
&lt;h3 id="the-vaporware-sales-pitch">The Vaporware Sales Pitch&lt;/h3>
&lt;p>You know, developers are expensive. You most likely won&amp;rsquo;t be building something from the ground up and then sell it. No no. You want to make sure that, before you or your company invest money in building something to sell, you actually have buyers for it.&lt;/p>
&lt;p>This seems reasonable, but don&amp;rsquo;t be deceived. It has a beautiful potential to bring confusion and pain to your project. You see, the only thing that can convince someone to buy something they have not seen is the power of promises. And promises, my dear friend, are our best ally in the quest for a successful project failure: they are hardly remembered past the sales pitch, they are often unrealistic and extremely hard to keep. &amp;ldquo;Does/will the system do this?&amp;rdquo; asks the innocent buyer, &amp;ldquo;Sure it does! It can do that and more!&amp;rdquo; replies the salesman. &amp;ldquo;Can you do it in three months?&amp;quot;, &amp;ldquo;No problem at all!&amp;quot;.&lt;/p>
&lt;p>So, promise as much as you can of your imaginary something you don&amp;rsquo;t have. That is an essential first step. At the end of the day, you don&amp;rsquo;t have to keep the promise, you just have to make sure others keep them for you. Work smarter, not harder!&lt;/p>
&lt;h3 id="the-pointless-estimation">The Pointless Estimation&lt;/h3>
&lt;p>Once I asked a builder how long it will take him to build me a house with four bedrooms, 2 toilets, kitchen, living room and a nice garage; oh, and how much it will cost me. He asked me for some plans, and I told him I had none. Then he asked me a bunch of questions about sizes, materials, lands, styles, water pipes, etc. Man! I just wanted to know if how long and how much it will take him before planning anything. What a boring guy!&lt;/p>
&lt;p>Developers are not that way, they are nicer. If you push them enough they will give you an estimation. That is because they don&amp;rsquo;t have that &amp;ldquo;professional&amp;rdquo; sort of attitude in them. Maybe is because some of them didn&amp;rsquo;t even go to uni anyways.&lt;/p>
&lt;p>It does not matter if you have a clear scope of what is needed or not, they will give you their gut feeling eventually. If they resist, emphasize that you are demanding something really simple. &amp;ldquo;Look, I don&amp;rsquo;t want you to build it, I just want to know roughly how long. Is that too hard?&amp;quot;. Then, once you have your estimation, you can hold them accountable to it. It was their word, so they have to keep it.&lt;/p>
&lt;p>This creates the perfect atmosphere for your project to fail. As the deadline approaches and progress is not made at the expected pace, they will get scared. You should know that fear is the number one cause of failed projects: it causes everyone involved in the project to make rushed, uninformed decisions and to give up quality for compliance. Cultivate that feeling and you are guaranteed things will be done wrong, and pressure will ramp up to very high levels.&lt;/p>
&lt;h3 id="design-is-for-designers">Design is for Designers&lt;/h3>
&lt;p>Some developers insist in doing what they call &amp;ldquo;system design&amp;rdquo; work. Under no circumstances allow them to do that. It&amp;rsquo;s true, amateur project saboteurs will allow them doing this because it moves the project slower, and a project with an unmet deadline is a total failure, right? Well, you know, in my experience that has not been always the best move. You see, a software with good design, that works well, it can really please a client. It can please them so much that they might be willing to accept delay in some other items. It is always a bold move to bet on the unmet deadline as a project failure.&lt;/p>
&lt;p>The best alternative here is that they just focus on writing code, and not thinking about the system. Actually, a poorly designed system, even though is faster to achieve, will slow them down eventually as the unforeseen things come to happen. It is crucial that they don&amp;rsquo;t discover the unforeseen by asking questions, researching or trying to anticipate. Keep the meetings short and you will be able to cut those conversations to a minimum. If they get really annoying, you can always play the KISS card. Most developers don&amp;rsquo;t know the difference between simplicity and convenience anyway.&lt;/p>
&lt;p>Convince them that design is for designers, and that they are just developers.&lt;/p>
&lt;h3 id="chinese-whispers">Chinese Whispers&lt;/h3>
&lt;p>If fear is the number one cause of failed projects, then poor communication is the number zero! If there is anything you would take from this little article, take this: don&amp;rsquo;t let people communicate! You&amp;rsquo;ll have a guaranteed failure!&lt;/p>
&lt;p>Of course, what I mean here is not &amp;ldquo;no communication at all&amp;rdquo;. You would be easily caught in your efforts to make the project fail if that were the case. No no, what you need here is to provide an illusion of communication, like when playing chinese whispers. Set one or two meetings a week, but just between the development team. Then arrange for someone else to be the communication funnel between the developers and the stakeholders. It&amp;rsquo;s impossible that that person will be able to keep up with the flow of information coming from each side. Something will be missed, or misrepresented, or misinterpreted. That&amp;rsquo;s what we want!&lt;/p>
&lt;p>Here is the trick really. Under no circumstances developers and stakeholders should be ever in the same meeting or in close communication. It is too dangerous, because understanding between the two groups could develop and that could make the project a success.&lt;/p>
&lt;p>This is by far one of the most powerful strategies to make your project fail. Developers can have their meetings about their technical stuff, which in turn will distract them of the heart of business problem to solve. This reinforces the fact in their heads that their job is purely technical problem solving. Under no circumstances they must believe that their job is of an empathic nature: understanding the users and their needs. No no, that will lead them to do their job well.&lt;/p>
&lt;p>You shouldn&amp;rsquo;t have issues doing this, as most developers are socially awkward: they don&amp;rsquo;t really like people nor interacting with clients. Use those developers to reinforce to the more &amp;ldquo;social&amp;rdquo; ones the idea that that is not their job to do that.&lt;/p>
&lt;h3 id="the-counterfeit-agile">The Counterfeit Agile&lt;/h3>
&lt;p>This is very related to the previous tactic, but deserves a topic of it&amp;rsquo;s own. You must make sure developers are &lt;em>doing&lt;/em> Agile and not &lt;em>being&lt;/em> agile. There is a difference. You see, agile is an adjective, not a noun.&lt;/p>
&lt;p>As long as they think that agile means using Jira, estimate using story points and divide work in sprints of some duration, you&amp;rsquo;ll be fine. They will think their job as developers is reduced to just closing tickets and they will never go beyond that.&lt;/p>
&lt;p>You want them to eat and breathe the commercial Agile, that thing some companies branded and sold as a methodology for project management. They must never know that agile is a set of values and principles. They must believe is methodology. If they discover the real meaning of it, they will want to apply it, and that could be the success of your project. Don&amp;rsquo;t let that happen!&lt;/p>
&lt;p>Actually, one effective thing you can do is talk to your ISP and tell them to block &lt;a href="https://agilemanifesto.org">this website&lt;/a> from the company internet. Again, they must not read the principles, because they are in direct contradiction with all the advice that I&amp;rsquo;ve been giving you here.&lt;/p>
&lt;p>Actually, you might want to block &lt;a href="https://www.youtube.com/watch?v=a-BOSpxYJ9M">this video too&lt;/a>. Just in case.&lt;/p>
&lt;p>And if someone ever want to discuss whether we are doing real agile or not, shut down the conversation immediately by saying &amp;ldquo;We do sprints, we estimate in story points and we use Jira. Of course we are doing Agile!&amp;rdquo; Don&amp;rsquo;t let them reply and mock them for asking such a silly thing. No one will dare to ask the question ever again.&lt;/p>
&lt;h3 id="the-vague-jira-card">The Vague Jira Card&lt;/h3>
&lt;p>So, since we are doing counterfeit agile, requirements have to come from somewhere, right? Well, we put those in Jira, of course. But you don&amp;rsquo;t want to put requirements in Jira in a good way. Jira might be tricky software, but it can certainly organize a team if used correctly. Here&amp;rsquo;s a pro tip: use Jira as a mere placeholder of statements, or even better, link it with confluence and spill over the two of them some vague information. Double effect: now apart from understanding vague stuff, they need to figure out where it is!&lt;/p>
&lt;p>When specifying the work to be done, never explain the &lt;em>why&lt;/em> or &lt;em>how&lt;/em>. No no, that gives the developer a margin to think. Just say &lt;em>what&lt;/em> needs to be done and in the most vague way possible. &amp;ldquo;The client wants this&amp;rdquo; followed by screenshots of other systems is a great way to waste precious development time for guessing what it needs to be done.&lt;/p>
&lt;p>I&amp;rsquo;ve mentioned before that developers should not think. Let me rephrase that: they should not think about the bigger picture of the problem they are trying to solve, or about system design, or about the users and their pains. That&amp;rsquo;s out of the question. But the longer you can keep them puzzled on the question of what is it that the client really wants with a certain requirement or feature, that&amp;rsquo;s a win right there.&lt;/p>
&lt;p>They will loose time trying to guess, and when they give up they will go to our fiend the funnel, and they surely will miss some precious info on the back and forth, which will guarantee things are done wrong or simply not done at all. Have you started to see how every technique plays so well with each other?&lt;/p>
&lt;h3 id="the-official-technical-stack">The Official Technical Stack&lt;/h3>
&lt;p>Some projects are really complex in nature, so they might need proper tooling in order to effectively achieve the desired results. Developers really like to come up from time to time with new and better tools to add to the stack. It is crucial to project failure that they do not use the right tool for the job.&lt;/p>
&lt;p>Instead of a proper queue system like SQS, Rabbit or Kafka, have them implement a queue in Postgres. Instead of a search engine like Redis Search or Elastic, have them index things on a SQL table. Instead of a graph database like Neo4j, have them implement a materialized path or a nested set. Event Sourcing database? Use MySQL with triggers!&lt;/p>
&lt;p>Even better, if they use a framework chances are some no-brainer packages for all these things are already available. Have them use them. They will prove inflexible at some point, specially if they are poorly developed, and then is when things get sweet for trouble.&lt;/p>
&lt;p>Here, most developers will be your allies. They are strange creatures indeed! They are thought almost every day that there are no silver bullets, but they would willingly use the same tool for different things just for the sake of convenience. They will disguise this convenience as simplicity: use this in your favor.&lt;/p>
&lt;p>There will be some who will try to push for these tools. Don&amp;rsquo;t let them. Explain that the company has a technical stack that is already defined.&lt;/p>
&lt;p>When the time comes to scale, a poorly chosen tool can really make things difficult on a project. This does not always happen, but is a good card to keep in your arsenal.&lt;/p>
&lt;hr>
&lt;p>There are so many other things I can think of for making a project fail, but I&amp;rsquo;m short on time. Maybe I will compile them into another article some other time. For know, this should give you enough material to wreak havoc.&lt;/p>
&lt;p>Happy project failing!&lt;/p></content></item><item><title>Taming Incidental Complexity in Software Development</title><link>https://blog.mnavarro.dev/posts/taming-incidental-complexity/</link><pubDate>Sat, 10 Apr 2021 17:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/taming-incidental-complexity/</guid><description>Software development is a complex trade. Layers of abstraction, tooling, patterns, tradeoffs, dependencies, people, are some of the reasons behind hard things in Software development. But there is also a big source of complexity: ourselves and our poor choices.
Incidental complexity is the technical term for this kind of complexity. It is defined as anything in software that is hard but really does not need to be. It&amp;rsquo;s when we shoot ourselves in the foot and make our lives harder for no reason.</description><content>&lt;p>Software development is a complex trade. Layers of abstraction, tooling, patterns,
tradeoffs, dependencies, people, are some of the reasons behind hard things in
Software development. But there is also a big source of complexity: ourselves
and our poor choices.&lt;/p>
&lt;p>Incidental complexity is the technical term for this kind of complexity. It is
defined as anything in software that is hard but really does not need to be. It&amp;rsquo;s
when we shoot ourselves in the foot and make our lives harder for no reason.&lt;/p>
&lt;p>Almost every single project or company out there has some degree of incidental
complexity in it. I&amp;rsquo;ve seen plenty of it myself and also caused a good deal of it too.
I&amp;rsquo;ve analyzed it and try to understand its sources by talking to people, asking
questions and seeking to understand the historical developments behind a system
or company.&lt;/p>
&lt;p>After some study, I have come up with some suggestions to avoid shooting ourselves
in the foot regarding making things complex.&lt;/p>
&lt;h2 id="avoid-coupling">Avoid Coupling&lt;/h2>
&lt;p>Almost every single mess of a system finds itself in that state of messyness due
to coupling. Coupling, in my opinion, is the most dangerous thing in Software
Development. It&amp;rsquo;s like a camouflaged predator waiting to strike his prey: you
never see it until is too late.&lt;/p>
&lt;p>Part of the reason why we don&amp;rsquo;t see it, is because coupling is not a bad thing in
and of itself. What I mean by this is that coupling two things together is not a
sufficient requirement for disaster. It is a necessary one, of course, but not
enough by itself. The missing ingredient in the mix is &lt;em>change&lt;/em>. Coupling
only shows his nasty face when one of the things that have been coupled changes.&lt;/p>
&lt;p>This makes identifying coupling something rather tricky, and you don&amp;rsquo;t usually
realize you are making a mistake until something is hard to change. And it may be
that even when that happens, you rationalize it by blaming it to some other external
factor (&amp;ldquo;Oh the client keeps changing the requirements&amp;rdquo;). But truth is that we
have brought that upon ourselves by making our software hard to change.&lt;/p>
&lt;p>When you are building something, at all times you need to ask yourself the
question: &amp;ldquo;Is this coupled to something?&amp;rdquo; and if it is, &amp;ldquo;Is this thing likely to
change?&amp;quot;, and it if is, &amp;ldquo;How costly would it be to change it?&amp;rdquo; Those are some
of the most important questions you can ask yourself when you are building something.&lt;/p>
&lt;p>Wether you couple your application to a particular database engine (I&amp;rsquo;m talking
of you, Active Record), or couple your code by using inheritance instead of
composition, or couple your suite of microservices using REST instead of an
event driven approach, you are going to have a hard time when things have to change.
And if things change, you will pay the price of that change. There is no escape.&lt;/p>
&lt;p>Systems do not need to be coupled. It is mostly our naiveness and inexperience
that causes a system to be a tangled, hard to change mess. Keep an eye on what
is coupled to what and have measures in place to remedy or mitigate the impact
of a change.&lt;/p>
&lt;h2 id="avoid-over-engineering">Avoid Over-Engineering&lt;/h2>
&lt;p>Over engineering is the habit of solving a problem with more engineering than
necessary to solve it. In other words, when a simpler approach would have been
possible to solve a problem but instead a more complex way is preferred.&lt;/p>
&lt;p>This is particularly true of code generation tools. There is a lot of value in
generating boilerplate code, don&amp;rsquo;t get me wrong. But this is usually what an IDE
is for. In my experience, there have been very few times in which I have felt
the burden of writing a class by hand. True, it would have been nice to been
able to autogenerate code from a spec or something in that moment, but that feeling
quickly evaporates when I remember that autogenerated code is often opinionated,
ugly and outdated.&lt;/p>
&lt;p>As a side note, I think that abstraction over code generation is a better
approach to solve the problem of writing less code. Metaprogramming is an excellent
approach for these kinds of problems. Although one can argue that writing code
that leverages metaprogramming is inherently complex, the end result ends
up being a simpler api surface. So yeah, it is hard to do, but easy to use! I would
say that is exactly the goal. Code generation tooling is hard to write, and not
as easy to use (both the tool to generate the code and the generated code itself).&lt;/p>
&lt;p>But, there is a world of difference in considering to autogenerate code for a
massive api than when you have to do it for a really small one. I still remember
the frustration I experienced when I was forced to setup autogeneration for all
the models of an integration I was building, even when many of them had two fields
at most! It took me more time to setup all the autogeneration fluff than it would
have taken me to write the models by hand. But well, the policy in that project
was to do it that way.&lt;/p>
&lt;p>When there is a simpler way of achieving the same end result, go that route. Don&amp;rsquo;t
try to get clever just for the sake of it. Yeah, sounds pretty cool to write your
own routing library for this project, but, do you really need to do that?&lt;/p>
&lt;p>Testing is another source of over-engineering. People build these stateful mock
servers because apparently they need to test third party apis using the HTTP protocol, as
if someone would not have tested that already. In memory mocks are much simpler
and don&amp;rsquo;t cause you the pain of setting up extra dependencies every time you want
to test your application.&lt;/p>
&lt;p>Simplicity is a rare jewel these days, not just because it is hard to find, but because
sometimes it disguises itself as its shallow cousin: convenience. But simplicity tends
to be found there where pragmatism trumps dogmatism. Make sure you are focused
on practical stuff when solving a problem, and no over theorizing it and trying
to justify complex approaches based on remote possibilities.&lt;/p>
&lt;h2 id="avoid-centralizing">Avoid Centralizing&lt;/h2>
&lt;p>Organizations and systems evolve over time, and grow more and more complex. This
is natural and expected. What is not natural or expected is that, sometimes,
we want to tame that growing complexity (that is, make it easier to manage) by
use some form of centralized solution.&lt;/p>
&lt;p>The problem with centralized solutions, especially in distributed systems or
companies, is that by claiming a global benefit, they cause specific harm.
Centralized solutions remove autonomy and create friction. They operate by
removing the control of something from the subsystem or department where its
function is defined, takes place and evolves, toward some central place that
blurs the particulars. This dramatically impacts further development of the
thing of which control has ben surrendered.&lt;/p>
&lt;p>Take software documentation, for instance. Companies choose to centralize
documentation in a single place (a company Wiki or something else) usually
do so by building a narrative of the benefit of having all knowledged in a
cental place of convenient &lt;em>access&lt;/em>, but at the cost of affecting the &lt;em>writing&lt;/em>
of the documentation itself. Often times, due to the distance between the
owner of the documentation (the code repository) and the central Wiki, these former
ends up being completely outdated and seldom used.&lt;/p>
&lt;p>There are other ways in which centralizing is extremely dangerous. The central
part becomes critical and a potential single point of failure or trouble. This
happens with a central database used by many microservices services, or a central
service where every business action has to go check something before anything
else happens (think of centralized access control platforms).&lt;/p>
&lt;p>I think that as long as this central thing is disposable or invisible, then it
is a good central thing. In other words, when the central thing is not the source
of truth because the truth originated somewhere else. Think about git, for instance.
It has a central repository that everyone uses to coordinate, but the changes
and the work happen in your local machine and then you push them, causing that
at least one person has always an up to date copy of what is in the central
repository.&lt;/p>
&lt;p>Same thing with documentation. If we need a place to solve the problem of
information visibility, then let&amp;rsquo;s solve only that problem. What prevents us
from having an automated process push the documentation of a repository
to this central wiki, instead of writing it in a separate place? The problem is not
the writing of the documentation, so why that has to change? The real problem
is the visibility of it: let&amp;rsquo;s make it visible, without removing ownership (More
about this in the next topic).&lt;/p>
&lt;p>When centralizing something, make it work as a repository. Not as the source
of truth (this is, change), but as the place where all the changes made elsewhere
go. Every technology that has any sort of centralized repository works this way:
docker, composer, npm, git. Changes happen next to their source, and then they
are published for the rest of the world.&lt;/p>
&lt;p>If you make the repository the place where things change, then you are going to
have a hard time keeping it in sync with the actual thing that changes. Synching
is an added pain that you don&amp;rsquo;t need to bear. It is incidental complexity.&lt;/p>
&lt;h2 id="avoid-solving-pseudo-problems">Avoid Solving Pseudo-Problems&lt;/h2>
&lt;p>I call pseudo-problems to problems that are not clearly stated. You see, most of
what people call problems are just a preferred approach over a small friction that
usually touches the real problem but it does not address it completely.&lt;/p>
&lt;p>Take this centralized wiki as an example. If the problem is access to the
information, then solve just that problem. If you force everyone to write documentation
far from the system that documents, it&amp;rsquo;s going to cause another problem.&lt;/p>
&lt;p>Problems need to be clearly stated before solved. Otherwise you might be solving
the wrong problem, or even worse, apparently solving the problem but causing
others in the process.&lt;/p>
&lt;p>This is too familiar a story, and it is such a painful one. An organization
has a monolith that is coupled, hard to change, buggy, hard to make sense of, all
the possible bad things that can happen with a monolithic system. Then someone
comes and say &amp;ldquo;We need to split this into microservices&amp;rdquo;, and then they proceed
to break the components of such monolith into different REST apis. So, say that
it was an e-commerce application. Now we have an orders service, a customers service,
a fulfillment service, a payment service, and so on.&lt;/p>
&lt;p>Nice! Every microservice responsibility is now clearly delineated. I would say
that is a win, right?&lt;/p>
&lt;p>Well, if you think about it, maybe not. What was the initial problem? Was that
the responsibilities of the monolith were not clearly defined? Maybe. Was it
the main problem? I don&amp;rsquo;t think so.&lt;/p>
&lt;p>When software is hard to change, it is usually due to coupling. Back to point one
here. Did they solved the coupling? I don&amp;rsquo;t think so. Now services are coupled via
a network protocol (and not an in-memory routine), changes are less transparent (different
teams work on different services now) and changing one service would impact the
other in ways that are harder to spot (now we rely more in logging). I would
argue that this left them in a worse place, as managing changes across teams and
distributed deployable units is harder than in a traditional in-memory application.&lt;/p>
&lt;p>The solution should have really been refactoring the initial application slowly
to take care of the technical debt that made it hard to change and reason about.&lt;/p>
&lt;p>This happens way too often, and with many things. People throw tech at problems, not
engineering. As a result, they think they solved a problem when what they really
did is just go around it and create some more in the process.&lt;/p>
&lt;p>The only way I&amp;rsquo;ve found to fight this insanity is to refuse to solve a problem
until it is clearly stated and demonstrated it is a problem and why. Only then
a reasonable discussion about potential solutions and their benefits and
drawbacks can happen. Solving the wrong problem is one of the worst sources
of incidental complexity.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Well there you have it. Another of those rants. Hopefully it saves you
a trouble or two.&lt;/p></content></item><item><title>Implementing count endpoints using semantic HTTP</title><link>https://blog.mnavarro.dev/posts/semantic-http-count-endpoints/</link><pubDate>Thu, 15 Oct 2020 01:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/semantic-http-count-endpoints/</guid><description>The HTTP protocol, the REST architectural pattern and API design are amongst my favorite topics in software development. I closely follow the latest RFCs, technologies and standards built over these, and over the years I&amp;rsquo;ve learned how not to repeat the mistakes of the past by improving the way I used to to things.
Count functionality implemented in a poor way is one of those mistakes. Back in the day I would have my api resources implement a count endpoint like this: GET /some-resource/count.</description><content>&lt;p>The HTTP protocol, the REST architectural pattern and API design are amongst my favorite topics in software development. I closely follow the latest RFCs, technologies and standards built over these, and over the years I&amp;rsquo;ve learned how not to repeat the mistakes of the past by improving the way I used to to things.&lt;/p>
&lt;p>Count functionality implemented in a poor way is one of those mistakes. Back in the day I would have my api resources implement a count endpoint like this: &lt;code>GET /some-resource/count&lt;/code>. This would return a json along these lines:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;count&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3253&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this approach is manyfold. I&amp;rsquo;ll point the issues and explain why this is not a good idea, and then I will propose an alternative approach.&lt;/p>
&lt;h2 id="its-harder-to-maintain">It&amp;rsquo;s Harder to Maintain&lt;/h2>
&lt;p>If you define count as an endpoint, you have to implement the handler for that endpoint explicitly for every resource. (This unless you are creating your apis with schema definitions and code generation tools).&lt;/p>
&lt;p>In PHP, would look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">nested&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/users&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($router) {
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">indexUsers&lt;/span>());
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/count&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">countUsers&lt;/span>());
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/:id&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">showUser&lt;/span>())
});
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">nested&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/likes&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($router) {
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">indexLikes&lt;/span>());
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/count&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">countLikes&lt;/span>());
$router&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/:id&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">showLike&lt;/span>())
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another downside of this, is that due to the way routing engines work, you need to define the &lt;code>/count&lt;/code> endpoint before the &lt;code>/:id&lt;/code>. Otherwise &lt;code>count&lt;/code> will match as a resource of users, probably giving you a 404. I&amp;rsquo;ve seen routing bugs like this more times that I would like to. Junior developers can spend hours on a bug like this trying to figure our why their routes don&amp;rsquo;t match.&lt;/p>
&lt;p>So for every time you implement a new resource, you must remember and implement their corresponding count also.&lt;/p>
&lt;h2 id="tends-to-duplication">Tends to duplication&lt;/h2>
&lt;p>If you are a good api developer, then you are building filtering logic using query params over your collection endpoint. In other words, you are doing &lt;code>GET /users?status=inactive&amp;amp;role=admin&lt;/code> instead of &lt;code>GET/users-inactive-and-admin&lt;/code>. The main benefit of this is composability, and also mental sanity. Query params can be composed together to form collections representations with different rules and filters, instead of binding a hard-coded, uncomposable route to yet another handler.&lt;/p>
&lt;p>Chances are you want your count endpoints to use that filtering logic too. If you are not a careful developer, you might be temped to just copy and paste the code that handles the query params into the count methods, making it harder to maintain. Kudos to you if you thought of extracting that to a separate method/service, but I would say that while you ara avoiding duplication, you are missing the larger picture: maybe the duplication is an indication that those two things should not be separated in the first place.&lt;/p>
&lt;h2 id="breaks-rest">Breaks REST&lt;/h2>
&lt;p>Even though is perfectly possible to implement count in the aforementioned way, that approach does not follow the REST standard. REST focuses on operations over resources. Resources can be represented inside a collection or as a single unit, but that representation must be consistent. Traditionally, this has been implemented in apis as &lt;code>GET /resource&lt;/code> for collections and &lt;code>GET /resource/identifier&lt;/code> for a single resource. &lt;code>GET /resource/count&lt;/code> gives the impression of a single resource with the identifier &lt;code>count&lt;/code>. But this &amp;ldquo;resource&amp;rdquo; is special: it does not return the same representation: just a number.&lt;/p>
&lt;p>&lt;strong>The truth is that a count is metadata about a collection of resources&lt;/strong>, so it should not be implemented at the path that traditionally has been used to define single resources. We have see that this can confuse the routing engine, but also a client of your api.&lt;/p>
&lt;h2 id="a-better-approach">A Better Approach&lt;/h2>
&lt;p>Let&amp;rsquo;s remember our use case. We want to count resources in a collection. Sometimes we would use filters to count them and we want the count to change on those filters. But we don&amp;rsquo;t want to use another endpoint because it&amp;rsquo;s cumbersome and leads to confusion. As we said, count is metadata of a collection so, why not put the count in the collection endpoint? Mmm&amp;hellip;will something like this work?&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;meta&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;count&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">13532&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>
],
&lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: [
&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is better, but not ideal. What happens if I just need the count? How do I get rid of the unnecessary json rendering of the representation is that&amp;rsquo;s the case?&lt;/p>
&lt;p>Well, turns that we a bit of tweaking and some semantic HTTP we can do better. HTTP has an obscure verb that can help us here, a verb to return just the headers of a request, but not the body: &lt;strong>the &lt;code>HEAD&lt;/code> verb&lt;/strong>.&lt;/p>
&lt;p>By HTTP spec, &lt;code>HEAD&lt;/code> should not have a return body but must have the exact same headers than the normal &lt;code>GET&lt;/code> request. You would be happy to know that the most popular routing libraries match &lt;code>HEAD&lt;/code> requests to your &lt;code>GET&lt;/code> requests automatically for you. This is done in the &lt;a href="https://stackoverflow.com/questions/22118598/laravel-routes-gethead">Laravel Router&lt;/a> for example.&lt;/p>
&lt;p>So, what if we move the &lt;code>meta&lt;/code> object we defined in the json to the response headers? Is not that the purpose of the headers in HTTP, to serve as metadata? So, we can have a response like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-http" data-lang="http">&lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#a6e22e">OK&lt;/span>
Date&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Sun, 10 Oct 2010 23:26:07 GMT&lt;/span>
Server&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Apache/2.2.8 (Ubuntu) mod_ssl/2.2.8 OpenSSL/0.9.8g&lt;/span>
Content-Type&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">application/json&lt;/span>
X-Total-Count&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">23432&lt;/span>
[
{
&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;some-id&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;name: &amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">some-name&amp;#34;&lt;/span>
},
{
&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We moved the array to the top level and move the metadata to the headers. Now, if we want just the count, we can simply do &lt;code>HEAD /users&lt;/code> and return just the headers, but not build a json body when the request method is &lt;code>HEAD&lt;/code>. You save a database call and a lot of transformation logic, and you still get your count. And you can use your regular query params to filter data over that endpoint.&lt;/p>
&lt;h2 id="extra-advice">Extra Advice&lt;/h2>
&lt;p>I like to separate my actual resources from the fact they are a paginatable and countable collection of things. So, I usually split my resource logic with my collection handling logic.&lt;/p>
&lt;p>My collection handling logic just uses a simple interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Collection&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $offset, &lt;span style="color:#a6e22e">int&lt;/span> $size)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Collection&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">iterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What is under this I don&amp;rsquo;t really care much and long as it gives me a total count, and I can slice it for pagination purposes and filter over it.&lt;/p>
&lt;p>Then, I have a single collection handler that, when passed a &lt;code>Collection&lt;/code> interface, is capable of counting, paginating and rendering the body using the iterator if necessary.&lt;/p>
&lt;hr>
&lt;p>Hope you liked this article and that you find it useful.&lt;/p></content></item><item><title>Namespaced Taxonomy Syndrome</title><link>https://blog.mnavarro.dev/posts/namespaced-taxonomy-sindrome/</link><pubDate>Mon, 20 Jul 2020 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/namespaced-taxonomy-sindrome/</guid><description>The Discovery of a Syndrome The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).
I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;.</description><content>&lt;h2 id="the-discovery-of-a-syndrome">The Discovery of a Syndrome&lt;/h2>
&lt;p>The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).&lt;/p>
&lt;p>I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;. I thought I was setting up myself for another OOP basher and functional lover, but then it realized it was 2012: functional was not trendy yet. So I was interested in what he had to say.&lt;/p>
&lt;p>It was a brilliant talk. I didn&amp;rsquo;t really agree much with his &amp;ldquo;less lines of code is better&amp;rdquo; philosophy. But he had some excellent points about the misuse (overuse) of some OOP features, specifically about namespaces and classes. But the part that struck me was &lt;a href="https://youtu.be/o9pEzgHorH0?t=567">something he quoted about nine minutes into the talk&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Namespaces are for preventing name collisions, not for creating taxonomies.&lt;/p>
&lt;p>~ Jack Diederich&lt;/p>
&lt;/blockquote>
&lt;p>That really blew my mind. I felt guilty. I have absolutely misused namespaces basically since I started in OOP. I&amp;rsquo;ve done the &lt;code>use MuffinMail\MuffinHash\MuffinHash&lt;/code> thing. What he is describing is what I&amp;rsquo;ve decided to call &lt;strong>Namespaced Taxonomy Syndrome&lt;/strong>. Every single PHP project does this thing. It&amp;rsquo;s everywhere.&lt;/p>
&lt;p>Take this almost randomly picked example from the &lt;code>Illuminate&lt;/code> namespace in Laravel:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">use Illuminate\Broadcasting\Broadcasters\Broadcaster;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When did we learn to do this? When did we all implicitly agree that doing namespaces this way is somehow the state of the art? Why not go with &lt;code>Illuminate\Broadcaster&lt;/code>? Is there any other &lt;code>Broadcaster&lt;/code> inside the &lt;code>Illuminate&lt;/code> namespace that we can collide with? I think I have some possible explanations.&lt;/p>
&lt;p>Taxonomies are useful for organizing. That is the reason we put classes in different folders: to keep them organized. It is the reason why Laravel (and everyone else!) does this. There is a folder called &lt;code>Broadcasting&lt;/code>, that contains a folder called &lt;code>Broadcasters&lt;/code> that contains a PHP file that defines the interface &lt;code>Broadcaster&lt;/code>. Laravel developers need that structure so that code stays separate from other unrelated code. We need the &lt;code>Broadcasters&lt;/code> folder to know where to find them.&lt;/p>
&lt;p>But, by using taxonomies (folders) to organize our code, we silently fell into a trap and we embraced a very wrong assumption: &lt;strong>the assumption that our folder structure must mirror our namespace structure&lt;/strong>. This is probably due to the way the &lt;a href="https://www.php-fig.org/psr/psr-4/">PSR-4 Autoloading Standard&lt;/a> baked into Composer is commonly used, usually pointing to a single directory and working from there.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, when we use composer psr-4 autoload like this we will inevitably use namespaces as taxonomies since we need to keep our code organized. So, how can we solve this? How can we keep things separated still and yet simplify our namespace use?&lt;/p>
&lt;h2 id="a-better-approach">A Better Approach&lt;/h2>
&lt;p>Let&amp;rsquo;s take the &lt;code>Illuminate&lt;/code> example again. Imagine they have the following directory structure now:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">âââ src
Â Â  âââ broadcasters
Â Â  âÂ Â  âââ Broadcaster.php Illuminate\Broadcaster
Â Â âÂ Â  âââ OtherBroadcaster.php Illuminate\OtherBroadcaster
Â Â  âÂ Â  âââ LogBroadcaster.php Illuminate\LogBroadcaster
Â Â  âââ other-thing
Â Â Â  Â  âââ SomeInterface.php Illuminate\SomeInterface
Â Â  Â Â  âââ ImplementationOne.php Illuminate\ImplementationOne
Â Â  Â Â  âââ ImplementationTwo.php Illuminate\ImplementationTwo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, we still have all related code in separate folders to keep things organized. This is the taxonomy part. But notice that the Fully Qualified Class Names of every of these files are all of them direct children of the &lt;code>Illuminate&lt;/code> namespace. Basically, they are all in the same namespace and that&amp;rsquo;s okay, because the aim of namespaces is to prevent name collisions. There will be no other &lt;code>Illuminate\Broadcaster&lt;/code> and if there is one, you either taxonomize it in the name itself, or then you can create another namespace to contain it. But not before that.&lt;/p>
&lt;p>So, how do we make this file structure work with composer? There are mainly two ways:&lt;/p>
&lt;p>The first way is to pass an array of paths to the PSR-4 autoloaded namespace, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;Illuminate\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/broadcasters&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What you are saying here to composer is that all of these folders are inside the same namespace. Cool, isn&amp;rsquo;t?
This way, you get the double benefit. First, your code is still organized in different folders to help you reason about it and keep things organized for development. Second, our namespaces fulfil the purpose of avoiding collisions, and for that reason they are easier to use and simpler to reason about.&lt;/p>
&lt;p>The second way of doing it is simpler. It does not require to specify every folder. Instead you can just tell composer to build you a &lt;em>classmap&lt;/em> scanning every single one of your source files.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;classmap&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can create as many folders as you want in src and organize them and moving them at will. The only thing that matters is that all of them have the same namespace declaration.&lt;/p>
&lt;p>If you are a maintainer of a set of packages that share a common namespace, putting all of them in the same namespace reduces the number of imports you need to write. After all, is your namespace. It does make sense that your code lives under the same one. It is also easier for library users to use your code and write the proper inputs.&lt;/p>
&lt;p>I&amp;rsquo;m currently refactoring all my packages to do this. It is a huge breaking change, and maybe popular libraries will most definitely not do this (a very wise choice). But since none of my libraries is extremely popular, I can probably introduce major BC breaks on any of my libraries next major version.&lt;/p>
&lt;p>For instance, I&amp;rsquo;m developing a new Http Framework for PHP powered by a set of components. I&amp;rsquo;m putting everything http related under &lt;code>FrameworkName\Http&lt;/code> and everything else under &lt;code>FrameworkName\Support&lt;/code>. (And even that is using taxonomies a lot!).&lt;/p>
&lt;h2 id="a-note-on-the-test-namespace">A Note on the Test Namespace&lt;/h2>
&lt;p>This works really well for testing too. You can put your tests into the same namespace than your source code, but under the &lt;code>autoload-dev&lt;/code> key in composer. Why is there another namespace for testing? There is no reason to do so. Don&amp;rsquo;t be afraid of:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/some-other-thing&amp;#34;&lt;/span>, ]
}
},
&lt;span style="color:#f92672">&amp;#34;autoload-dev&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;tests/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tests/some-other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-note-on-reorganizing-and-refactoring">A Note on Reorganizing and Refactoring&lt;/h2>
&lt;p>Projects grow, and usually the initial folder structure becomes messy, and sometimes we need to move stuff around or rename it to make better sense of it. We all have gone trough that. By putting everything under the same namespace, reorganizing code becomes a matter of creating folders and moving files. Namespaces and references need not to be touched, which gives you a lot of freedom to choose the directory structure that suits you the better.&lt;/p>
&lt;h2 id="a-note-on-taxonomies-in-ddd-with-hexagonal-architecture">A Note on Taxonomies in DDD with Hexagonal Architecture&lt;/h2>
&lt;p>DDD projects with Hexagonal Architecture are well known for their deeply nested namespace structure. I have one that has a class called &lt;code>Project\Domain\Model\Account\Account&lt;/code>, and also one called &lt;code>Project\Infrastructure\Persistence\Account\DoctrineAccount&lt;/code>. That is simply just full-blown taxonomy.&lt;/p>
&lt;p>I just need &lt;code>Project\Account&lt;/code> and &lt;code>Project\DoctrineAccount&lt;/code>. Nothing else. They could live in totally different folders, but they need not to be in different namespaces. All the things in the middle is just taxonomies to keep things organized.&lt;/p>
&lt;p>You could allow &lt;code>Project\BoundedContext&lt;/code> just because you could have two account objects in different bounded contexts and they are definitely not the same account. So namespaces fulfil their role here by separating meanings between bounded contexts. But more than that is taxonomy syndrome.&lt;/p>
&lt;p>With this method, I can still keep the folders organized in and Hexagonal Architecture way, but keeping the namespace use consistent (and short!) This even helps to fulfil the use of the Domain Language in code.Domain Events and Errors can be in the same namespace too, but in totally different folders, that way we can easily find them.&lt;/p>
&lt;p>If you want to separate into packages the different layers, then the package name is your taxonomy: &lt;code>project/persistence&lt;/code>. When your package is autoloaded, it will bring the persistent implementation of the classes you already have into the same common namespace. It&amp;rsquo;s a win in every side you look at it.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This is a really good approach to try in your next project. You&amp;rsquo;ll be amazed of the simplicity, the clarity and the freedom that an approach like this will give you. It will make your code simpler, easier to reason about and very flexible to restructuring.&lt;/p></content></item><item><title>The case for Object Mapping</title><link>https://blog.mnavarro.dev/posts/the-case-for-object-mapping/</link><pubDate>Tue, 28 Apr 2020 20:00:00 +0000</pubDate><guid>https://blog.mnavarro.dev/posts/the-case-for-object-mapping/</guid><description>Introduction: A Tale of Simplicity VS Complexity NOTE: Every time the word array is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of stdClass or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.</description><content>&lt;h2 id="introduction-a-tale-of-simplicity-vs-complexity">Introduction: A Tale of Simplicity VS Complexity&lt;/h2>
&lt;blockquote>
&lt;p>NOTE: Every time the word &lt;strong>array&lt;/strong> is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of &lt;code>stdClass&lt;/code> or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.&lt;/p>
&lt;/blockquote>
&lt;p>The selling point for PHP in its early days was simplicity. It promised an escape from the complex ways of Java, .NET and others, that felt too cumbersome for people that wanted to do simple tiny scripts. The promise was that you didn&amp;rsquo;t need to think about data structures, memory allocation, objects, inheritance, third party libraries and so on and so forth if all you wanted was to dynamically render a bit of content on a page.&lt;/p>
&lt;p>The problem is that PHP grew in popularity. People started to ask more and more functionality to be able to do more advanced things, and somehow the language grew in a very un-organic way; but that&amp;rsquo;s another story. The point I&amp;rsquo;m trying to make is that PHP ceased to be used for simple scripts. Complex enterprise-scale applications are being built in PHP nowadays. And suddenly, we realized that this language that was so friendly for small and simple stuff, is not that friendly for big and &lt;em>enterprisy&lt;/em> things: at least not used in the traditional ways.&lt;/p>
&lt;p>This is the reason why the PHP Internals team has been investing a lot of development time in features that would make the language more reliable, like runtime type checking and improved object oriented support. The fact that the language was being heavily used for large-scale applications led to the realization that we needed more appropriate features to support that use.&lt;/p>
&lt;p>This is not a PHP-only realization. The story of Javascript is quite similar. Javascript, as a language, was conceived to make your mouse drop color sparks on movement, or your home banner to drop snow in december. But since its port to the backend by the Node JS runtime, Javascript developers used it to build complex stuff. They realized too that the language was also very unreliable for large-scale business-process-style projects; hence Typescript.&lt;/p>
&lt;p>This new push for types and oop features in languages whose initial premise of existence was to get rid of all that &lt;strong>unnecessary complexity&lt;/strong> should not be left unnoticed. We have valuable lessons to learn here.&lt;/p>
&lt;p>Maybe the lesson is that choosing the simpler solution to a problem only gets you that far. When the problem grows in complexity, the simple approach cannot really cope and, in a glorious paradox, mutates into a complexity monster itself. And maybe the other lesson that we can learn is that costs more time and effort to move to a complex approach from a simpler one, than the other way around.&lt;/p>
&lt;p>But you are right. This, at the end of the day, is mere narrative. So I want to tackle this issue with a practical, very common case. The case of object mapping.&lt;/p>
&lt;h2 id="arrays-vs-objects">Arrays VS Objects&lt;/h2>
&lt;p>There are mainly two approaches when working with databases in PHP nowadays. You can either design DAO classes that will contain queries that will fetch you the data that you need in arrays; or you can build your persistence layer on top of an ORM and map those database queries results into well defined classes/objects.&lt;/p>
&lt;p>The simpler, faster, more straightforward route is the first one, by far. Here is a comparison in implementation with code. Let&amp;rsquo;s go with the DAO/array approach:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span> $pdo;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">PDO&lt;/span> $pdo)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $pdo;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span>
{
$stmt &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">prepare&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SELECT * FROM users WHERE id = :id&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> ($stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">execute&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $id]) &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">QueryError&lt;/span>();
}
&lt;span style="color:#66d9ef">return&lt;/span> $stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">FETCH_ASSOC&lt;/span>);
}
}
$pdo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span>(&lt;span style="color:#e6db74">/** Connection details here **/&lt;/span>);
$dao &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>($pdo);
$user &lt;span style="color:#f92672">=&lt;/span> $dao&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the object mapping approach (Using Doctrine ORM):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#75715e">// First, you need to create your entity class with annotations
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Entity
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Id
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;integer&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> * @GeneratedValue
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> $id;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $username;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $password;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $email;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;datetime&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $registeredAt;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(
&lt;span style="color:#a6e22e">string&lt;/span> $username,
&lt;span style="color:#a6e22e">string&lt;/span> $password,
&lt;span style="color:#a6e22e">string&lt;/span> $email
) {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $username;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $password;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $email;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>);
}
&lt;span style="color:#75715e">// All the getters here, which use more space
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#75715e">// Then you need to bootstrap your entity manager
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$paths &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/path/to/entity-files&amp;#34;&lt;/span>];
$isDevMode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
$dbParams &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;uri&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mysql://user:pass@host:port/database&amp;#39;&lt;/span>];
$config &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Setup&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">createAnnotationMetadataConfiguration&lt;/span>($paths, $isDevMode);
$entityManager &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">EntityManager&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>($dbParams, $config);
&lt;span style="color:#75715e">// We can then query our objects
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$user &lt;span style="color:#f92672">=&lt;/span> $entityManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the ORM example is not significantly longer in lines, it is more complex for all the jargon and the tooling it introduces. There is a cost to learn how to use an ORM versus how to make SQL queries (supposing the developer already knows how to do the latter).&lt;/p>
&lt;p>Now, considering that an ORM &lt;strong>does not have&lt;/strong> a significant cost in implementation lines but &lt;strong>it does have&lt;/strong> one in learning/training for its use, and &lt;strong>supposing&lt;/strong> that that usage brings benefits in the long run, then the million dollar question is: &lt;strong>is that cost worth those benefits?&lt;/strong> That&amp;rsquo;s all, really.&lt;/p>
&lt;p>In order to answer that question we need to come to see those supposed benefits. The only way to do that is comparing it to the other approach in the context of the daily practice of working in a codebase. I like to draw this comparison by pointing to the deficiencies of the array + DAO approach in short statements, and how the object-mapping approach is different, and better.&lt;/p>
&lt;h2 id="arrays-are-not-reliable-structures-objects-derived-from-classes-are">Arrays are not reliable structures, objects derived from classes are&lt;/h2>
&lt;p>This is THE problem with arrays in PHP: they are very unreliable data structures by design. In the DAO approach, for example, that array returned from the user data can contain anything (who knows what), can be read by anyone with access to the reference, and modified too, without any kind of constraints.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">
$user[&amp;#39;id&amp;#39;] = 1;
$user[&amp;#39;username&amp;#39;] = &amp;#39;Tom&amp;#39;;
$user[&amp;#39;password&amp;#39;] = &amp;#39;my-hashed-password&amp;#39;;
// You get the idea...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This create a host of problems. There are simply so many things can go wrong using them:&lt;/p>
&lt;ol>
&lt;li>What if the hashed password of a user gets dumped in a report by accident?&lt;/li>
&lt;li>What if suddenly &lt;code>username&lt;/code> is no longer a string but null? How do I know that?&lt;/li>
&lt;li>What if someone deleted a key that other code depends on because he/she was trying to do something else, like hiding the password, for example?&lt;/li>
&lt;li>What if I misspelled a key name in a critical production operation?&lt;/li>
&lt;li>What if I leave the array in a inconsistent state that could affect future computations, like &lt;code>['isAccountActive' =&amp;gt; true, 'deactivationDate' =&amp;gt; '05/24/1988']&lt;/code>?&lt;/li>
&lt;/ol>
&lt;p>I could go on forever&amp;hellip;&lt;/p>
&lt;h2 id="arrays-lead-to-over-tested-code-objects-derived-from-classes-require-less-testing">Arrays lead to over-tested code, objects derived from classes require less testing&lt;/h2>
&lt;p>You could argue that these problems should be solved by testing the system and its routines, and you are absolutely right. This, however, assumes that the developer does test the codebase, which is not always true in my own observations of reality. Nonetheless, being generous, I can concede that.&lt;/p>
&lt;p>The main problem here is over-testing. Since your language has features to automatically prevent all the kind of undesirable state mutations that I pointed out, but you are not using them, you end up writing more tests than you should, because now you have to check for invalid state mutations in every routine. This leads, instead of unit testing or spec testing, to case-per-case testing, which is a very expensive way to test. It is expensive because it is really hard to set up, and also because it is very easy to break those tests.&lt;/p>
&lt;p>&lt;strong>If you don&amp;rsquo;t want to have problems working with arrays, you have to test your system extensively, adding big costs to the development effort.&lt;/strong>&lt;/p>
&lt;p>Or, you could use defined classes with protected state, and allow to read only what is necessary, specifying return types and only allowing valid state mutations by providing a good api to client classes. Did I mention you can write comments in its methods too, as means of documentation?&lt;/p>
&lt;h2 id="arrays-are-not-new-developers-friendly-objects-derived-from-classes-are">Arrays are not new-developers friendly, objects derived from classes are&lt;/h2>
&lt;p>Even when you can get away with testing your codebase extensively to use arrays (which I highly doubt), another problem is that, if I&amp;rsquo;m not the main developer of the application or I am not familiar with the system in any way, I&amp;rsquo;m going to have a really hard time working with those arrays if I ever need to fix something. I&amp;rsquo;ll spend hours dumping and debugging what an array exactly contains at any given point in the code, instead of actually solving a problem. I might even try to do that again and again with different inputs. All that is time consuming, and the hourly rate of a developer is not quite cheap to be honest.&lt;/p>
&lt;p>How much easier would be for me to jump in to the development effort aided by a good designed class and my favorite IDE&amp;rsquo;s autocomplete and go-to features? Oh, I see that the method &lt;code>getDeactivationDate&lt;/code> can return an instance of DateTime or null. I can work with that!&lt;/p>
&lt;p>&lt;strong>In the long run, using objects reduces development costs by allowing other developers reasoning about the codebase faster.&lt;/strong>&lt;/p>
&lt;p>You could make the point, however, that this is easily solvable by documenting the structure of arrays in some form of specification. Again, that does not make them not changeable and suddenly trustworthy, but at least is a start. But, can you see the irony? You &lt;strong>need&lt;/strong> a spec, and that is exactly what a class is: is an specification, a structure, a contract, a blueprint. The only difference is that is not optional, it is enforced by the language. And better yet, does not live in an obscure word document stored somewhere else, but in your codebase. I don&amp;rsquo;t know about you, but that makes a pretty good spec for me.&lt;/p>
&lt;p>I guarantee you: the time that could be spent writing that documentation specification is more than writing the class itself. Why don&amp;rsquo;t make the class the spec then?&lt;/p>
&lt;h2 id="arrays-are-anemic-objects-derived-from-classes-are-rich">Arrays are anemic, objects derived from classes are rich&lt;/h2>
&lt;p>Arrays are bags of data with no more meaning that the one you remember from when you were working on the code for the last time. But the things we are doing with our software are full of meaning: we are storing users, login them in, adding or removing permissions. We are managing reservations, scheduling meetings, sending emails, transferring cargo, selling goods, you name it! Surely we are missing something when we try to do that moving around bags of uncertain data.&lt;/p>
&lt;p>Having a &lt;code>User&lt;/code> class with a &lt;code>login&lt;/code> method sounds pretty straightforward to me. So it does a &lt;code>Cargo&lt;/code> class with a &lt;code>transfer&lt;/code> method, or a &lt;code>Order&lt;/code> class with a &lt;code>pay&lt;/code> one. I can easily figure out what is going on there. This is what is so cool about objects: state and behavior live together in one place, because in our stateful world, they should!&lt;/p>
&lt;p>However, arrays cannot contain any behavior associated with them. So if you want to repeat a routine over a similar structure of data, you have to rewrite that routine somewhere else, which in turn leads to bloated client code. This is the difference between an anemic data model (one that contains just plain data) and a rich one (one that has the data, but also is full of behavior). The latter serves client code better by means of &lt;a href="https://martinfowler.com/bliki/TellDontAsk.html">Telling-Not-Asking&lt;/a>.&lt;/p>
&lt;p>To be fair, you can always create a function to perform a common task over an array. But again, that function needs to operate over an array with a very special structure, not any array. And we have seen how easy is to break them. Why separate then that apparent natural association between the data and the actions that can occur over that data?&lt;/p>
&lt;p>&lt;strong>But, in summary, using objects helps to encapsulate logic that otherwise would be repetitive, and would lead to bloated client code.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-cannot-benefit-of-ide-tooling-objects-can">Arrays cannot benefit of IDE tooling, objects can&lt;/h2>
&lt;p>Arrays don&amp;rsquo;t offer autocompletion when working with them, likes objects do. I&amp;rsquo;ve sort of mentioned this in the past, but not as explicitly. Autocompletion is a powerful IDE feature that aids the developer and saves him/her from wasting time in silly mistakes.&lt;/p>
&lt;p>Also, arrays are hard to refactor. If you rename a key, you have to track all the uses of that key in your code and change it to the new one. Working with objects and with an appropriate IDE you can refactor a method name in an instant.&lt;/p>
&lt;p>&lt;strong>So again, using objects aids development by means of saving time and improving naming conventions when necessary.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-and-daos-do-not-scale-as-well-as-objects-and-repositories-do">Arrays and DAOs do not scale as well as Objects and Repositories do&lt;/h2>
&lt;p>Queries in DAOS can really grow wild and complex. It&amp;rsquo;s impossible not to have a combinatorial explosion of method names without using some sort of query builder. Also, is even hard to switch between different SQL implementations, like Sqlite, MySQL, Postgres or even Oracle. This increases maintenance time when dealing with changes of schema or implementing new methods.&lt;/p>
&lt;p>ORMs abstract away all these details and create some sort of a protection layer between vendors by choosing a subset of their functionality. This is how, at the end of the day, abstraction works: it has the benefits of being consistent, but with a limited subset of functionality. They have excellent query building capabilities already backed into their engines, so we don&amp;rsquo;t have to reinvent the wheel.&lt;/p>
&lt;p>This makes ORM scale better in terms of maintainability. Abstracting away all those details helps us focus on writing code rather than worrying about queries. Here the maxim applies more than in any other place: the simpler solution grows complex when the problem grows too. The complex solution costs more up front, but scales better when the problem gets complicated.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>These are probably the main reasons why I think working with objects derived of well designed classes is always going to be better than working with other unreliable data structures. Again, costs more up front (and not so much if you have appropriate tooling like PHP Storm), but the benefits on the long run are huge.&lt;/p>
&lt;p>And if these reasons don&amp;rsquo;t convince you, maybe just like a look at the recent trend. Languages historically known to be simpler and flexible adopting more complex and stricter features. That&amp;rsquo;s got to say something, isn&amp;rsquo;t it?&lt;/p></content></item><item><title>Getting Continuous Integration right</title><link>https://blog.mnavarro.dev/posts/the-continuous-on-integration/</link><pubDate>Wed, 26 Feb 2020 16:30:00 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/the-continuous-on-integration/</guid><description>I&amp;rsquo;ve participated in a good number of projects in my short life as a developer. Luckily, when I started in this business, git was a thing already and was one of the first tools I learned to use. I often wonder how anyone was able to build software in the past without it.
The best value that git brought to software development was not so much related to keeping a versioning history of a codebase (which is already pretty big value!</description><content>&lt;p>I&amp;rsquo;ve participated in a good number of projects in my short life as a developer. Luckily, when I started in this business, &lt;code>git&lt;/code> was a thing already and was one of the first tools I learned to use. I often wonder how anyone was able to build software in the past without it.&lt;/p>
&lt;p>The best value that &lt;code>git&lt;/code> brought to software development was not so much related to keeping a versioning history of a codebase (which is already pretty big value!). I think the bigger value is definitely related to code integration. Git, along with other tools, made the complex art of code integration way easier.&lt;/p>
&lt;p>In the past, you had to copy the code you wrote, with tests and everything, back to the master copy and hope you didn&amp;rsquo;t break anything. Automated tests were run locally, and a test environment was always in place ready for that. That sounds simple enough if you are working alone. But imagine integrating changes of many development teams across the same codebase like that. What a nightmare!&lt;/p>
&lt;p>Nowadays with &lt;code>git&lt;/code> you can push your changes to a remote repository and automated tools perform checks and run tests on that integrated piece of code, with the amazing possibility of writing reviews and provide feedbacks. What an amazing time to be alive!&lt;/p>
&lt;figure class="left" >
&lt;img src="https://media.giphy.com/media/zCv1NuGumldXa/giphy.gif" />
&lt;/figure>
&lt;p>Truth is that code Integration exists since software development started to be a thing. Everyone needs to integrate code to a master codebase. The million dollar question is really, is your process for integrating code smooth enough that allows you to integrate code &lt;em>continuously&lt;/em>? Could you integrate code to the master branch six or seven times per day, from different developers, and be confident that works? Because that&amp;rsquo;s the requirement today.&lt;/p>
&lt;p>Fagner Brack, one of my personal favorite tech writers, &lt;a href="https://hackernoon.com/continuous-integration-a-merge-story-16d8c81b4077">wrote a few years ago&lt;/a> about how six months of his work were turned into vaporware because of a big merge that had so many conflicts that was impossible to solve and therefore, integrate to the main codebase.&lt;/p>
&lt;p>I think stories like this happen all the time.&lt;/p>
&lt;p>You are working on a big feature, you change classes, move files, and create new resources over a long period of time. Then, in the meantime, other developers are changing the codebase, modifying the files you renamed or moved (brace yourself!) or even changing method names. No matter what tool you use: integrating that is going to be a nightmare.&lt;/p>
&lt;p>So, I was thinking would be nice to share some of the ideas and techniques that I&amp;rsquo;ve adopted in my experience with integrating code continuously.&lt;/p>
&lt;h2 id="1-teach-your-team-how-to-make-modular-software">1. Teach your team how to make modular Software&lt;/h2>
&lt;p>Modularity in software development is a must. Period. This is not some pharisaical or dogmatical way of thinking, but a very practical one. We don&amp;rsquo;t even do it for the sake of reusability, as some people might think. Truth is, modularity is for pluggability. A module is a piece of a larger puzzle. At any given point in time I may change that piece for other that fits better, but without even touching the rest of the pieces.&lt;/p>
&lt;p>This requires that the piece I want to switch is developed in such a way that knows the least possible about the other pieces, and viceversa. My &lt;code>User&lt;/code> class must know nothing of the &lt;code>Request&lt;/code> or the &lt;code>DbConnection&lt;/code> classes. They are totally unrelated pieces. If this does not happen, we&amp;rsquo;ll discover that changing that functionality is going to be a pretty expensive and long task.&lt;/p>
&lt;p>Of course, this is not how most software is developed today. Specially in these days where the &amp;ldquo;Develop quickly; worry never; fix when broken&amp;rdquo; paradigm seems to be gaining some foot. Most software I&amp;rsquo;ve seen has modules that know too much about others and there are not clear boundaries between them most of the time.&lt;/p>
&lt;p>The only way to solve this is by teaching and learning. You must be willing to invest time to teach your team not only why developing like this is important, but the techniques and the programming language features that will help them develop this way. Teach them to see a problem and break it down in independent pieces, and then teach them to code to interfaces, dependency injection, composition, design patterns and unit testing. It takes time, but it pays off tremendously.&lt;/p>
&lt;h2 id="2-make-developers-own-their-modules">2. Make developers own their modules&lt;/h2>
&lt;p>Once your team has started to develop in modules, then they must own them. If I created the &amp;ldquo;HTTP Authentication Module&amp;rdquo; of a larger application, then I must own that code. I must own it in the sense that I am the only one that can authorize changes to its internals or, more importantly, to it&amp;rsquo;s public api. My mission is to keep that module well documented and stable at all times. When a change is needed, the context is discussed with the rest of the team, but I make the final call. I have full control over it. It&amp;rsquo;s my module.&lt;/p>
&lt;p>Of course this is a team effort. I can teach other developer how the module is developed and then he/she can become the maintainer. I&amp;rsquo;m in no way advocating for solo development or not having the big picture here. My main concern is the changing of code.&lt;/p>
&lt;p>This can be easily enforced by using a feature most code management tools like Github or Gitlab have: the possibility to define a &lt;code>CODEOWNERS&lt;/code> file. It&amp;rsquo;s basically a plain text map of directories to usernames. It defines the users allowed to authorize pull requests that affect code belonging to the specified directory.&lt;/p>
&lt;p>This ensures conflicts are reduced to a minimum, because no one is touching other developer&amp;rsquo;s code. This, in turn, makes integration easier and faster. Bonus point: it really forces collaboration and communication between the maintainers of different modules.&lt;/p>
&lt;h2 id="3-use-a-simple-and-effective-git-flow">3. Use a simple and effective git flow&lt;/h2>
&lt;p>Establishing a clear git flow and explain it to your team is a must. They must know what to do to integrate what they are developing quickly and seamlessly. I&amp;rsquo;ve seen organizations over-complicate their git flow adding branches for bugfixes, and for features and for different environments or versions. Remember a very important git rule (coined by myself): every public branch implies a maintenance cost. Someone has to merge it somewhere, or cherry-pick it from somewhere else.&lt;/p>
&lt;p>You are using a version control system: you can live with just one public branch. Creating branches for everything sounds like coming back to our old ways of tracking file changes: copying folders named like &lt;code>project-dev&lt;/code>, &lt;code>project-final&lt;/code>, &lt;code>project-prod&lt;/code>, &lt;code>project-prod-final&lt;/code>, &lt;code>project-i-swear-this-is-final&lt;/code> and so on.&lt;/p>
&lt;p>For my personal taste, what I do is this: &lt;code>master&lt;/code> is my only public branch. This branch is blocked for pushes, so the only way of integrating code is via pull-request. The rest of the branches are private and therefore disposable. The way work is done is by getting branches from master, developing locally and pushing to the code management system, creating a pull request. On that PR, tests are run and styles and best practices are enforced and personal feedback is provided. If before approval something else gets merged to master, the developer must rebase origin/master locally and force push the result.&lt;/p>
&lt;p>This is an extremely simple approach that advocates for a constant flow of commits. Integrating early and frequently is always the best approach, even when building long time features.&lt;/p>
&lt;h2 id="4-use-feature-flags-for-unfinished-long-time-features">4. Use feature flags for unfinished, long-time features&lt;/h2>
&lt;p>Let&amp;rsquo;s say there is a team in charge of revamping the whole UI of our application. Such a project is estimated to be completed in 8 months. In the meantime, there is another team constantly adding new features and views to the application, and fixing bugs.&lt;/p>
&lt;p>The worst idea ever would be, in this scenario, that the team tasked with building the new UI creates a separate branch for all their work and develops only there, and merges to master 8 months later only when everything is ready. Why? That merge will face lots of conflicts and will miss the new features developed by the other team. They need to constantly merge new code to the master branch, so they can benefit from the new features and bugfixes that other teams are implementing. This will avoid a &lt;em>Major Merging Mess&lt;/em> (MMM).&lt;/p>
&lt;p>You say &amp;ldquo;But, it&amp;rsquo;s a UI change! How can they merge it before is finished!? It would look incomplete!&amp;quot;. Enter feature flags.&lt;/p>
&lt;p>Feature flags are any kind of thing that indicates to your application that it will run under a different feature configuration. Try not to confuse these with environment variables: feature flags don&amp;rsquo;t have anything to do with environments, but with features. Hence the name. If I see you defining features in environment variables, I will find you, and I will kill you (not really!).&lt;/p>
&lt;p>Maybe your web app runs in the CLI, kinda &lt;em>a la node js&lt;/em>. Well, a good feature flag could be adding a command line argument to your &lt;code>server.js&lt;/code> script. For the use case that we are considering, maybe something like &lt;code>node server.js --use-new-ui&lt;/code> will suffice. This will, theoretically, load the app but with the new UI, which lives in a folder different to the old one. Developers of the new UI can use this setup, while others can keep using the old one.&lt;/p>
&lt;p>But this approach is sub-optimal, because it needs a restart of the application for turning a feature on and off, because of it&amp;rsquo;s coupling with the way the application is executed. A better approach would be to use a centralized storage (redis shines here), and make available and endpoint to turn flags on an off without requiring a restart of the whole application. You can wrap this on a simple &lt;code>FeatureService&lt;/code> with one simple public method &lt;code>isTurnedOn(string $featureName): bool&lt;/code>. This is the approach that I prefer.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I hope this advice leads you in the right way regarding &lt;em>Continuous&lt;/em> Integration. Never in the history of software development have we had so many and effective tooling/ideas to help us in this process. It&amp;rsquo;s time to make the most of them!&lt;/p></content></item><item><title>Going back to the Monolith well</title><link>https://blog.mnavarro.dev/posts/back-to-the-monolith/</link><pubDate>Thu, 20 Feb 2020 23:30:00 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/back-to-the-monolith/</guid><description>We were extremely warned about the dangers of microservices, but we implement them anyway. Now, we are slowly realizing that we should have never, ever, abandoned the monolith. Our multiple failures at microservices probably speak of two things, (1) we probably lack the workforce and proper Ops team to carry this effort onward and (2) we probably could have solved our problem without them anyway. Note that I&amp;rsquo;m saying that microservices are fine.</description><content>&lt;p>We were extremely warned about the dangers of microservices, but we implement them anyway. Now, we are slowly realizing that we should have never, ever, abandoned the monolith. Our multiple failures at microservices probably speak of two things, (1) we probably lack the workforce and proper Ops team to carry this effort onward and (2) we probably could have solved our problem without them anyway. Note that I&amp;rsquo;m saying that microservices are fine. I&amp;rsquo;m also saying that they might have not been for us.&lt;/p>
&lt;p>We should not feel sorry though. We are craftsmen, professionals, people that must be on top of every new trend or tech. It&amp;rsquo;s normal we feel the drive to try every shiny new thing under the sun. I do that myself. But is a good thing when learn from our mistakes and correct them as soon as possible. And this is what this post is about.&lt;/p>
&lt;p>I&amp;rsquo;m grateful to microservices in the sense that they helped us see more clearly the boundaries and different responsibilities in our business, and to separate individuals to work in in those and own them. What I&amp;rsquo;m not grateful of is the fact of defining those boundaries behind a TCP connection and poorly typed content-types, and all the implications that come with it. We should have kept our boundaries, for sure, but in the reliable and fast realm of random access memory.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Single page applications and micro-services: the current go-to solution to introduce an unavoidable type-unsafe non-deterministic layer between two codebases to produce more work.&lt;br>&lt;br>Great for any period of work shortage.&lt;/p>&amp;mdash; ðºð¦ (@Ocramius) &lt;a href="https://twitter.com/Ocramius/status/1154067788828434433?ref_src=twsrc%5Etfw">July 24, 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Let&amp;rsquo;s think for a second. We really needed to make different applications to communicate over TCP to realize that team autonomy and separation of concerns was a good thing? If breaking down problems into smaller units and give certain individuals ownership of the implemented solution is &lt;em>the&lt;/em> requirement of microservices, then we should have been doing them since the 70&amp;rsquo;s.&lt;/p>
&lt;p>Truth is, OOP already solved these problems. I think we just forgot how to use it to our benefit. What is better? A RPC HTTP over TCP endpoint that takes a json payload and process it with some notorious latency and possibility of network error, or an interface (with the corresponding implementation) that names the action in a meaningful way, documents it and takes a well defined data class as the argument so you can have a deterministic in-memory result?&lt;/p>
&lt;p>I know, at some point we got scared of having many of those in a single place. We got scared that could be overwhelming for new developers to familiarize with all the services in a huge codebase. But truth is that, as in microservices, you don&amp;rsquo;t need to know all the details. Remember? This is what abstraction in OOP means. Implementation details can be hidden from us as long as we expose an interface that explains itself well and does the job it says it does. In microservices, does the booking app team knows or has to know every detail of the billing app? Of course not! They just know they have a &lt;code>pay&lt;/code> endpoint that takes some money and a booking id. Why not implementing both &amp;ldquo;apps&amp;rdquo; in different folders of the same codebase, throw away the network issues and enjoy calling routines in memory? Isn&amp;rsquo;t that much simpler? Worried about boundaries may not be respected? Nothing that a good CI config with a &lt;code>CODEOWNERS&lt;/code> file feature cannot solve.&lt;/p>
&lt;p>Just a quick side note here. I think we abused so much of frameworks that we took architecture for granted, and that made us fail at monoliths. With frameworks, we didn&amp;rsquo;t need to learn how to bootstrap and wire up and app by ourselves, by pulling the required pieces. We didn&amp;rsquo;t have to learn how to integrate different modules and make them work together, which is a crucial skill for a developer. I think that&amp;rsquo;s the fundamental piece that is missing when a developer is faced with the task of developing in a modular way: they know how to create a new class and put some code there. What they don&amp;rsquo;t know, is how to wire them up together to make them work in harmony with others.&lt;/p>
&lt;p>I truly think there is a case for microservices, and that&amp;rsquo;s when you need to get the most of a certain stack. Netflix might need to switch their video encoders from Go to Rust to avoid the overhead of GC spikes and save millions in processing costs because, well, they are Netflix. But for most of us, mere mortals followers of the trends that knock our doors, microservices are not needed. The complexity they introduce is far more than the problems they solve for our small use case.&lt;/p>
&lt;p>We need to go back to OOP and its best practices. To create modular systems, not for the sake of reusability (as it was heavily sold in the years gone by), but for the sake of maintainability. Each module should be autonomous, and communication between them should not be coupled. This is achieved with known techniques, like a solid translation/anticorruption layer. You say &amp;ldquo;Oh what a burden to write all that translation logic!&amp;rdquo; Bro, you were doing it with microservices already, parsing your json payloads to meaningful objects. Maybe you were luckier and used &lt;em>protobufs&lt;/em> instead, but the mapping/translation was still there, just made a bit easier by an automated tool.&lt;/p>
&lt;p>So, here&amp;rsquo;s my advice to succeed at monoliths this time:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Decouple everything:&lt;/strong> HTTP, Persistence, Service and Domain layers should not know anything about each other. Use translation techniques like DTOs to go from one layer to the other.&lt;/li>
&lt;li>&lt;strong>Think of microservices as modules in your codebase:&lt;/strong> apply the same principles of separation of concerns that you used in microservices but now to the same codebase. Define high level interfaces that others can use to access what you implemented in a simple way.&lt;/li>
&lt;li>&lt;strong>Define boundaries and make people own them:&lt;/strong> assign a team for the billing module and other for the invoice module. Make them put their code in different folders and forbid them to touch each other&amp;rsquo;s code. Enforce the boundaries with a CODEOWNERS file and a good CI config.&lt;/li>
&lt;li>&lt;strong>Enforce good coding practices and patterns:&lt;/strong> prevent the codebase from rooting at all costs. Always push for better code and don&amp;rsquo;t let technical debt sink in. Monoliths rot faster than microservices, so they require special care.&lt;/li>
&lt;/ol>
&lt;p>I hope this new &amp;ldquo;coming back to the monolith&amp;rdquo; trend gives us the chance to learn from our mistakes and perform well the art of building a monolith this time.&lt;/p></content></item><item><title>Repository Pattern Done Right</title><link>https://blog.mnavarro.dev/posts/repository-pattern-done-right/</link><pubDate>Mon, 17 Feb 2020 20:00:00 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/repository-pattern-done-right/</guid><description>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.
Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool.</description><content>&lt;p>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.&lt;/p>
&lt;p>Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool. Refining your use of tools and patterns this way is, with almost all certainty, the only way to grow as a developer. Years of experience don&amp;rsquo;t count much if you have been doing the same thing, the same way, over and over again.&lt;/p>
&lt;p>This is why I implement and use repositories very differently now than the first time I started. This is probably because of the experience (both good and bad) that I&amp;rsquo;ve accumulated over the years. I&amp;rsquo;ve also read quite a lot on the topic, and certainly I&amp;rsquo;m not the only one that has experienced issues implementing repositories in my applications.&lt;/p>
&lt;p>So, with the years, I&amp;rsquo;ve come to a definition of repositories, and is this one:&lt;/p>
&lt;blockquote>
&lt;p>Repositories are an specific and immutable abstraction over a collection of domain objects.&lt;/p>
&lt;p>~ MatÃ­as Navarro Carter&lt;/p>
&lt;/blockquote>
&lt;p>Let me tell you what I mean by that.&lt;/p>
&lt;h2 id="warning-active-record-users">Warning: Active Record Users&lt;/h2>
&lt;p>Repositories tend to work with ORMs &amp;ndash; even though is not a requirement, it&amp;rsquo;s very common practice. However, not any kind of ORM can be used for working with repositories. I think a word of warning is necessary for users of Active Record ORMs (I&amp;rsquo;m talking about you, Yii and Laravel users). I&amp;rsquo;ve read several blog posts (like &lt;a href="https://dev.to/asperbrothers/laravel-repository-pattern-how-to-use-why-it-matters-1g9d">this one&lt;/a>, or &lt;a href="https://itnext.io/repository-design-pattern-done-right-in-laravel-d177b5fa75d4">this other one&lt;/a>) that promise an implementation of repositories the Laravel Wayâ¢, which is really not the repository pattern, but a poorly abstracted interface over Eloquent. Don&amp;rsquo;t get me wrong: Active Record ORMs are good on what they do, they just don&amp;rsquo;t fit the requirements for the repository pattern. Don&amp;rsquo;t try to use Active Record ORMs for repositories: they just don&amp;rsquo;t fit the use case. Embrace Active Record: you already made the choice of coupling your data model to your persistence layer. If you won&amp;rsquo;t take my word for it, &lt;a href="https://laravelpodcast.com/episodes/9dafa72e?t=34m3s">take Jeffrey Way&amp;rsquo;s&lt;/a>.&lt;/p>
&lt;h2 id="repositories-are-abstractions">Repositories are Abstractions&lt;/h2>
&lt;p>Just to continue with the thread, the main reason why Active Record ORMs don&amp;rsquo;t fit the repository pattern is because &lt;strong>repositories are abstractions&lt;/strong>, and Active Record Data Models are not. When you create a data model in Laravel, for example, you are not fetching a &lt;em>pure&lt;/em> data class, but a whole lot of other stuff related to persistence, like your database connections, mutators and all sorts of stuff. All that lives in your data model, and that renders it unusable for the level of abstraction required for the repository pattern.&lt;/p>
&lt;p>To be fair with the Eloquent guys, this is true of Doctrine repositories also. If you are using doctrine repositories &lt;em>as they are&lt;/em>, you are not abstracting anything away. You are coupled to Doctrine, which is in turn coupled to a relational database engine. That leaves you in the same place as using Eloquent (a bit better though, because your data model is a &lt;em>pure&lt;/em> data class).&lt;/p>
&lt;p>In the Symfony world, it&amp;rsquo;s common to see something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeController&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>(&lt;span style="color:#a6e22e">Request&lt;/span> $request)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span>
{
&lt;span style="color:#75715e">// This repository is the doctrine&amp;#39;s library one
&lt;/span>&lt;span style="color:#75715e">&lt;/span> $repo &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getRepository&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$users &lt;span style="color:#f92672">=&lt;/span> $repo&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">json&lt;/span>($users);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you do this, stop. You are not using a &lt;strong>proper&lt;/strong> abstraction here. It&amp;rsquo;s true: the Doctrine repository is an abstraction over the &lt;code>EntityManager&lt;/code>, &lt;code>QueryBuilder&lt;/code>, &lt;code>Connection&lt;/code> and a bunch of other stuff: but is a doctrine-specific abstraction. You need a &lt;strong>Domain-specific abstraction&lt;/strong>. One abstraction that is only yours, your own contract.&lt;/p>
&lt;p>So what we should do then? We just define an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#75715e">// This is your data class
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|User[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a proper abstraction. Your &lt;code>User&lt;/code> class is a class that just contains data. Your &lt;code>UserRepository&lt;/code> interface is your contract. You can use the Doctrine repository behind it, but it won&amp;rsquo;t matter this time, because you will type hint the interface to all other classes using it. This way you effectively decouple yourself of any persistence library/engine and get an abstraction you can use all around your codebase.&lt;/p>
&lt;h2 id="repositories-are-specific">Repositories are Specific&lt;/h2>
&lt;p>Note how the &lt;code>UserRepository&lt;/code> we defined is &lt;strong>model specific&lt;/strong>. A lot of people like to save work by creating a generic repository, that becomes no more than a query abstraction over the persistence library used. Just don&amp;rsquo;t do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|object[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $repositoryClass)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember one of the principles of DDD: clear language intent. One repository interface for each model conveys more meaning to that specific repository/model than a generic one. For example: only users can be filtered by email, not buildings.&lt;/p>
&lt;p>Besides with one generic repository for everything, you won&amp;rsquo;t be able to type your concrete model classes to the return or argument types. It&amp;rsquo;s the longer route, but is definitely the most convenient and flexible.&lt;/p>
&lt;h2 id="repositories-are-collections">Repositories are Collections&lt;/h2>
&lt;p>I would say that the &amp;ldquo;Aha!&amp;rdquo; moment in repositories for me is when I realized that they are just an abstraction over a collection of objects. This blew my mind and gave me a new challenge; the challenge of implement repositories as if they were an in-memory collection.&lt;/p>
&lt;p>For starters, I dumped all methods like &lt;code>all()&lt;/code>, &lt;code>allActiveUsers()&lt;/code> or &lt;code>allActiveUsersOfThisMonth()&lt;/code>. If you have read the two famous posts about taming repositories, first the one of &lt;a href="http://drafts.easybib.com/post/44139111915/taiming-repository-classes-in-doctrine-with-the">Anne at Easybib&lt;/a> and then the one of &lt;a href="https://beberlei.de/2013/03/04/doctrine_repositories.html">Benjamin Eberlei in response&lt;/a>, you should know that methods like that in a repository can really grow wild. Also, you don&amp;rsquo;t need all the complexity of the specification pattern: we can do better and simpler than that.&lt;/p>
&lt;p>Collections apis have many distinctive features: the possibility of slice them, filter them, and add or remove new items to them as well as getting individual items. But we don&amp;rsquo;t want a general collection api, remember? We want to implement a specific api for every model, so it conveys meaning.&lt;/p>
&lt;p>So, our &lt;code>UserRepository&lt;/code> interface could look this way:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Countable&lt;/span>, &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pay special attention to the last three methods. These are the only methods that could potentially be in a &lt;code>Repository&lt;/code> base interface, because all of them will be sliceable, countable and iterable.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>, &lt;span style="color:#a6e22e">Countable&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So by doing this, all of your repositories will be sliceable (think pagination there), iterable and countable. The idea is that you apply the filtering methods (all the methods that return &lt;code>self&lt;/code>) and then iterate to execute the internal query Â¡just like an in-memory collection! In fact, you wouldn&amp;rsquo;t note the difference at all if an implementation is switched to another one.&lt;/p>
&lt;p>This is good OOP. All the persistence details are completely hidden from us, the api is composable and fits our needs for a repository. It looks neat and using it is really simple and easy to understand:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeService&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">UserRepository&lt;/span> $users)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $users;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>()
{
$users &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>))
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;-30days&amp;#39;&lt;/span>));
$count &lt;span style="color:#f92672">=&lt;/span> $users&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $users;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But here&amp;rsquo;s the question: how do we go about implementing an api like this? If you are a good observer, you might have realized that the filters return an instance of themselves, modifying the internal state of the repository. So in a next query, we will have the filters of the previous query applied, right?&lt;/p>
&lt;h2 id="repositories-are-immutable">Repositories are Immutable&lt;/h2>
&lt;p>Well, that could be right, if we really are modifying the internal state. But in reality, we are cloning the reference of the repository, so we never touch the original one. This is an implementation detail, but a very important one. If we change, let&amp;rsquo;s say, the state of the repository reference that lives inside our DI Container, then we are done: we cannot use that reference again. So the idea is to make it &lt;strong>immutable&lt;/strong>.&lt;/p>
&lt;p>Let me show you the final api, implemented in Doctrine ORM. I&amp;rsquo;m going to write some comments and docblocks in the code explaining some things.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\Tools\Pagination\Paginator&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMRepository
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * This is a custom abstract Doctrine ORM repository. It is meant to be extended by
&lt;/span>&lt;span style="color:#e6db74"> * every Doctrine ORM repository existing in your project.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * The main features and differences with the EntityRepository provided by Doctrine is
&lt;/span>&lt;span style="color:#e6db74"> * that this one implements our repository contract in an immutable way.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * This is Doctrine&amp;#39;s Entity Manager. It&amp;#39;s fine to expose it to the child class.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var EntityManagerInterface
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> $manager;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We don&amp;#39;t want to expose the query builder to child classes.
&lt;/span>&lt;span style="color:#e6db74"> * This is so we are sure the original reference is not modified.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * We control the query builder state by providing clones with the `query`
&lt;/span>&lt;span style="color:#e6db74"> * method and by cloning it with the `filter` method.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> $queryBuilder;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> * @param string $entityClass
&lt;/span>&lt;span style="color:#e6db74"> * @param string $alias
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager, &lt;span style="color:#a6e22e">string&lt;/span> $entityClass, &lt;span style="color:#a6e22e">string&lt;/span> $alias)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $manager;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createQueryBuilder&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">select&lt;/span>($alias)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">from&lt;/span>($entityClass, $alias);
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($start, $size) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setFirstResult&lt;/span>($start)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setMaxResults&lt;/span>($size);
});
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>
{
$paginator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
&lt;span style="color:#66d9ef">return&lt;/span> $paginator&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Filters the repository using the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * It clones it and returns a new instance with the modified
&lt;/span>&lt;span style="color:#e6db74"> * query builder, so the original reference is preserved.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @param callable $filter
&lt;/span>&lt;span style="color:#e6db74"> * @return $this
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">callable&lt;/span> $filter)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>
{
$cloned &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this;
$filter($cloned&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> $cloned;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Returns a cloned instance of the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * Use this to perform single result queries.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @return QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">QueryBuilder&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We allow cloning only from this scope.
&lt;/span>&lt;span style="color:#e6db74"> * Also, we clone the query builder always.
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __clone()
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was the abstract repository. Note how we don&amp;rsquo;t expose the &lt;code>QueryBuilder&lt;/code>. This is because it&amp;rsquo;s dangerous: an inexperienced developer could apply filters to it and mutate the original reference, causing a massive bug. Instad, we provide two convenience methods for child classes, &lt;code>filter&lt;/code> and &lt;code>query&lt;/code>. The first one takes a callable which in turn takes a cloned instance of the &lt;code>QueryBuilder&lt;/code> as an argument. The second one just returns a cloned &lt;code>QueryBuilder&lt;/code> so the child class can query anything.&lt;/p>
&lt;p>Then, we use that api in our &lt;code>UserRepository&lt;/code> and implement the remaining methods.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\User&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\DBAL\Types\Types&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NonUniqueResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NoResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common\DoctrineORMRepository&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMUserRepository
&lt;/span>&lt;span style="color:#e6db74"> * @package RepositoryExample\User
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMUserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ENTITY_CLASS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ALIAS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMUserRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager)
{
&lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__construct&lt;/span>($manager, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ALIAS&lt;/span>);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">persist&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, $id);
&lt;span style="color:#66d9ef">if&lt;/span> ($object &lt;span style="color:#a6e22e">instanceof&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @param string $email
&lt;/span>&lt;span style="color:#e6db74"> * @return User|null
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#66d9ef">try&lt;/span> {
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.email = :email&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>, $email)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getSingleResult&lt;/span>();
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NoResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NonUniqueResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;More than one result found&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.active = true&amp;#39;&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;lt; :before&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:before&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;gt; :after&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:after&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is really nice to work with. I&amp;rsquo;ve taken this approach is several projects so far and it feels great. The method names convey meaning and work well. Creating different implementations like a Doctrine Mongo ODM, Filesystem or In-Memory it&amp;rsquo;s trivial. Implementors just need to take into account the immutability aspect of it, but that&amp;rsquo;s all really.&lt;/p>
&lt;p>I really hope you like this approach as much as I do and start using it in your projects.&lt;/p></content></item><item><title>Showcase</title><link>https://blog.mnavarro.dev/showcase/</link><pubDate>Fri, 10 Jan 2020 16:50:09 -0300</pubDate><guid>https://blog.mnavarro.dev/showcase/</guid><description>Talks and Workshops Sometimes, nice people take a video when I talk about cool things. That is nice and I&amp;rsquo;d like to share it with you.
Event Sourcing Applied - DevFest, Santiago CL, Oct-2019 Container Theory and Docker - Option SpA, Santiago CL, Dec-2019 Golang 101 - Option Academy Workshop, Sept 2021 The Chilean Nerd Everyone would like to be a famous YouTuber, right? Well, this is my poorly-executed attempt to become one, where I teach about coding and best practices, mostly in PHP.</description><content>&lt;h2 id="talks-and-workshops">Talks and Workshops&lt;/h2>
&lt;p>Sometimes, nice people take a video when I talk about cool things. That is nice and I&amp;rsquo;d like to share it with you.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=uJEd4HFXxvY&amp;amp;t=1s">Event Sourcing Applied - DevFest, Santiago CL, Oct-2019&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=NJtal-GRNjc&amp;amp;t=3933s">Container Theory and Docker - Option SpA, Santiago CL, Dec-2019&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/mwg337neKGM">Golang 101 - Option Academy Workshop, Sept 2021&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="the-chilean-nerd">The Chilean Nerd&lt;/h2>
&lt;p>Everyone would like to be a famous YouTuber, right? Well, this is my poorly-executed attempt to become one, where I teach about coding and best practices, mostly in PHP. It is called, &lt;a href="https://www.youtube.com/channel/UCsdipFUfs6gcj1rQKEIlWLg">The Chilean Nerd&lt;/a>.&lt;/p></content></item><item><title>About Me</title><link>https://blog.mnavarro.dev/about/</link><pubDate>Fri, 10 Jan 2020 12:19:53 -0300</pubDate><guid>https://blog.mnavarro.dev/about/</guid><description>I&amp;rsquo;m MatÃ­as, a PHP Jedi Master based in the UK. I&amp;rsquo;m an skilled Backend Web Developer but I can also do frontend. I also develop in Node JS. I&amp;rsquo;m currently learning a bit of Go.
I have experience in all sort of projects, of different sizes and of wide spectrum of domains: medical, multimedia, air traveling and e-commerce. I love well crafted code and working in complex domains. My style of development revolves around the ideas of Domain Driven Design.</description><content>&lt;p>I&amp;rsquo;m &lt;a href="https://www.youtube.com/watch?v=V5Uhtmhj8VQ">MatÃ­as&lt;/a>, a PHP Jedi Master based in the UK. I&amp;rsquo;m an skilled Backend Web Developer but I can also do frontend. I also develop in Node JS. &lt;a href="https://www.instagram.com/p/CGSkARhHWou/">I&amp;rsquo;m currently learning a bit of Go&lt;/a>.&lt;/p>
&lt;p>I have experience in all sort of projects, of different sizes and of wide spectrum of domains: medical, multimedia, air traveling and e-commerce. I love well crafted code and working in complex domains. My style of development revolves around the ideas of &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design&lt;/a>. This means that when I develop software, I try to understand and breathe the business, in order to effectively model it into code. I mostly do web development, specially REST apis; but I&amp;rsquo;m decent enough in React (with hooks) and modern frontend development.&lt;/p>
&lt;p>I&amp;rsquo;m a open source maintainer of &lt;a href="https://github.com/mnavarrocarter">some libraries&lt;/a>, and &lt;a href="https://github.com/mnavarrocarter?tab=sponsoring">I sponsor some projects and developers&lt;/a> that have had an influence on me.&lt;/p>
&lt;h2 id="what-is-your-skillset">What is your skillset?&lt;/h2>
&lt;p>You can expect me to be able to:&lt;/p>
&lt;ul>
&lt;li>Understand the inner workings of any PHP codebase, wether that is custom or with a framework.&lt;/li>
&lt;li>Analyze a codebase technical debt and refactor to best practices and patterns.&lt;/li>
&lt;li>Implement unit testing, mutation testing, type checking and linting on any PHP codebase.&lt;/li>
&lt;li>Write easy to maintain, modular and easy to reason about code.&lt;/li>
&lt;li>Automate code integration processes using Github Actions or Gitlab CI/CD.&lt;/li>
&lt;li>Package PHP applications into docker images to be deployed in Kubernetes-like environments or PaaS providers like Heroku.&lt;/li>
&lt;li>Be able to spin up any development stack with &lt;code>docker-compose&lt;/code>.&lt;/li>
&lt;li>Be able to work in or implement a Github workflow.&lt;/li>
&lt;li>Work with different backing services like MySQL/PostgreSQL databases, message queues like SQS and Rabbit, key value stores like Redis, search engines like Elastic.&lt;/li>
&lt;li>Explain in details how many of the backend protocols work, like HTTP, FTP or SSH.&lt;/li>
&lt;li>Speak with Stakeholders to understand their problems and translate those into technical requirements.&lt;/li>
&lt;li>Manage basic aspects of a Kubernetes infrastructure, like implement observability platforms, autoscaling or operators for high availability persistence needs.&lt;/li>
&lt;li>Discuss different approaches to solving a problem and be able to explain their pros and cons.&lt;/li>
&lt;li>Review code in a pull request flow and provide feedback to developers.&lt;/li>
&lt;li>Teach and mentor other developers about all mentioned above.&lt;/li>
&lt;/ul></content></item><item><title>Unit-testing the filesystem in PHP</title><link>https://blog.mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description><content>&lt;p>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like &lt;a href="https://flysystem.thephpleague.com/docs/">Flysystem&lt;/a> or &lt;a href="https://github.com/knplabs/Gaufrette">Gaufrette&lt;/a>: just a simple mock of the interface and we are done.&lt;/p>
&lt;p>However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling. I started to get dissapointed of them and started looking at simpler approaches. For instance, PHP supports filesystem abstractions natively in the form of &lt;strong>stream wrappers&lt;/strong>. If you don&amp;rsquo;t know about them, you should really &lt;a href="https://dzone.com/articles/the-powerful-resource-of-php-stream-wrappers">take a look at them&lt;/a>!&lt;/p>
&lt;p>But there was just one thing that prevented me from going all-in with PHP stream wrappers, and this is that they are really complex to test, because they imply to hit the real filesystem since you cannot mock php filesystem functions.&lt;/p>
&lt;p>Well, it turns out not really. Actually, what if I told you that you can use PHP stream wrappers to create an in-memory filesystem for testing purposes? Actually, you don&amp;rsquo;t even have to create it, because it already exists!&lt;/p>
&lt;p>&lt;a href="https://github.com/adlawson/php-vfs">&lt;code>adlawson/vfs&lt;/code>&lt;/a> implements such filesystem, which is commonly called a &lt;em>virtual filesystem&lt;/em>. They way you use it it&amp;rsquo;s very similar to using a mock. You create the filesystem and leave it in the state you want for your tests. For example, here&amp;rsquo;s a test from one of the Espresso packages where I use it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
$templateEngineMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">TemplateEngineInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$transformerMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">TransformerInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$mimeTypesMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">MimeTypes&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;span style="color:#75715e">// Setting up virtual FS
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$fs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">FileSystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">factory&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;vfs://&amp;#39;&lt;/span>);
$fs&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mount&lt;/span>();
&lt;span style="color:#75715e">// We create a new directory with some files in it
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Directory&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">File&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Some file with no extension&amp;#39;&lt;/span>)]);
&lt;span style="color:#75715e">// Then we add the directory to the fs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$fs&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;foo&amp;#39;&lt;/span>, $dir);
$mimeTypesMock&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">expects&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">once&lt;/span>())
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">method&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;getMimeType&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">with&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">willReturn&lt;/span>(&lt;span style="color:#66d9ef">null&lt;/span>);
$simpleResponse &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">SimpleResponse&lt;/span>($templateEngineMock, $transformerMock, $mimeTypesMock);
$response &lt;span style="color:#f92672">=&lt;/span> $simpleResponse&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">withDownload&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;vfs://foo/bar&amp;#39;&lt;/span>); &lt;span style="color:#75715e">// Here we use it
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we have set up the filesystem, we can use the &lt;code>vfs://&lt;/code> stream wrapper like any other stream wrapper. This way, we can test behavior without hitting a real filesystem, what makes our test a truly unit one.&lt;/p>
&lt;p>Make sure you start testing the code depending on PHP native filesystem functions this way. You&amp;rsquo;ll see it&amp;rsquo;s a lot easier to work with, and way more reliable.&lt;/p></content></item><item><title>Efficient Reports in PHP</title><link>https://blog.mnavarro.dev/posts/php-efficient-reporting/</link><pubDate>Tue, 10 Dec 2019 11:18:48 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/php-efficient-reporting/</guid><description>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p></description><content>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p>
&lt;ol>
&lt;li>Do not use ORMs&lt;/li>
&lt;li>Use non-buffered TCP connections&lt;/li>
&lt;li>Use PHP generators with abstractions&lt;/li>
&lt;li>Prefer easy-to-stream content types&lt;/li>
&lt;/ol>
&lt;p>There you have! My promise is that if you follow these simple four rules, your report writing experience will be much more pleasant and your application will work on them more efficiently. Let&amp;rsquo;s review these rules one by one:&lt;/p>
&lt;h2 id="1-do-not-use-orms">1. Do not use ORMs&lt;/h2>
&lt;p>ORMs, as indicated in the meaning of their acronym, have a very specific purpose. That purpose is to map relational database tables to the objects that contain our business logic. This is so we can abstract away persistence details and focus in expressing our domain in code. But a report is neither a domain action or a business rule. It&amp;rsquo;s just a report: some business guy wants to see data on an spreadsheet.&lt;/p>
&lt;p>Anything we use the ORM for that is not related to the purpose stated above constitutes a wrong use of the ORM. ORMs were designed for nothing else than domain objects mapping.&lt;/p>
&lt;p>If I load the ORM with ten thousand rows worth of database records, I&amp;rsquo;m not going to even reach a thousand before my script runs out of memory. This is because most ORMs have a in-memory cache of some sort, and also because objects consume more memory than more simpler data types, like hash maps or arrays. Some terrible things I&amp;rsquo;ve seen developers do to solve this is to increase the default memory limit of the application (worst idea ever) or to clear the memory cache of the Entity Manager every X iterations (not that bad, but still not the right thing to do).&lt;/p>
&lt;p>Even when you can get around the memory issue, you still are putting your system under a lot of stress because of all the mapping logic. Just stop there and ask yourself the question &amp;ldquo;Do I really need hydrated objects for this?&amp;rdquo; You&amp;rsquo;ll find that the answer is, in 99% of cases, no.&lt;/p>
&lt;p>This is really all you need.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserReporter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">activeUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">inactiveUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need anything more complex than this. Implement it in PDO or any other database library, perform the necessary translations/normalizations, and return an iterable of some sort. You&amp;rsquo;ll be amazed of how easy and efficient this approach is.&lt;/p>
&lt;h2 id="2-use-non-buffered-tcp-connections">2. Use non-buffered TCP connections&lt;/h2>
&lt;p>TCP connections are slow (this compared to writing in the host&amp;rsquo;s filesystem, for example). So almost every database client that I know uses something that is called buffering. In PDO, for example, this works by accumulating the resultset of a query in the database memory, and once is done, flush it all to the client requesting the data over the TCP socket. This means that in PHP, every time you are querying something, your are loading the whole result in memory.&lt;/p>
&lt;p>Now, depending of the size of your table, this may also kill your application. If your table is 5 GB and you are dumping all its records into a csv file, that is going to allocate 5 Gb in your app&amp;rsquo;s memory. I remember the first time I encountered this problem working for a client. They had a database with the amount in MW of the electricity generated by every single electrical generation plant in Chile, every hour, over the span of 5 years. In Chile there are around 150 electrical generation plants and there are 8760 hours in a year, so that table had close to 6.127.000 records, each record roughly weighing 1 kb. That sole table was around 6 GB. Of course that wen I tried to allocate that much memory into my system it was going to crash.&lt;/p>
&lt;p>Reports like this can easily kill your app if you are not cautious. In cases like this, is always good to buffer the results as they happen over the TCP connection. In PDO, you can do this by disabling buffering in queries:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
$pdo&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">MYSQL_ATTR_USE_BUFFERED_QUERY&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you iterate over your resultset and you will get every record as it is found, keeping your memory usage very low at the cost of less speed and a bit more CPU.&lt;/p>
&lt;p>You can read more about non-buffered queries in PDO &lt;a href="https://phpdelusions.net/pdo#mysqlnd">here&lt;/a>&lt;/p>
&lt;h2 id="3-use-php-generators-with-abstractions">3. Use PHP generators with abstractions&lt;/h2>
&lt;p>Is of little use if you disable buffering your query to put every result into an array and continue with it. What you want here is the power of generators.&lt;/p>
&lt;p>I&amp;rsquo;m not going to explain in detail what they are. For that you can read &lt;a href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">the amazing blog post that Nikita Popov wrote about them&lt;/a>. I&amp;rsquo;m going to say that a generator is a special kind of iterator that yields the items of an iteration without necessarily know the whole iterable structure in advance.&lt;/p>
&lt;p>They fit very well our case for the non-buffered queries in PDO, because we do not know the whole resultset in advance, so we can yield values as they reach our server.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserReporter&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span> $pdo;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">PDO&lt;/span> $pdo) {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $pdo;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">activeUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span> {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">MYSQL_ATTR_USE_BUFFERED_QUERY&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
$stmt &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">prepare&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM `users` WHERE `status` = &amp;#39;active&amp;#39;&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>$stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">execute&lt;/span>()) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">RuntimeException&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Query error&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">while&lt;/span> ($row &lt;span style="color:#f92672">=&lt;/span> $stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">FETCH_ASSOC&lt;/span>)) {
&lt;span style="color:#66d9ef">yield&lt;/span> $row; &lt;span style="color:#75715e">// This is the keyword!!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When a function has the yield keyword inside it, their return value will be an &lt;code>Iterator&lt;/code> (specifically, a &lt;code>Generator&lt;/code> instance), and every iteration will return the next yielded value. So, when &lt;code>Iterator::next()&lt;/code> is called, code will be executed until a yield is found, and that will be the return value. The code yielding will be paused until the &lt;code>Iterator::next()&lt;/code> is called, and it will continue where it was the last time, until there are no more yields.&lt;/p>
&lt;p>This is a powerful feature, useful to implement streams, data transformation pipelines and even coroutines (as Nikita&amp;rsquo;s blog post shows). You can compose iterables over iterables to create cool pipelines and process your report data separating concerns effectively.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UppercaseNames&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NormalizeEmails&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TranslateFields&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
$pipeline &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">UppercaseNames&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">NormalizeEmails&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">TranslateFields&lt;/span>($userReporter&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">activeUsers&lt;/span>())));
&lt;span style="color:#66d9ef">foreach&lt;/span> ($pipeline &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Write in a csv or something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Who needs ETL processing libraries when you have the power of Generators at your disposal? ð¤ï¸&lt;/p>
&lt;figure class="left" >
&lt;img src="https://media.giphy.com/media/11ahZZugJHrdLO/giphy-downsized.gif" />
&lt;/figure>
&lt;h2 id="4-prefer-easy-to-stream-content-types">4. Prefer easy-to-stream content types&lt;/h2>
&lt;p>One of the first things I ask when someone asks me to dump a report from a set of SQL tables is &amp;ldquo;Can the report be a CSV?&amp;quot;, most of the time the answer is an annoying no, because is too complex for the business guy to import a csv file into excel (really?). But I try to make my point anyways.&lt;/p>
&lt;p>Every content type structured as a tree is hard to stream, specially in PHP. I&amp;rsquo;m mainly talking about &lt;code>xml&lt;/code> and &lt;code>json&lt;/code> here. As you might know, an excel file is just compressed xml. Even really good libraries like &lt;a href="https://opensource.box.com/spout/">&lt;code>box/spout&lt;/code>&lt;/a> have to do some in-memory cache or temp file gymnastics to stream &lt;code>.xlsx&lt;/code> files. Json files can be streamed as well, but not using the native json extension functions. For streaming json in PHP you should use &lt;a href="https://github.com/violet-php/streaming-json-encoder">&lt;code>violet-php/streaming-json-encoder&lt;/code>&lt;/a>. But the most simple of all formats is the beautiful csv. Just line by line streaming: forget about parsing and reading byte per byte.&lt;/p>
&lt;p>The reason to prefer streams is because, potentially, you will be sending this somewhere else: be an object storage or a client over HTTP. Trust me, you want to stream that.&lt;/p>
&lt;p>I&amp;rsquo;ve seen applications that when I click &amp;ldquo;Download Report&amp;rdquo; it waits for like three whole minutes until the browser downloading tray icon pops, and then takes a second to download. This is because most reports build the file in-memory or disk, and then send it to the client when is done. This is poor UX. Let the user know at least that you are sending data to him/her by streaming the content, and not making him/her wait for three minutes.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Writing reports is one of the most boring tasks of a developer, but happens to be one of the most common ones. Do it well, and you&amp;rsquo;ll save yourself a lot of time that you can use in doing other, more interesting things. Besides, you&amp;rsquo;ll learn a thing or two about streaming, generators and TCP connections. ðï¸&lt;/p></content></item></channel></rss>