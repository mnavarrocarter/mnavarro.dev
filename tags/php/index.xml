<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on The Chilean Nerd</title><link>https://blog.mnavarro.dev/tags/php/</link><description>Recent content in PHP on The Chilean Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><copyright>Â©2019 Matias Navarro Carter. CC-BY-SA.</copyright><lastBuildDate>Fri, 02 Jul 2021 20:00:00 +0100</lastBuildDate><atom:link href="https://blog.mnavarro.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Environment Variables Done Right</title><link>https://blog.mnavarro.dev/posts/environment-variables-done-right/</link><pubDate>Fri, 02 Jul 2021 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/environment-variables-done-right/</guid><description>One of the things that I don&amp;rsquo;t like about Laravel is their abusive use of environment variables. I think it sets a bad precedent for when developers need to come up with their own environment variables in their applications.
I have seen environment variables in an application that should have never been environment variables. And other things that should have been but have not made it to the list.
So, I thought I&amp;rsquo;ll write this piece to rant a bit about this.</description><content>&lt;p>One of the things that I don&amp;rsquo;t like about Laravel is their abusive use of environment variables. I think it sets a bad precedent for when developers need to come up with their own environment variables in their applications.&lt;/p>
&lt;p>I have seen environment variables in an application that should have never been environment variables. And other things that should have been but have not made it to the list.&lt;/p>
&lt;p>So, I thought I&amp;rsquo;ll write this piece to rant a bit about this.&lt;/p>
&lt;h2 id="know-what-should-be-an-environment-variable">Know what should be an environment variable&lt;/h2>
&lt;p>Environment variables should only be configuration values that change between deployments. Nothing else. For instance, Laravel has it&amp;rsquo;s famous &lt;code>APP_NAME&lt;/code> environment variable that is completely useless. If your app name is &lt;code>MonkeyMarket&lt;/code> is probably going to be the same in production and staging deploys. No need to make this an environment variable at all. It is not a value related to the environment, but to the application. This is best handled in code.&lt;/p>
&lt;p>&lt;code>APP_URL&lt;/code> is probably another environment variable that should not exist, since the app url should be derived from the &lt;code>Host&lt;/code> http header or any of the &lt;code>X-Forwarded&lt;/code> or &lt;code>Forwarded&lt;/code> headers (if you are behind a proxy). If you don&amp;rsquo;t do that, then you risk to inconsistencies between the actual app url and the value of the &lt;code>APP_URL&lt;/code> variable. Having said that, there are probably some scenarios in which it might make sense, specially if you want to avoid proxy forgery attacks.&lt;/p>
&lt;h2 id="use-uris-to-specify-connection-parameters">Use URIs to specify connection parameters&lt;/h2>
&lt;p>Another thing that Laravel does with their environment variables is to multiply their number without need. For example, in order to specify a database connection, you must set a total of 6 environment variables: &lt;code>DB_CONNECTION&lt;/code>, &lt;code>DB_HOST&lt;/code>, &lt;code>DB_PORT&lt;/code>, &lt;code>DB_DATABASE&lt;/code>, &lt;code>DB_USERNAME&lt;/code> and &lt;code>DB_PASSWORD&lt;/code>. It&amp;rsquo;s a similar thing if you want to configure mailing or storage.&lt;/p>
&lt;p>In order to simplify all these possible options you can make use of URIS. As defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc3986">RFC 3986&lt;/a> they provide a simple and extensible way of defining a resource. In our case, this resource would be a connection to a third party service.&lt;/p>
&lt;p>For instance, instead of all those variables that Laravel defines for a database connection, we could use a single uri string. This even allows us to pass extra configuration in the form of query parameters.&lt;/p>
&lt;pre>&lt;code class="language-env" data-lang="env">mysql://user:pass@host:345/db_name?collation=utf8&amp;amp;ssl=true
&lt;/code>&lt;/pre>&lt;p>What if it gets tricky, like a database connection behind ssh? You still can use a single string and keep complexity of environment variables to a minimum.&lt;/p>
&lt;pre>&lt;code class="language-env" data-lang="env">mysql+ssh://user:pass@host:345/db_name?collation=utf8&amp;amp;sshHost=192.168.1.123&amp;amp;sshUser=root#/path/to/ssh/key
&lt;/code>&lt;/pre>&lt;p>This can work for virtually anything, like mailing, caching, storage, and sessions.&lt;/p>
&lt;pre>&lt;code>DATABASE_URI=mysql://user:pass@host:345/db_name
MAILING_URI=smtp://user:pass@host:port?from=app@example.com&amp;amp;ssl=true
CACHING_URI=local:///tmp/cache
STORAGE_URI=s3://accesskey:secret@s3.amazonaws.com/publican?region=us-east-1
SESSION_URI=redis://user:pass@host:port/path/of/keys
&lt;/code>&lt;/pre>&lt;p>You can easily parse all these values using PHP&amp;rsquo;s &lt;code>parse_url&lt;/code> built-in function and get some defaults out of them.&lt;/p>
&lt;h2 id="everything-should-have-a-default">Everything should have a default&lt;/h2>
&lt;p>Is my personal belief that a good application should work out of the box with really dummy defaults. For instance, if your application needs a SQL database, maybe it should work with &lt;code>sqlite&lt;/code> by default, either in the filesystem or in memory. If it needs to store session data, it should probably default to the filesystem instead of &lt;code>redis&lt;/code>. If it needs to send emails, it should do it in memory or write them in the filesystem unless a real driver is provided.&lt;/p>
&lt;p>No environment variable should be strictly required to run the application, and the defaults should probably be development ones, so every developer in the project can jump quickly boot the environment.&lt;/p>
&lt;h2 id="derive-as-much-non-secret-values-as-you-can">Derive as much non-secret values as you can&lt;/h2>
&lt;p>Something I&amp;rsquo;ve seen a lot in many projects is environment variables with URLS to third party services that the app depends on.&lt;/p>
&lt;p>You might be inclined to store this in an environment variable of the type &lt;code>SERVICE_X_URL&lt;/code> too, since the values can change according to the environment. But another lesson to learn here is that in most cases you can derive these values from another environment variable. You could have an &lt;code>APP_ENV&lt;/code> variable with some predefined possible values (prod, stage, local, test) and use that to derive other values.&lt;/p>
&lt;p>The better approach in this case is that the urls should be stored in code (constants are useful here) and you should derive the right url according to the current environment stored in the &lt;code>APP_ENV&lt;/code> variable.&lt;/p>
&lt;p>So, if &lt;code>APP_ENV&lt;/code> equals to the string &lt;code>prod&lt;/code>, then you know you should use the production url for that service. In all other cases, you use the staging url. This is very convenient since you don&amp;rsquo;t have to maintain a &lt;code>SERVICE_X_URL&lt;/code> environment variable. You could even create mocks of the service and run those when the environment is &lt;code>local&lt;/code> or &lt;code>test&lt;/code>.&lt;/p>
&lt;p>If the service needs authentication, like a Bearer Token, you should create an environment variable for that, as the token can be different for every deployment, but unlike the url, it is not a secret value, so hardcoding it would be a terrible security best practice violation.&lt;/p>
&lt;p>Also, I should not say that as a good integration practice all that information
should be stored in an class implementation of that service.&lt;/p>
&lt;blockquote>
&lt;p>NOTE: You should not do this if these are services that could be deployed to different urls (like a pdf converter microservice or some other tool) and therefore could change often. This approach is only useful for services that have a staging url and a production url that usually does not change.&lt;/p>
&lt;/blockquote>
&lt;h2 id="use-other-alternatives">Use other alternatives&lt;/h2>
&lt;p>Some people like to use an &lt;code>APP_DEBUG&lt;/code> environment variable to determine if the application should be in debug mode or not. I personally don&amp;rsquo;t like this. Debugging is something you need to turn on and off on demand. Having it in an environment variable means an application restart is required to pick up the changes (in a containerized environment), which could affect your debugging.&lt;/p>
&lt;p>Here the use of feature flags shines. If you use a service discovery tool like Consul, you could store these in their key value store and retrieve them at booting time and use them to configure your services. Redis is another option here.&lt;/p>
&lt;p>So, when you need to debug an issue you could enable that feature and then turn it off when you don&amp;rsquo;t need it anymore.&lt;/p>
&lt;hr>
&lt;p>Hope these tips help you reason about what environment variables you define in your application and to keep them under control.&lt;/p></content></item><item><title>When to use Interfaces</title><link>https://blog.mnavarro.dev/posts/when-to-use-interfaces/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/when-to-use-interfaces/</guid><description>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the 1.1.1 version of psr/container, had removed extends Throwable from the Psr/Container/ContainerExceptionInterface. Here is the related issue.
Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue.</description><content>&lt;p>Not long ago some of my CI pipelines failed in its psalm step. The error was due to an exception that could not be caught, because it was not an exception class. The culprit, the &lt;code>1.1.1&lt;/code> version of &lt;code>psr/container&lt;/code>, had removed &lt;code>extends Throwable&lt;/code> from the &lt;code>Psr/Container/ContainerExceptionInterface&lt;/code>. &lt;a href="https://github.com/php-fig/container/issues/33">Here is the related issue&lt;/a>.&lt;/p>
&lt;p>Now, this was all done to a language support issue, which is understandable. But this exposed a somewhat related issue. This would have never happened if the PSR had been designed well from the ground up. For me, part of that bad designed involves the famous and wide-spread use of the so called &lt;strong>error marker interfaces&lt;/strong>.&lt;/p>
&lt;p>I&amp;rsquo;m writing this piece not because I want &lt;code>psr/container&lt;/code> to change, but because I want to raise awareness of this bad practice and eventually convince people writing new library code or refactoring existing library code to dump this approach.&lt;/p>
&lt;h2 id="the-value-of-interfaces">The Value of Interfaces&lt;/h2>
&lt;p>Interfaces are probably the building blocks that make object oriented programming one of the best programming paradigms out there. Interfaces are there to &lt;strong>abstract routines&lt;/strong> and allowing us to swap different implementations of those routines without even touching client code. That&amp;rsquo;s the power that makes modularity work in object oriented programming. You can replace entire subsystems hidden behind an interface without affecting anything.&lt;/p>
&lt;p>The PHP FIG has done tremendous effort on taking some of the most common routines or use cases in PHP and abstract them into interfaces that can be adopted by third party libraries. The purpose of this is to maximize interoperability: if two or more libraries share the same contract or interface, then it is trivial to swap one for another, or even better, building entire subsystems or libraries typing to the interface instead of an implementation means a higher adoption rate.&lt;/p>
&lt;h2 id="the-misuse-of-interfaces">The Misuse of Interfaces&lt;/h2>
&lt;p>Of course, interfaces can be used poorly. If an interface requires us to change client code upon switching implementation, then it becomes what is known as a &lt;em>leaky abstraction&lt;/em>. If you have to change client code when swapping implementations, then it means the interface leaks implementation details that client code should not be aware of. This is one of the most common issues interfaces have.&lt;/p>
&lt;p>Another problem, not so much considered, is making &lt;strong>everything&lt;/strong> an interface thinking that by doing so we are providing interoperability. Good object oriented practices dictate that interfaces &lt;strong>should&lt;/strong> only be used when (1) we are dealing with service classes and/or (2) we will have two or more possible implementations. By services classes I mean classes that &lt;strong>do&lt;/strong> something instead of &lt;strong>representing&lt;/strong> something (like value objects or models).&lt;/p>
&lt;p>For example, there is little to no value in using interfaces for a value object, unless there are two possible implementations of it. This is the case with the &lt;code>DateTimeInterface&lt;/code> in PHP. It has an interface because PHP has both a mutable and an immutable implementation. &lt;code>brick/date-time&lt;/code> is only immutable, so no interface is required.&lt;/p>
&lt;p>But other libraries don&amp;rsquo;t get this right. PSR-7 should have been a concrete implementation. This is because literally there is only one possible implementation of it due to the spec being so rigid and opinionated. This would have made adoption much more easier and widespread, eliminate the need for factories and bring so much more benefits to the table.&lt;/p>
&lt;p>FIG members usually answer to this by saying that &lt;a href="https://github.com/php-fig/container/issues/33#issuecomment-849548872">&amp;ldquo;FIG creates interfaces and recommendations&amp;rdquo;&lt;/a>, which is a terrible answer. The the mission of FIG is not making interfaces: the mission is to drive interoperability forward in the PHP ecosystem. They do that by means of interfaces and recommendations, but it is not and should not be the only way. &lt;a href="https://groups.google.com/g/php-fig/c/u2Nmovw_Rlc/m/l8Y_MhIEMgAJ">Some members understand this very well&lt;/a>, and others don&amp;rsquo;t.&lt;/p>
&lt;p>The &lt;em>interface only&lt;/em> approach leads to confusion and using interfaces wrongly. One of these uses is using them as error markers, because the assumption is that extending means implementing.And this leads us to the final issue.&lt;/p>
&lt;h2 id="the-fear-of-inheritance">The Fear of Inheritance&lt;/h2>
&lt;p>&lt;strong>Inheritance is evil&lt;/strong> is a common aphorism in Object Oriented world. And with right reason: inheritance couples things, makes changing code harder and could lead to an increase of unexpected breaking changes, because the &lt;em>not-so-private&lt;/em> api can still be used by other client code.&lt;/p>
&lt;p>We all know that the alternative is use of composition. And there is abundant literature, talks and courses that taught it well. No need to repeat common knowledge here.&lt;/p>
&lt;p>What I currently see now in the professional PHP ecosystem is not so much now an abuse of inheritance, but a fear of it. We have gone to the other end of the spectrum.&lt;/p>
&lt;p>Part of being a good software engineer is to be able to determine when to use some tool or pattern and when not, based on an informed decision and consideration of the possible future implications.&lt;/p>
&lt;p>Using concrete classes for errors in libraries that only contain interfaces is a perfectly reasonable approach. It must be taken with a grain of salt though: implementing custom logic in the exception class is discouraged, because is then when inheritance starts to become a potential issue. On the other side, using interfaces solves no problem at all. What it does is that it creates more work and/or potential confusion for implementors.&lt;/p>
&lt;p>So here it is, my rant. Oh, and one more thing. For the love of Pete, stop suffixing your interface names with the word &lt;code>Interface&lt;/code>. It is useless and repetitive. You don&amp;rsquo;t name your classes &lt;code>QueueClass&lt;/code>. Why do it with interfaces?&lt;/p></content></item><item><title>Preventing tenant pollution in multitenant applications</title><link>https://blog.mnavarro.dev/posts/tenant-pollution/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/tenant-pollution/</guid><description>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.
One of those mistakes is what I&amp;rsquo;ve come to call tenant pollution. This means that many services or routines need the tenant as an argument in order to do something.</description><content>&lt;p>Last year I built a multitenant system for my employer Spatialest. It was my first time doing a multitenant system, so I researched a lot before doing it. I studied carefully the experience of platforms like Shopify, as their multi tenant requirements were similar to ours. But even after some careful study, I made some mistakes.&lt;/p>
&lt;p>One of those mistakes is what I&amp;rsquo;ve come to call &lt;strong>tenant pollution&lt;/strong>. This means that many services or routines need the tenant as an argument in order to do something. This causes the tenant or the tenant unique identifier to be passed around many layers of the codebase. Basically, the tenant was &lt;strong>everywhere&lt;/strong> in the code.&lt;/p>
&lt;p>For example, this is a small part of our filesystem interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Filesystem&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path, &lt;span style="color:#a6e22e">StreamInterface&lt;/span> $contents)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $path)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">StreamInterface&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation contains a &lt;code>TenantProvider&lt;/code> that can use the tenant id to retrieve information about the tenant and use that information to determine the folder name where all the tenant files should be stored.&lt;/p>
&lt;p>All of our services are pretty much similar. Here is another example of the &lt;code>EmailFactory&lt;/code>, that creates email messages.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">EmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $tenantId, &lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The approach is pretty much similar to the filesystem one. We pass the tenant so we can fetch their settings. With the settings, we will created custom branded emails for our tenant with their corporate logos and images.&lt;/p>
&lt;p>I have to say that when I was implementing all these services I sort of smelled this. Didn&amp;rsquo;t liked it, but I preferred to the alternative of shared internal service state. And there is nothing I am more against than that. It is terrible OOP.&lt;/p>
&lt;p>Many developers would do this. They will remove the tenant and pass it to a setter in the service.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setTenant&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, once you set the tenant state you could run into all sorts of undesired side effects. PHP does not make this very obvious, due to the fact that when executed in CGI mode all the state is regenerated across requests. But when you are using React PHP or spinning workers in Road Runner, that&amp;rsquo;s when it bites you. If you move to other languages you cannot and must not do this. PHP should not be the exception.&lt;/p>
&lt;p>But I sort of had a realization when working in the frontend with React and other frameworks. You see, state in frontend is everywhere. Everything is side-effecty and built around state. Frontend developers live with this reality all the time. It teaches them not to &lt;em>fear&lt;/em> state, but to tame it and manage it properly. This is the reason why React&amp;rsquo;s &lt;code>useEffect&lt;/code> hook exists.&lt;/p>
&lt;p>I asked myself. Okay, shared state stored in a service is bad but, is there a way in which I could control it, or tame it?&lt;/p>
&lt;p>I said, first, let&amp;rsquo;s acknowledge it&amp;rsquo;s existence in an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, how can unset that initialized state so I avoid side effects? Like &lt;code>useState&lt;/code> in React works: I will return a &lt;code>callable&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is how it would look in the email factory:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteEmailFactory&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $tenant;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tenant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
};
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $messageName, &lt;span style="color:#66d9ef">array&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> [])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Email&lt;/span>
{
&lt;span style="color:#75715e">// Do the action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret is this: when executed, the callable will leave the class in it&amp;rsquo;s original state. Now, you can group a bunch of these services into a composite initializer and have a single place in your code where you will initialize all the tenant state, group the callables to unset the state, and then return them.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CompositeTenantState&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">TenantState&lt;/span>
{
&lt;span style="color:#e6db74">/** @param TenantState[] $states **/&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span> $states;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">TenantState&lt;/span> &lt;span style="color:#f92672">...&lt;/span>$states)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $states;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(&lt;span style="color:#a6e22e">Tenant&lt;/span> $tenant)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">callable&lt;/span>
{
$unsets &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">states&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $state) {
$unsets[] &lt;span style="color:#f92672">=&lt;/span> $state&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">initialize&lt;/span>($tenant);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () &lt;span style="color:#66d9ef">use&lt;/span> ($unsets) {
&lt;span style="color:#66d9ef">foreach&lt;/span> ($unsets &lt;span style="color:#66d9ef">as&lt;/span> $unset) {
$unset();
}
};
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You implement &lt;code>TenantState&lt;/code> in every service that needs the tenant, and you pass it to this composite implementation.&lt;/p>
&lt;p>This approach is great. If you are using middleware, you can initialize all the tenant state early in the pipeline, and then, when the request has finished, you unset all the state you have set. It is useful also for centralizing initialization of many services at once, so if you need to run the same logic in a console command, you can set up all the services for a tenant and use them freely.&lt;/p>
&lt;p>I wish I could have done this since the beginning. Object graphs would be simpler and methods shorter. Well, I guess you never cease to learn.&lt;/p></content></item><item><title>Namespaced Taxonomy Syndrome</title><link>https://blog.mnavarro.dev/posts/namespaced-taxonomy-sindrome/</link><pubDate>Mon, 20 Jul 2020 20:00:00 +0100</pubDate><guid>https://blog.mnavarro.dev/posts/namespaced-taxonomy-sindrome/</guid><description>The Discovery of a Syndrome The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).
I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;.</description><content>&lt;h2 id="the-discovery-of-a-syndrome">The Discovery of a Syndrome&lt;/h2>
&lt;p>The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).&lt;/p>
&lt;p>I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;. I thought I was setting up myself for another OOP basher and functional lover, but then it realized it was 2012: functional was not trendy yet. So I was interested in what he had to say.&lt;/p>
&lt;p>It was a brilliant talk. I didn&amp;rsquo;t really agree much with his &amp;ldquo;less lines of code is better&amp;rdquo; philosophy. But he had some excellent points about the misuse (overuse) of some OOP features, specifically about namespaces and classes. But the part that struck me was &lt;a href="https://youtu.be/o9pEzgHorH0?t=567">something he quoted about nine minutes into the talk&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Namespaces are for preventing name collisions, not for creating taxonomies.&lt;/p>
&lt;p>~ Jack Diederich&lt;/p>
&lt;/blockquote>
&lt;p>That really blew my mind. I felt guilty. I have absolutely misused namespaces basically since I started in OOP. I&amp;rsquo;ve done the &lt;code>use MuffinMail\MuffinHash\MuffinHash&lt;/code> thing. What he is describing is what I&amp;rsquo;ve decided to call &lt;strong>Namespaced Taxonomy Syndrome&lt;/strong>. Every single PHP project does this thing. It&amp;rsquo;s everywhere.&lt;/p>
&lt;p>Take this almost randomly picked example from the &lt;code>Illuminate&lt;/code> namespace in Laravel:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">use Illuminate\Broadcasting\Broadcasters\Broadcaster;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When did we learn to do this? When did we all implicitly agree that doing namespaces this way is somehow the state of the art? Why not go with &lt;code>Illuminate\Broadcaster&lt;/code>? Is there any other &lt;code>Broadcaster&lt;/code> inside the &lt;code>Illuminate&lt;/code> namespace that we can collide with? I think I have some possible explanations.&lt;/p>
&lt;p>Taxonomies are useful for organizing. That is the reason we put classes in different folders: to keep them organized. It is the reason why Laravel (and everyone else!) does this. There is a folder called &lt;code>Broadcasting&lt;/code>, that contains a folder called &lt;code>Broadcasters&lt;/code> that contains a PHP file that defines the interface &lt;code>Broadcaster&lt;/code>. Laravel developers need that structure so that code stays separate from other unrelated code. We need the &lt;code>Broadcasters&lt;/code> folder to know where to find them.&lt;/p>
&lt;p>But, by using taxonomies (folders) to organize our code, we silently fell into a trap and we embraced a very wrong assumption: &lt;strong>the assumption that our folder structure must mirror our namespace structure&lt;/strong>. This is probably due to the way the &lt;a href="https://www.php-fig.org/psr/psr-4/">PSR-4 Autoloading Standard&lt;/a> baked into Composer is commonly used, usually pointing to a single directory and working from there.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, when we use composer psr-4 autoload like this we will inevitably use namespaces as taxonomies since we need to keep our code organized. So, how can we solve this? How can we keep things separated still and yet simplify our namespace use?&lt;/p>
&lt;h2 id="a-better-approach">A Better Approach&lt;/h2>
&lt;p>Let&amp;rsquo;s take the &lt;code>Illuminate&lt;/code> example again. Imagine they have the following directory structure now:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">âââ src
Â Â  âââ broadcasters
Â Â  âÂ Â  âââ Broadcaster.php Illuminate\Broadcaster
Â Â âÂ Â  âââ OtherBroadcaster.php Illuminate\OtherBroadcaster
Â Â  âÂ Â  âââ LogBroadcaster.php Illuminate\LogBroadcaster
Â Â  âââ other-thing
Â Â Â  Â  âââ SomeInterface.php Illuminate\SomeInterface
Â Â  Â Â  âââ ImplementationOne.php Illuminate\ImplementationOne
Â Â  Â Â  âââ ImplementationTwo.php Illuminate\ImplementationTwo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, we still have all related code in separate folders to keep things organized. This is the taxonomy part. But notice that the Fully Qualified Class Names of every of these files are all of them direct children of the &lt;code>Illuminate&lt;/code> namespace. Basically, they are all in the same namespace and that&amp;rsquo;s okay, because the aim of namespaces is to prevent name collisions. There will be no other &lt;code>Illuminate\Broadcaster&lt;/code> and if there is one, you either taxonomize it in the name itself, or then you can create another namespace to contain it. But not before that.&lt;/p>
&lt;p>So, how do we make this file structure work with composer? There are mainly two ways:&lt;/p>
&lt;p>The first way is to pass an array of paths to the PSR-4 autoloaded namespace, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;Illuminate\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/broadcasters&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What you are saying here to composer is that all of these folders are inside the same namespace. Cool, isn&amp;rsquo;t?
This way, you get the double benefit. First, your code is still organized in different folders to help you reason about it and keep things organized for development. Second, our namespaces fulfil the purpose of avoiding collisions, and for that reason they are easier to use and simpler to reason about.&lt;/p>
&lt;p>The second way of doing it is simpler. It does not require to specify every folder. Instead you can just tell composer to build you a &lt;em>classmap&lt;/em> scanning every single one of your source files.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;classmap&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can create as many folders as you want in src and organize them and moving them at will. The only thing that matters is that all of them have the same namespace declaration.&lt;/p>
&lt;p>If you are a maintainer of a set of packages that share a common namespace, putting all of them in the same namespace reduces the number of imports you need to write. After all, is your namespace. It does make sense that your code lives under the same one. It is also easier for library users to use your code and write the proper inputs.&lt;/p>
&lt;p>I&amp;rsquo;m currently refactoring all my packages to do this. It is a huge breaking change, and maybe popular libraries will most definitely not do this (a very wise choice). But since none of my libraries is extremely popular, I can probably introduce major BC breaks on any of my libraries next major version.&lt;/p>
&lt;p>For instance, I&amp;rsquo;m developing a new Http Framework for PHP powered by a set of components. I&amp;rsquo;m putting everything http related under &lt;code>FrameworkName\Http&lt;/code> and everything else under &lt;code>FrameworkName\Support&lt;/code>. (And even that is using taxonomies a lot!).&lt;/p>
&lt;h2 id="a-note-on-the-test-namespace">A Note on the Test Namespace&lt;/h2>
&lt;p>This works really well for testing too. You can put your tests into the same namespace than your source code, but under the &lt;code>autoload-dev&lt;/code> key in composer. Why is there another namespace for testing? There is no reason to do so. Don&amp;rsquo;t be afraid of:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;autoload&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;src/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;src/some-other-thing&amp;#34;&lt;/span>, ]
}
},
&lt;span style="color:#f92672">&amp;#34;autoload-dev&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;psr-4&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;MyAwesomeNamespace\\&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;tests/some-thing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tests/some-other-thing&amp;#34;&lt;/span>, ]
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-note-on-reorganizing-and-refactoring">A Note on Reorganizing and Refactoring&lt;/h2>
&lt;p>Projects grow, and usually the initial folder structure becomes messy, and sometimes we need to move stuff around or rename it to make better sense of it. We all have gone trough that. By putting everything under the same namespace, reorganizing code becomes a matter of creating folders and moving files. Namespaces and references need not to be touched, which gives you a lot of freedom to choose the directory structure that suits you the better.&lt;/p>
&lt;h2 id="a-note-on-taxonomies-in-ddd-with-hexagonal-architecture">A Note on Taxonomies in DDD with Hexagonal Architecture&lt;/h2>
&lt;p>DDD projects with Hexagonal Architecture are well known for their deeply nested namespace structure. I have one that has a class called &lt;code>Project\Domain\Model\Account\Account&lt;/code>, and also one called &lt;code>Project\Infrastructure\Persistence\Account\DoctrineAccount&lt;/code>. That is simply just full-blown taxonomy.&lt;/p>
&lt;p>I just need &lt;code>Project\Account&lt;/code> and &lt;code>Project\DoctrineAccount&lt;/code>. Nothing else. They could live in totally different folders, but they need not to be in different namespaces. All the things in the middle is just taxonomies to keep things organized.&lt;/p>
&lt;p>You could allow &lt;code>Project\BoundedContext&lt;/code> just because you could have two account objects in different bounded contexts and they are definitely not the same account. So namespaces fulfil their role here by separating meanings between bounded contexts. But more than that is taxonomy syndrome.&lt;/p>
&lt;p>With this method, I can still keep the folders organized in and Hexagonal Architecture way, but keeping the namespace use consistent (and short!) This even helps to fulfil the use of the Domain Language in code.Domain Events and Errors can be in the same namespace too, but in totally different folders, that way we can easily find them.&lt;/p>
&lt;p>If you want to separate into packages the different layers, then the package name is your taxonomy: &lt;code>project/persistence&lt;/code>. When your package is autoloaded, it will bring the persistent implementation of the classes you already have into the same common namespace. It&amp;rsquo;s a win in every side you look at it.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This is a really good approach to try in your next project. You&amp;rsquo;ll be amazed of the simplicity, the clarity and the freedom that an approach like this will give you. It will make your code simpler, easier to reason about and very flexible to restructuring.&lt;/p></content></item><item><title>The case for Object Mapping</title><link>https://blog.mnavarro.dev/posts/the-case-for-object-mapping/</link><pubDate>Tue, 28 Apr 2020 20:00:00 +0000</pubDate><guid>https://blog.mnavarro.dev/posts/the-case-for-object-mapping/</guid><description>Introduction: A Tale of Simplicity VS Complexity NOTE: Every time the word array is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of stdClass or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.</description><content>&lt;h2 id="introduction-a-tale-of-simplicity-vs-complexity">Introduction: A Tale of Simplicity VS Complexity&lt;/h2>
&lt;blockquote>
&lt;p>NOTE: Every time the word &lt;strong>array&lt;/strong> is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of &lt;code>stdClass&lt;/code> or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.&lt;/p>
&lt;/blockquote>
&lt;p>The selling point for PHP in its early days was simplicity. It promised an escape from the complex ways of Java, .NET and others, that felt too cumbersome for people that wanted to do simple tiny scripts. The promise was that you didn&amp;rsquo;t need to think about data structures, memory allocation, objects, inheritance, third party libraries and so on and so forth if all you wanted was to dynamically render a bit of content on a page.&lt;/p>
&lt;p>The problem is that PHP grew in popularity. People started to ask more and more functionality to be able to do more advanced things, and somehow the language grew in a very un-organic way; but that&amp;rsquo;s another story. The point I&amp;rsquo;m trying to make is that PHP ceased to be used for simple scripts. Complex enterprise-scale applications are being built in PHP nowadays. And suddenly, we realized that this language that was so friendly for small and simple stuff, is not that friendly for big and &lt;em>enterprisy&lt;/em> things: at least not used in the traditional ways.&lt;/p>
&lt;p>This is the reason why the PHP Internals team has been investing a lot of development time in features that would make the language more reliable, like runtime type checking and improved object oriented support. The fact that the language was being heavily used for large-scale applications led to the realization that we needed more appropriate features to support that use.&lt;/p>
&lt;p>This is not a PHP-only realization. The story of Javascript is quite similar. Javascript, as a language, was conceived to make your mouse drop color sparks on movement, or your home banner to drop snow in december. But since its port to the backend by the Node JS runtime, Javascript developers used it to build complex stuff. They realized too that the language was also very unreliable for large-scale business-process-style projects; hence Typescript.&lt;/p>
&lt;p>This new push for types and oop features in languages whose initial premise of existence was to get rid of all that &lt;strong>unnecessary complexity&lt;/strong> should not be left unnoticed. We have valuable lessons to learn here.&lt;/p>
&lt;p>Maybe the lesson is that choosing the simpler solution to a problem only gets you that far. When the problem grows in complexity, the simple approach cannot really cope and, in a glorious paradox, mutates into a complexity monster itself. And maybe the other lesson that we can learn is that costs more time and effort to move to a complex approach from a simpler one, than the other way around.&lt;/p>
&lt;p>But you are right. This, at the end of the day, is mere narrative. So I want to tackle this issue with a practical, very common case. The case of object mapping.&lt;/p>
&lt;h2 id="arrays-vs-objects">Arrays VS Objects&lt;/h2>
&lt;p>There are mainly two approaches when working with databases in PHP nowadays. You can either design DAO classes that will contain queries that will fetch you the data that you need in arrays; or you can build your persistence layer on top of an ORM and map those database queries results into well defined classes/objects.&lt;/p>
&lt;p>The simpler, faster, more straightforward route is the first one, by far. Here is a comparison in implementation with code. Let&amp;rsquo;s go with the DAO/array approach:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span> $pdo;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">PDO&lt;/span> $pdo)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $pdo;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">array&lt;/span>
{
$stmt &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">prepare&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SELECT * FROM users WHERE id = :id&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> ($stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">execute&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $id]) &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">QueryError&lt;/span>();
}
&lt;span style="color:#66d9ef">return&lt;/span> $stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">FETCH_ASSOC&lt;/span>);
}
}
$pdo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span>(&lt;span style="color:#e6db74">/** Connection details here **/&lt;/span>);
$dao &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">UserDAO&lt;/span>($pdo);
$user &lt;span style="color:#f92672">=&lt;/span> $dao&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getUserById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the object mapping approach (Using Doctrine ORM):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#75715e">// First, you need to create your entity class with annotations
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Entity
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Id
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;integer&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> * @GeneratedValue
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> $id;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $username;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $password;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;string&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span> $email;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @Column(type=&amp;#34;datetime&amp;#34;)
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $registeredAt;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(
&lt;span style="color:#a6e22e">string&lt;/span> $username,
&lt;span style="color:#a6e22e">string&lt;/span> $password,
&lt;span style="color:#a6e22e">string&lt;/span> $email
) {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $username;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $password;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $email;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>);
}
&lt;span style="color:#75715e">// All the getters here, which use more space
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#75715e">// Then you need to bootstrap your entity manager
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$paths &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/path/to/entity-files&amp;#34;&lt;/span>];
$isDevMode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
$dbParams &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;uri&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mysql://user:pass@host:port/database&amp;#39;&lt;/span>];
$config &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Setup&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">createAnnotationMetadataConfiguration&lt;/span>($paths, $isDevMode);
$entityManager &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">EntityManager&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>($dbParams, $config);
&lt;span style="color:#75715e">// We can then query our objects
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$user &lt;span style="color:#f92672">=&lt;/span> $entityManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;some-id&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the ORM example is not significantly longer in lines, it is more complex for all the jargon and the tooling it introduces. There is a cost to learn how to use an ORM versus how to make SQL queries (supposing the developer already knows how to do the latter).&lt;/p>
&lt;p>Now, considering that an ORM &lt;strong>does not have&lt;/strong> a significant cost in implementation lines but &lt;strong>it does have&lt;/strong> one in learning/training for its use, and &lt;strong>supposing&lt;/strong> that that usage brings benefits in the long run, then the million dollar question is: &lt;strong>is that cost worth those benefits?&lt;/strong> That&amp;rsquo;s all, really.&lt;/p>
&lt;p>In order to answer that question we need to come to see those supposed benefits. The only way to do that is comparing it to the other approach in the context of the daily practice of working in a codebase. I like to draw this comparison by pointing to the deficiencies of the array + DAO approach in short statements, and how the object-mapping approach is different, and better.&lt;/p>
&lt;h2 id="arrays-are-not-reliable-structures-objects-derived-from-classes-are">Arrays are not reliable structures, objects derived from classes are&lt;/h2>
&lt;p>This is THE problem with arrays in PHP: they are very unreliable data structures by design. In the DAO approach, for example, that array returned from the user data can contain anything (who knows what), can be read by anyone with access to the reference, and modified too, without any kind of constraints.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">
$user[&amp;#39;id&amp;#39;] = 1;
$user[&amp;#39;username&amp;#39;] = &amp;#39;Tom&amp;#39;;
$user[&amp;#39;password&amp;#39;] = &amp;#39;my-hashed-password&amp;#39;;
// You get the idea...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This create a host of problems. There are simply so many things can go wrong using them:&lt;/p>
&lt;ol>
&lt;li>What if the hashed password of a user gets dumped in a report by accident?&lt;/li>
&lt;li>What if suddenly &lt;code>username&lt;/code> is no longer a string but null? How do I know that?&lt;/li>
&lt;li>What if someone deleted a key that other code depends on because he/she was trying to do something else, like hiding the password, for example?&lt;/li>
&lt;li>What if I misspelled a key name in a critical production operation?&lt;/li>
&lt;li>What if I leave the array in a inconsistent state that could affect future computations, like &lt;code>['isAccountActive' =&amp;gt; true, 'deactivationDate' =&amp;gt; '05/24/1988']&lt;/code>?&lt;/li>
&lt;/ol>
&lt;p>I could go on forever&amp;hellip;&lt;/p>
&lt;h2 id="arrays-lead-to-over-tested-code-objects-derived-from-classes-require-less-testing">Arrays lead to over-tested code, objects derived from classes require less testing&lt;/h2>
&lt;p>You could argue that these problems should be solved by testing the system and its routines, and you are absolutely right. This, however, assumes that the developer does test the codebase, which is not always true in my own observations of reality. Nonetheless, being generous, I can concede that.&lt;/p>
&lt;p>The main problem here is over-testing. Since your language has features to automatically prevent all the kind of undesirable state mutations that I pointed out, but you are not using them, you end up writing more tests than you should, because now you have to check for invalid state mutations in every routine. This leads, instead of unit testing or spec testing, to case-per-case testing, which is a very expensive way to test. It is expensive because it is really hard to set up, and also because it is very easy to break those tests.&lt;/p>
&lt;p>&lt;strong>If you don&amp;rsquo;t want to have problems working with arrays, you have to test your system extensively, adding big costs to the development effort.&lt;/strong>&lt;/p>
&lt;p>Or, you could use defined classes with protected state, and allow to read only what is necessary, specifying return types and only allowing valid state mutations by providing a good api to client classes. Did I mention you can write comments in its methods too, as means of documentation?&lt;/p>
&lt;h2 id="arrays-are-not-new-developers-friendly-objects-derived-from-classes-are">Arrays are not new-developers friendly, objects derived from classes are&lt;/h2>
&lt;p>Even when you can get away with testing your codebase extensively to use arrays (which I highly doubt), another problem is that, if I&amp;rsquo;m not the main developer of the application or I am not familiar with the system in any way, I&amp;rsquo;m going to have a really hard time working with those arrays if I ever need to fix something. I&amp;rsquo;ll spend hours dumping and debugging what an array exactly contains at any given point in the code, instead of actually solving a problem. I might even try to do that again and again with different inputs. All that is time consuming, and the hourly rate of a developer is not quite cheap to be honest.&lt;/p>
&lt;p>How much easier would be for me to jump in to the development effort aided by a good designed class and my favorite IDE&amp;rsquo;s autocomplete and go-to features? Oh, I see that the method &lt;code>getDeactivationDate&lt;/code> can return an instance of DateTime or null. I can work with that!&lt;/p>
&lt;p>&lt;strong>In the long run, using objects reduces development costs by allowing other developers reasoning about the codebase faster.&lt;/strong>&lt;/p>
&lt;p>You could make the point, however, that this is easily solvable by documenting the structure of arrays in some form of specification. Again, that does not make them not changeable and suddenly trustworthy, but at least is a start. But, can you see the irony? You &lt;strong>need&lt;/strong> a spec, and that is exactly what a class is: is an specification, a structure, a contract, a blueprint. The only difference is that is not optional, it is enforced by the language. And better yet, does not live in an obscure word document stored somewhere else, but in your codebase. I don&amp;rsquo;t know about you, but that makes a pretty good spec for me.&lt;/p>
&lt;p>I guarantee you: the time that could be spent writing that documentation specification is more than writing the class itself. Why don&amp;rsquo;t make the class the spec then?&lt;/p>
&lt;h2 id="arrays-are-anemic-objects-derived-from-classes-are-rich">Arrays are anemic, objects derived from classes are rich&lt;/h2>
&lt;p>Arrays are bags of data with no more meaning that the one you remember from when you were working on the code for the last time. But the things we are doing with our software are full of meaning: we are storing users, login them in, adding or removing permissions. We are managing reservations, scheduling meetings, sending emails, transferring cargo, selling goods, you name it! Surely we are missing something when we try to do that moving around bags of uncertain data.&lt;/p>
&lt;p>Having a &lt;code>User&lt;/code> class with a &lt;code>login&lt;/code> method sounds pretty straightforward to me. So it does a &lt;code>Cargo&lt;/code> class with a &lt;code>transfer&lt;/code> method, or a &lt;code>Order&lt;/code> class with a &lt;code>pay&lt;/code> one. I can easily figure out what is going on there. This is what is so cool about objects: state and behavior live together in one place, because in our stateful world, they should!&lt;/p>
&lt;p>However, arrays cannot contain any behavior associated with them. So if you want to repeat a routine over a similar structure of data, you have to rewrite that routine somewhere else, which in turn leads to bloated client code. This is the difference between an anemic data model (one that contains just plain data) and a rich one (one that has the data, but also is full of behavior). The latter serves client code better by means of &lt;a href="https://martinfowler.com/bliki/TellDontAsk.html">Telling-Not-Asking&lt;/a>.&lt;/p>
&lt;p>To be fair, you can always create a function to perform a common task over an array. But again, that function needs to operate over an array with a very special structure, not any array. And we have seen how easy is to break them. Why separate then that apparent natural association between the data and the actions that can occur over that data?&lt;/p>
&lt;p>&lt;strong>But, in summary, using objects helps to encapsulate logic that otherwise would be repetitive, and would lead to bloated client code.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-cannot-benefit-of-ide-tooling-objects-can">Arrays cannot benefit of IDE tooling, objects can&lt;/h2>
&lt;p>Arrays don&amp;rsquo;t offer autocompletion when working with them, likes objects do. I&amp;rsquo;ve sort of mentioned this in the past, but not as explicitly. Autocompletion is a powerful IDE feature that aids the developer and saves him/her from wasting time in silly mistakes.&lt;/p>
&lt;p>Also, arrays are hard to refactor. If you rename a key, you have to track all the uses of that key in your code and change it to the new one. Working with objects and with an appropriate IDE you can refactor a method name in an instant.&lt;/p>
&lt;p>&lt;strong>So again, using objects aids development by means of saving time and improving naming conventions when necessary.&lt;/strong>&lt;/p>
&lt;h2 id="arrays-and-daos-do-not-scale-as-well-as-objects-and-repositories-do">Arrays and DAOs do not scale as well as Objects and Repositories do&lt;/h2>
&lt;p>Queries in DAOS can really grow wild and complex. It&amp;rsquo;s impossible not to have a combinatorial explosion of method names without using some sort of query builder. Also, is even hard to switch between different SQL implementations, like Sqlite, MySQL, Postgres or even Oracle. This increases maintenance time when dealing with changes of schema or implementing new methods.&lt;/p>
&lt;p>ORMs abstract away all these details and create some sort of a protection layer between vendors by choosing a subset of their functionality. This is how, at the end of the day, abstraction works: it has the benefits of being consistent, but with a limited subset of functionality. They have excellent query building capabilities already backed into their engines, so we don&amp;rsquo;t have to reinvent the wheel.&lt;/p>
&lt;p>This makes ORM scale better in terms of maintainability. Abstracting away all those details helps us focus on writing code rather than worrying about queries. Here the maxim applies more than in any other place: the simpler solution grows complex when the problem grows too. The complex solution costs more up front, but scales better when the problem gets complicated.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>These are probably the main reasons why I think working with objects derived of well designed classes is always going to be better than working with other unreliable data structures. Again, costs more up front (and not so much if you have appropriate tooling like PHP Storm), but the benefits on the long run are huge.&lt;/p>
&lt;p>And if these reasons don&amp;rsquo;t convince you, maybe just like a look at the recent trend. Languages historically known to be simpler and flexible adopting more complex and stricter features. That&amp;rsquo;s got to say something, isn&amp;rsquo;t it?&lt;/p></content></item><item><title>Repository Pattern Done Right</title><link>https://blog.mnavarro.dev/posts/repository-pattern-done-right/</link><pubDate>Mon, 17 Feb 2020 20:00:00 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/repository-pattern-done-right/</guid><description>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.
Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool.</description><content>&lt;p>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.&lt;/p>
&lt;p>Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool. Refining your use of tools and patterns this way is, with almost all certainty, the only way to grow as a developer. Years of experience don&amp;rsquo;t count much if you have been doing the same thing, the same way, over and over again.&lt;/p>
&lt;p>This is why I implement and use repositories very differently now than the first time I started. This is probably because of the experience (both good and bad) that I&amp;rsquo;ve accumulated over the years. I&amp;rsquo;ve also read quite a lot on the topic, and certainly I&amp;rsquo;m not the only one that has experienced issues implementing repositories in my applications.&lt;/p>
&lt;p>So, with the years, I&amp;rsquo;ve come to a definition of repositories, and is this one:&lt;/p>
&lt;blockquote>
&lt;p>Repositories are an specific and immutable abstraction over a collection of domain objects.&lt;/p>
&lt;p>~ MatÃ­as Navarro Carter&lt;/p>
&lt;/blockquote>
&lt;p>Let me tell you what I mean by that.&lt;/p>
&lt;h2 id="warning-active-record-users">Warning: Active Record Users&lt;/h2>
&lt;p>Repositories tend to work with ORMs &amp;ndash; even though is not a requirement, it&amp;rsquo;s very common practice. However, not any kind of ORM can be used for working with repositories. I think a word of warning is necessary for users of Active Record ORMs (I&amp;rsquo;m talking about you, Yii and Laravel users). I&amp;rsquo;ve read several blog posts (like &lt;a href="https://dev.to/asperbrothers/laravel-repository-pattern-how-to-use-why-it-matters-1g9d">this one&lt;/a>, or &lt;a href="https://itnext.io/repository-design-pattern-done-right-in-laravel-d177b5fa75d4">this other one&lt;/a>) that promise an implementation of repositories the Laravel Wayâ¢, which is really not the repository pattern, but a poorly abstracted interface over Eloquent. Don&amp;rsquo;t get me wrong: Active Record ORMs are good on what they do, they just don&amp;rsquo;t fit the requirements for the repository pattern. Don&amp;rsquo;t try to use Active Record ORMs for repositories: they just don&amp;rsquo;t fit the use case. Embrace Active Record: you already made the choice of coupling your data model to your persistence layer. If you won&amp;rsquo;t take my word for it, &lt;a href="https://laravelpodcast.com/episodes/9dafa72e?t=34m3s">take Jeffrey Way&amp;rsquo;s&lt;/a>.&lt;/p>
&lt;h2 id="repositories-are-abstractions">Repositories are Abstractions&lt;/h2>
&lt;p>Just to continue with the thread, the main reason why Active Record ORMs don&amp;rsquo;t fit the repository pattern is because &lt;strong>repositories are abstractions&lt;/strong>, and Active Record Data Models are not. When you create a data model in Laravel, for example, you are not fetching a &lt;em>pure&lt;/em> data class, but a whole lot of other stuff related to persistence, like your database connections, mutators and all sorts of stuff. All that lives in your data model, and that renders it unusable for the level of abstraction required for the repository pattern.&lt;/p>
&lt;p>To be fair with the Eloquent guys, this is true of Doctrine repositories also. If you are using doctrine repositories &lt;em>as they are&lt;/em>, you are not abstracting anything away. You are coupled to Doctrine, which is in turn coupled to a relational database engine. That leaves you in the same place as using Eloquent (a bit better though, because your data model is a &lt;em>pure&lt;/em> data class).&lt;/p>
&lt;p>In the Symfony world, it&amp;rsquo;s common to see something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeController&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>(&lt;span style="color:#a6e22e">Request&lt;/span> $request)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span>
{
&lt;span style="color:#75715e">// This repository is the doctrine&amp;#39;s library one
&lt;/span>&lt;span style="color:#75715e">&lt;/span> $repo &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getRepository&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$users &lt;span style="color:#f92672">=&lt;/span> $repo&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">json&lt;/span>($users);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you do this, stop. You are not using a &lt;strong>proper&lt;/strong> abstraction here. It&amp;rsquo;s true: the Doctrine repository is an abstraction over the &lt;code>EntityManager&lt;/code>, &lt;code>QueryBuilder&lt;/code>, &lt;code>Connection&lt;/code> and a bunch of other stuff: but is a doctrine-specific abstraction. You need a &lt;strong>Domain-specific abstraction&lt;/strong>. One abstraction that is only yours, your own contract.&lt;/p>
&lt;p>So what we should do then? We just define an interface:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#75715e">// This is your data class
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|User[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a proper abstraction. Your &lt;code>User&lt;/code> class is a class that just contains data. Your &lt;code>UserRepository&lt;/code> interface is your contract. You can use the Doctrine repository behind it, but it won&amp;rsquo;t matter this time, because you will type hint the interface to all other classes using it. This way you effectively decouple yourself of any persistence library/engine and get an abstraction you can use all around your codebase.&lt;/p>
&lt;h2 id="repositories-are-specific">Repositories are Specific&lt;/h2>
&lt;p>Note how the &lt;code>UserRepository&lt;/code> we defined is &lt;strong>model specific&lt;/strong>. A lot of people like to save work by creating a generic repository, that becomes no more than a query abstraction over the persistence library used. Just don&amp;rsquo;t do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @return iterable|object[]
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">all&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $repositoryClass)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember one of the principles of DDD: clear language intent. One repository interface for each model conveys more meaning to that specific repository/model than a generic one. For example: only users can be filtered by email, not buildings.&lt;/p>
&lt;p>Besides with one generic repository for everything, you won&amp;rsquo;t be able to type your concrete model classes to the return or argument types. It&amp;rsquo;s the longer route, but is definitely the most convenient and flexible.&lt;/p>
&lt;h2 id="repositories-are-collections">Repositories are Collections&lt;/h2>
&lt;p>I would say that the &amp;ldquo;Aha!&amp;rdquo; moment in repositories for me is when I realized that they are just an abstraction over a collection of objects. This blew my mind and gave me a new challenge; the challenge of implement repositories as if they were an in-memory collection.&lt;/p>
&lt;p>For starters, I dumped all methods like &lt;code>all()&lt;/code>, &lt;code>allActiveUsers()&lt;/code> or &lt;code>allActiveUsersOfThisMonth()&lt;/code>. If you have read the two famous posts about taming repositories, first the one of &lt;a href="http://drafts.easybib.com/post/44139111915/taiming-repository-classes-in-doctrine-with-the">Anne at Easybib&lt;/a> and then the one of &lt;a href="https://beberlei.de/2013/03/04/doctrine_repositories.html">Benjamin Eberlei in response&lt;/a>, you should know that methods like that in a repository can really grow wild. Also, you don&amp;rsquo;t need all the complexity of the specification pattern: we can do better and simpler than that.&lt;/p>
&lt;p>Collections apis have many distinctive features: the possibility of slice them, filter them, and add or remove new items to them as well as getting individual items. But we don&amp;rsquo;t want a general collection api, remember? We want to implement a specific api for every model, so it conveys meaning.&lt;/p>
&lt;p>So, our &lt;code>UserRepository&lt;/code> interface could look this way:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Countable&lt;/span>, &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $userId)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTimeInterface&lt;/span> $date)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pay special attention to the last three methods. These are the only methods that could potentially be in a &lt;code>Repository&lt;/code> base interface, because all of them will be sliceable, countable and iterable.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>, &lt;span style="color:#a6e22e">Countable&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So by doing this, all of your repositories will be sliceable (think pagination there), iterable and countable. The idea is that you apply the filtering methods (all the methods that return &lt;code>self&lt;/code>) and then iterate to execute the internal query Â¡just like an in-memory collection! In fact, you wouldn&amp;rsquo;t note the difference at all if an implementation is switched to another one.&lt;/p>
&lt;p>This is good OOP. All the persistence details are completely hidden from us, the api is composable and fits our needs for a repository. It looks neat and using it is really simple and easy to understand:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeService&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">UserRepository&lt;/span> $users)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $users;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">someMethod&lt;/span>()
{
$users &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>))
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;-30days&amp;#39;&lt;/span>));
$count &lt;span style="color:#f92672">=&lt;/span> $users&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> $users;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But here&amp;rsquo;s the question: how do we go about implementing an api like this? If you are a good observer, you might have realized that the filters return an instance of themselves, modifying the internal state of the repository. So in a next query, we will have the filters of the previous query applied, right?&lt;/p>
&lt;h2 id="repositories-are-immutable">Repositories are Immutable&lt;/h2>
&lt;p>Well, that could be right, if we really are modifying the internal state. But in reality, we are cloning the reference of the repository, so we never touch the original one. This is an implementation detail, but a very important one. If we change, let&amp;rsquo;s say, the state of the repository reference that lives inside our DI Container, then we are done: we cannot use that reference again. So the idea is to make it &lt;strong>immutable&lt;/strong>.&lt;/p>
&lt;p>Let me show you the final api, implemented in Doctrine ORM. I&amp;rsquo;m going to write some comments and docblocks in the code explaining some things.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\Tools\Pagination\Paginator&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMRepository
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * This is a custom abstract Doctrine ORM repository. It is meant to be extended by
&lt;/span>&lt;span style="color:#e6db74"> * every Doctrine ORM repository existing in your project.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * The main features and differences with the EntityRepository provided by Doctrine is
&lt;/span>&lt;span style="color:#e6db74"> * that this one implements our repository contract in an immutable way.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * This is Doctrine&amp;#39;s Entity Manager. It&amp;#39;s fine to expose it to the child class.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var EntityManagerInterface
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> $manager;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We don&amp;#39;t want to expose the query builder to child classes.
&lt;/span>&lt;span style="color:#e6db74"> * This is so we are sure the original reference is not modified.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * We control the query builder state by providing clones with the `query`
&lt;/span>&lt;span style="color:#e6db74"> * method and by cloning it with the `filter` method.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> $queryBuilder;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> * @param string $entityClass
&lt;/span>&lt;span style="color:#e6db74"> * @param string $alias
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager, &lt;span style="color:#a6e22e">string&lt;/span> $entityClass, &lt;span style="color:#a6e22e">string&lt;/span> $alias)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $manager;
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createQueryBuilder&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">select&lt;/span>($alias)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">from&lt;/span>($entityClass, $alias);
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#a6e22e">int&lt;/span> $start, &lt;span style="color:#a6e22e">int&lt;/span> $size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Repository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($start, $size) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setFirstResult&lt;/span>($start)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setMaxResults&lt;/span>($size);
});
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @inheritDoc
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span>
{
$paginator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Paginator&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>());
&lt;span style="color:#66d9ef">return&lt;/span> $paginator&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>();
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Filters the repository using the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * It clones it and returns a new instance with the modified
&lt;/span>&lt;span style="color:#e6db74"> * query builder, so the original reference is preserved.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @param callable $filter
&lt;/span>&lt;span style="color:#e6db74"> * @return $this
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">callable&lt;/span> $filter)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>
{
$cloned &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this;
$filter($cloned&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> $cloned;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Returns a cloned instance of the query builder
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * Use this to perform single result queries.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @return QueryBuilder
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">QueryBuilder&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * We allow cloning only from this scope.
&lt;/span>&lt;span style="color:#e6db74"> * Also, we clone the query builder always.
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __clone()
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">clone&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">queryBuilder&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was the abstract repository. Note how we don&amp;rsquo;t expose the &lt;code>QueryBuilder&lt;/code>. This is because it&amp;rsquo;s dangerous: an inexperienced developer could apply filters to it and mutate the original reference, causing a massive bug. Instad, we provide two convenience methods for child classes, &lt;code>filter&lt;/code> and &lt;code>query&lt;/code>. The first one takes a callable which in turn takes a cloned instance of the &lt;code>QueryBuilder&lt;/code> as an argument. The second one just returns a cloned &lt;code>QueryBuilder&lt;/code> so the child class can query anything.&lt;/p>
&lt;p>Then, we use that api in our &lt;code>UserRepository&lt;/code> and implement the remaining methods.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\User&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DateTime&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\DBAL\Types\Types&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\EntityManagerInterface&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NonUniqueResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\NoResultException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Doctrine\ORM\QueryBuilder&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">RepositoryExample\Common\DoctrineORMRepository&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * Class DoctrineORMUserRepository
&lt;/span>&lt;span style="color:#e6db74"> * @package RepositoryExample\User
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMUserRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">DoctrineORMRepository&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ENTITY_CLASS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ALIAS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * DoctrineORMUserRepository constructor.
&lt;/span>&lt;span style="color:#e6db74"> * @param EntityManagerInterface $manager
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">EntityManagerInterface&lt;/span> $manager)
{
&lt;span style="color:#66d9ef">parent&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">__construct&lt;/span>($manager, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ALIAS&lt;/span>);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">persist&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span> $user)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>($user);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofId&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">manager&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">ENTITY_CLASS&lt;/span>, $id);
&lt;span style="color:#66d9ef">if&lt;/span> ($object &lt;span style="color:#a6e22e">instanceof&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @param string $email
&lt;/span>&lt;span style="color:#e6db74"> * @return User|null
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ofEmail&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $email)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#66d9ef">try&lt;/span> {
$object &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>()
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.email = :email&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>, $email)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getQuery&lt;/span>()&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">getSingleResult&lt;/span>();
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NoResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">NonUniqueResultException&lt;/span> $e) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DomainException&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;More than one result found&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">return&lt;/span> $object;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">withActiveStatus&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.active = true&amp;#39;&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredBefore&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;lt; :before&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:before&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">registeredAfter&lt;/span>(&lt;span style="color:#a6e22e">DateTime&lt;/span> $time)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">UserRepository&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">QueryBuilder&lt;/span> $qb) &lt;span style="color:#66d9ef">use&lt;/span> ($time) {
$qb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">where&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user.registeredAt &amp;gt; :after&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;:after&amp;#39;&lt;/span>, $time, &lt;span style="color:#a6e22e">Types&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">DATETIME_MUTABLE&lt;/span>);
});
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is really nice to work with. I&amp;rsquo;ve taken this approach is several projects so far and it feels great. The method names convey meaning and work well. Creating different implementations like a Doctrine Mongo ODM, Filesystem or In-Memory it&amp;rsquo;s trivial. Implementors just need to take into account the immutability aspect of it, but that&amp;rsquo;s all really.&lt;/p>
&lt;p>I really hope you like this approach as much as I do and start using it in your projects.&lt;/p></content></item><item><title>Unit-testing the filesystem in PHP</title><link>https://blog.mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description><content>&lt;p>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like &lt;a href="https://flysystem.thephpleague.com/docs/">Flysystem&lt;/a> or &lt;a href="https://github.com/knplabs/Gaufrette">Gaufrette&lt;/a>: just a simple mock of the interface and we are done.&lt;/p>
&lt;p>However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling. I started to get dissapointed of them and started looking at simpler approaches. For instance, PHP supports filesystem abstractions natively in the form of &lt;strong>stream wrappers&lt;/strong>. If you don&amp;rsquo;t know about them, you should really &lt;a href="https://dzone.com/articles/the-powerful-resource-of-php-stream-wrappers">take a look at them&lt;/a>!&lt;/p>
&lt;p>But there was just one thing that prevented me from going all-in with PHP stream wrappers, and this is that they are really complex to test, because they imply to hit the real filesystem since you cannot mock php filesystem functions.&lt;/p>
&lt;p>Well, it turns out not really. Actually, what if I told you that you can use PHP stream wrappers to create an in-memory filesystem for testing purposes? Actually, you don&amp;rsquo;t even have to create it, because it already exists!&lt;/p>
&lt;p>&lt;a href="https://github.com/adlawson/php-vfs">&lt;code>adlawson/vfs&lt;/code>&lt;/a> implements such filesystem, which is commonly called a &lt;em>virtual filesystem&lt;/em>. They way you use it it&amp;rsquo;s very similar to using a mock. You create the filesystem and leave it in the state you want for your tests. For example, here&amp;rsquo;s a test from one of the Espresso packages where I use it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
$templateEngineMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">TemplateEngineInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$transformerMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">TransformerInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
$mimeTypesMock &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">createMock&lt;/span>(&lt;span style="color:#a6e22e">MimeTypes&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;span style="color:#75715e">// Setting up virtual FS
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$fs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">FileSystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">factory&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;vfs://&amp;#39;&lt;/span>);
$fs&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mount&lt;/span>();
&lt;span style="color:#75715e">// We create a new directory with some files in it
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Directory&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">File&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Some file with no extension&amp;#39;&lt;/span>)]);
&lt;span style="color:#75715e">// Then we add the directory to the fs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>$fs&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;foo&amp;#39;&lt;/span>, $dir);
$mimeTypesMock&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">expects&lt;/span>($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">once&lt;/span>())
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">method&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;getMimeType&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">with&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">willReturn&lt;/span>(&lt;span style="color:#66d9ef">null&lt;/span>);
$simpleResponse &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">SimpleResponse&lt;/span>($templateEngineMock, $transformerMock, $mimeTypesMock);
$response &lt;span style="color:#f92672">=&lt;/span> $simpleResponse&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">withDownload&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;vfs://foo/bar&amp;#39;&lt;/span>); &lt;span style="color:#75715e">// Here we use it
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we have set up the filesystem, we can use the &lt;code>vfs://&lt;/code> stream wrapper like any other stream wrapper. This way, we can test behavior without hitting a real filesystem, what makes our test a truly unit one.&lt;/p>
&lt;p>Make sure you start testing the code depending on PHP native filesystem functions this way. You&amp;rsquo;ll see it&amp;rsquo;s a lot easier to work with, and way more reliable.&lt;/p></content></item><item><title>Efficient Reports in PHP</title><link>https://blog.mnavarro.dev/posts/php-efficient-reporting/</link><pubDate>Tue, 10 Dec 2019 11:18:48 -0300</pubDate><guid>https://blog.mnavarro.dev/posts/php-efficient-reporting/</guid><description>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p></description><content>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p>
&lt;ol>
&lt;li>Do not use ORMs&lt;/li>
&lt;li>Use non-buffered TCP connections&lt;/li>
&lt;li>Use PHP generators with abstractions&lt;/li>
&lt;li>Prefer easy-to-stream content types&lt;/li>
&lt;/ol>
&lt;p>There you have! My promise is that if you follow these simple four rules, your report writing experience will be much more pleasant and your application will work on them more efficiently. Let&amp;rsquo;s review these rules one by one:&lt;/p>
&lt;h2 id="1-do-not-use-orms">1. Do not use ORMs&lt;/h2>
&lt;p>ORMs, as indicated in the meaning of their acronym, have a very specific purpose. That purpose is to map relational database tables to the objects that contain our business logic. This is so we can abstract away persistence details and focus in expressing our domain in code. But a report is neither a domain action or a business rule. It&amp;rsquo;s just a report: some business guy wants to see data on an spreadsheet.&lt;/p>
&lt;p>Anything we use the ORM for that is not related to the purpose stated above constitutes a wrong use of the ORM. ORMs were designed for nothing else than domain objects mapping.&lt;/p>
&lt;p>If I load the ORM with ten thousand rows worth of database records, I&amp;rsquo;m not going to even reach a thousand before my script runs out of memory. This is because most ORMs have a in-memory cache of some sort, and also because objects consume more memory than more simpler data types, like hash maps or arrays. Some terrible things I&amp;rsquo;ve seen developers do to solve this is to increase the default memory limit of the application (worst idea ever) or to clear the memory cache of the Entity Manager every X iterations (not that bad, but still not the right thing to do).&lt;/p>
&lt;p>Even when you can get around the memory issue, you still are putting your system under a lot of stress because of all the mapping logic. Just stop there and ask yourself the question &amp;ldquo;Do I really need hydrated objects for this?&amp;rdquo; You&amp;rsquo;ll find that the answer is, in 99% of cases, no.&lt;/p>
&lt;p>This is really all you need.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserReporter&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">activeUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">inactiveUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need anything more complex than this. Implement it in PDO or any other database library, perform the necessary translations/normalizations, and return an iterable of some sort. You&amp;rsquo;ll be amazed of how easy and efficient this approach is.&lt;/p>
&lt;h2 id="2-use-non-buffered-tcp-connections">2. Use non-buffered TCP connections&lt;/h2>
&lt;p>TCP connections are slow (this compared to writing in the host&amp;rsquo;s filesystem, for example). So almost every database client that I know uses something that is called buffering. In PDO, for example, this works by accumulating the resultset of a query in the database memory, and once is done, flush it all to the client requesting the data over the TCP socket. This means that in PHP, every time you are querying something, your are loading the whole result in memory.&lt;/p>
&lt;p>Now, depending of the size of your table, this may also kill your application. If your table is 5 GB and you are dumping all its records into a csv file, that is going to allocate 5 Gb in your app&amp;rsquo;s memory. I remember the first time I encountered this problem working for a client. They had a database with the amount in MW of the electricity generated by every single electrical generation plant in Chile, every hour, over the span of 5 years. In Chile there are around 150 electrical generation plants and there are 8760 hours in a year, so that table had close to 6.127.000 records, each record roughly weighing 1 kb. That sole table was around 6 GB. Of course that wen I tried to allocate that much memory into my system it was going to crash.&lt;/p>
&lt;p>Reports like this can easily kill your app if you are not cautious. In cases like this, is always good to buffer the results as they happen over the TCP connection. In PDO, you can do this by disabling buffering in queries:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
$pdo&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">MYSQL_ATTR_USE_BUFFERED_QUERY&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you iterate over your resultset and you will get every record as it is found, keeping your memory usage very low at the cost of less speed and a bit more CPU.&lt;/p>
&lt;p>You can read more about non-buffered queries in PDO &lt;a href="https://phpdelusions.net/pdo#mysqlnd">here&lt;/a>&lt;/p>
&lt;h2 id="3-use-php-generators-with-abstractions">3. Use PHP generators with abstractions&lt;/h2>
&lt;p>Is of little use if you disable buffering your query to put every result into an array and continue with it. What you want here is the power of generators.&lt;/p>
&lt;p>I&amp;rsquo;m not going to explain in detail what they are. For that you can read &lt;a href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">the amazing blog post that Nikita Popov wrote about them&lt;/a>. I&amp;rsquo;m going to say that a generator is a special kind of iterator that yields the items of an iteration without necessarily know the whole iterable structure in advance.&lt;/p>
&lt;p>They fit very well our case for the non-buffered queries in PDO, because we do not know the whole resultset in advance, so we can yield values as they reach our server.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserReporter&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">PDO&lt;/span> $pdo;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">PDO&lt;/span> $pdo) {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $pdo;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">activeUsers&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span> {
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">MYSQL_ATTR_USE_BUFFERED_QUERY&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
$stmt &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pdo&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">prepare&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM `users` WHERE `status` = &amp;#39;active&amp;#39;&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>$stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">execute&lt;/span>()) {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">RuntimeException&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Query error&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">while&lt;/span> ($row &lt;span style="color:#f92672">=&lt;/span> $stmt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">PDO&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">FETCH_ASSOC&lt;/span>)) {
&lt;span style="color:#66d9ef">yield&lt;/span> $row; &lt;span style="color:#75715e">// This is the keyword!!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When a function has the yield keyword inside it, their return value will be an &lt;code>Iterator&lt;/code> (specifically, a &lt;code>Generator&lt;/code> instance), and every iteration will return the next yielded value. So, when &lt;code>Iterator::next()&lt;/code> is called, code will be executed until a yield is found, and that will be the return value. The code yielding will be paused until the &lt;code>Iterator::next()&lt;/code> is called, and it will continue where it was the last time, until there are no more yields.&lt;/p>
&lt;p>This is a powerful feature, useful to implement streams, data transformation pipelines and even coroutines (as Nikita&amp;rsquo;s blog post shows). You can compose iterables over iterables to create cool pipelines and process your report data separating concerns effectively.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#75715e">&amp;lt;?php&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UppercaseNames&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">iterable&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NormalizeEmails&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TranslateFields&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">IteratorAggregate&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> $iterable;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">iterable&lt;/span> $iterable)
{
$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $iterable;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getIterator&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Iterator&lt;/span>
{
&lt;span style="color:#66d9ef">foreach&lt;/span> ($this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">iterable&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Transform the data and then yield
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> $transformedItem;
}
}
}
$pipeline &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">UppercaseNames&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">NormalizeEmails&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">TranslateFields&lt;/span>($userReporter&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">activeUsers&lt;/span>())));
&lt;span style="color:#66d9ef">foreach&lt;/span> ($pipeline &lt;span style="color:#66d9ef">as&lt;/span> $item) {
&lt;span style="color:#75715e">// Write in a csv or something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Who needs ETL processing libraries when you have the power of Generators at your disposal? ð¤ï¸&lt;/p>
&lt;figure class="left" >
&lt;img src="https://media.giphy.com/media/11ahZZugJHrdLO/giphy-downsized.gif" />
&lt;/figure>
&lt;h2 id="4-prefer-easy-to-stream-content-types">4. Prefer easy-to-stream content types&lt;/h2>
&lt;p>One of the first things I ask when someone asks me to dump a report from a set of SQL tables is &amp;ldquo;Can the report be a CSV?&amp;quot;, most of the time the answer is an annoying no, because is too complex for the business guy to import a csv file into excel (really?). But I try to make my point anyways.&lt;/p>
&lt;p>Every content type structured as a tree is hard to stream, specially in PHP. I&amp;rsquo;m mainly talking about &lt;code>xml&lt;/code> and &lt;code>json&lt;/code> here. As you might know, an excel file is just compressed xml. Even really good libraries like &lt;a href="https://opensource.box.com/spout/">&lt;code>box/spout&lt;/code>&lt;/a> have to do some in-memory cache or temp file gymnastics to stream &lt;code>.xlsx&lt;/code> files. Json files can be streamed as well, but not using the native json extension functions. For streaming json in PHP you should use &lt;a href="https://github.com/violet-php/streaming-json-encoder">&lt;code>violet-php/streaming-json-encoder&lt;/code>&lt;/a>. But the most simple of all formats is the beautiful csv. Just line by line streaming: forget about parsing and reading byte per byte.&lt;/p>
&lt;p>The reason to prefer streams is because, potentially, you will be sending this somewhere else: be an object storage or a client over HTTP. Trust me, you want to stream that.&lt;/p>
&lt;p>I&amp;rsquo;ve seen applications that when I click &amp;ldquo;Download Report&amp;rdquo; it waits for like three whole minutes until the browser downloading tray icon pops, and then takes a second to download. This is because most reports build the file in-memory or disk, and then send it to the client when is done. This is poor UX. Let the user know at least that you are sending data to him/her by streaming the content, and not making him/her wait for three minutes.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Writing reports is one of the most boring tasks of a developer, but happens to be one of the most common ones. Do it well, and you&amp;rsquo;ll save yourself a lot of time that you can use in doing other, more interesting things. Besides, you&amp;rsquo;ll learn a thing or two about streaming, generators and TCP connections. ðï¸&lt;/p></content></item></channel></rss>