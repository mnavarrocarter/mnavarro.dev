<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on</title><link>https://mnavarro.dev/tags/testing/</link><description>Recent content in Testing on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Wed, 08 Sep 2021 20:00:00 +0100</lastBuildDate><atom:link href="https://mnavarro.dev/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing HTTP SDKs in Golang</title><link>https://mnavarro.dev/posts/http-sdk-testing-in-go/</link><pubDate>Wed, 08 Sep 2021 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/http-sdk-testing-in-go/</guid><description>How do you test code that integrates with a third party HTTP service?
The Philosophical Answer If you think about it, it is not an easy question to answer. Maybe you have already some strong opinions formed about it. But, in my experience, answers to this question differ greatly among developers, even between seasoned ones.
I believe those differences are due to some preconceived ideas or different definitions about what testing is.</description></item><item><title>Unit-testing the filesystem in PHP</title><link>https://mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description></item></channel></rss>