<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on mnavarro.dev</title><link>https://mnavarro.dev/tags/php/</link><description>Recent content in php on mnavarro.dev</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Mon, 20 Jul 2020 20:00:00 +0100</lastBuildDate><atom:link href="https://mnavarro.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Namespaced Taxonomy Syndrome</title><link>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</link><pubDate>Mon, 20 Jul 2020 20:00:00 +0100</pubDate><guid>https://mnavarro.dev/posts/namespaced-taxonomy-sindrome/</guid><description>The Discovery of a Syndrome The past week I had some really nice holidays, but my wife still had to work. That&amp;rsquo;s nice sometimes because it means staying at home with loads of time to do one of my favorite things: getting myself into learning and coding (I also did some cleaning, cooking and DIYing too!).
I was surfing YouTube for good coding talks and one caught my attention. It was Jack Diederich&amp;rsquo;s PyCon 2012 talk entitled &amp;ldquo;Stop Writing Classes&amp;rdquo;.</description></item><item><title>The case for Object Mapping</title><link>https://mnavarro.dev/posts/the-case-for-object-mapping/</link><pubDate>Tue, 28 Apr 2020 20:00:00 +0000</pubDate><guid>https://mnavarro.dev/posts/the-case-for-object-mapping/</guid><description>Introduction: A Tale of Simplicity VS Complexity NOTE: Every time the word array is used in this article I&amp;rsquo;m referring to the PHP definition of this term. You can also consider that term equivalent, for the purposes of this article only, to use instances of stdClass or instances of classes that contain dynamic public properties, like Active Record Models. This is because the deficiencies pointed with arrays apply to those constructs as well.</description></item><item><title>Repository Pattern Done Right</title><link>https://mnavarro.dev/posts/repository-pattern-done-right/</link><pubDate>Mon, 17 Feb 2020 20:00:00 -0300</pubDate><guid>https://mnavarro.dev/posts/repository-pattern-done-right/</guid><description>The repository pattern is one of the most well established patterns in Domain Driven Design. It&amp;rsquo;s origins can be traced as early as when Object Oriented Programing was born.
Of course, like it happens with almost every pattern or tool, you can really use it terribly the first time (or even the second, or the third one). The only way to improve upon that is good literature and seeing other, more appropriate, uses of the pattern/tool.</description></item><item><title>Un nuevo SDK de Transbank</title><link>https://mnavarro.dev/posts/a-brand-new-transbank-sdk/</link><pubDate>Tue, 07 Jan 2020 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/a-brand-new-transbank-sdk/</guid><description>&lt;p>Si has usado el SDK de Transbank para PHP quizás entiendas la frustación que me motivó a escribir un nuevo SDK no oficial. Hace mucho tiempo que tenía este proyecto en mente y decidí que el mundo no podía comenzar otra década sin un nuevo SDK de Transbank.&lt;/p></description></item><item><title>Unit-testing the filesystem in PHP</title><link>https://mnavarro.dev/posts/php-filesystem-unit-testing/</link><pubDate>Mon, 16 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-filesystem-unit-testing/</guid><description>I used to be a big fan of filesystem abstractions, not only for the abstraction benefit, but also for the testing benefit as well. It is trivial to unit test classes depending in filesystem abstractions like Flysystem or Gaufrette: just a simple mock of the interface and we are done.
However, from time to time I was kinda annoyed with some limitations of the abstractions, specially in regards to stream handling.</description></item><item><title>Efficient Reports in PHP</title><link>https://mnavarro.dev/posts/php-efficient-reporting/</link><pubDate>Tue, 10 Dec 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/php-efficient-reporting/</guid><description>&lt;p>When it comes to reporting, I have a predefined set of rules that I follow sacredly and that will ensure that my report writing experience will be nice and problem-free.&lt;/p></description></item><item><title>Entendiendo Versionamiento Semántico</title><link>https://mnavarro.dev/posts/semantic-versioning/</link><pubDate>Sat, 12 Oct 2019 11:18:48 -0300</pubDate><guid>https://mnavarro.dev/posts/semantic-versioning/</guid><description>Hace poco estaba hablando con un colega y recomendándole una librería para ayudarle en un problema que estaba tratando de resolver. Mientras le hablaba de cómo funcionaba la librería, abrió el repositorio Github de la misma y vio el número de version (1.1.5) y me dijo “No es muy buena, está solo en versión 1”.
Lo miré con cara de confundido e inmediatamente me di cuenta que su entendimiento de versionamiento semántico era algo así como “Las buenas librerías son las que tienen un número de version alto”.</description></item></channel></rss>